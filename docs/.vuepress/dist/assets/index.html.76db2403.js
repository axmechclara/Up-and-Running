import{r,o as u,c as d,a as s,b as e,w as a,F as h,d as n,e as c}from"./app.dc0f75f2.js";import{_ as g}from"./plugin-vue_export-helper.21dcd24c.js";const b={},k={id:"greenbone-vulnerability-manager",tabindex:"-1"},_=s("a",{class:"header-anchor",href:"#greenbone-vulnerability-manager","aria-hidden":"true"},"#",-1),v=n(" Greenbone Vulnerability Manager "),m=s("p",null,"Greenbone is the world's most used open source vulnerability management provider. Their mission is to help you detect vulnerabilities before they can be exploited - reducing the risk and impact of cyberattacks. OpenVAS is a full-featured vulnerability scanner. Its capabilities include unauthenticated testing, authenticated testing, various high level and low level internet and industrial protocols, performance tuning for large-scale scans and a powerful internal programming language to implement any type of vulnerability test.",-1),f={href:"https://www.greenbone.net/en/vulnerability-management/",target:"_blank",rel:"noopener noreferrer"},y=n("GVM website"),S=n(),R={href:"https://www.openvas.org/",target:"_blank",rel:"noopener noreferrer"},I=n("OpenVAS website"),E=n(),x={href:"https://github.com/greenbone",target:"_blank",rel:"noopener noreferrer"},$=n("GitHub"),D=n(),A={href:"https://greenbone.github.io/docs/",target:"_blank",rel:"noopener noreferrer"},O=n("GVM official docs"),w=s("p",null,"Setup and configuration have been tested on the following operating systems:",-1),V=s("div",{class:"custom-container tip"},[s("p",{class:"custom-container-title"},"TIP"),s("p",null,"How-to build GVM on Rocky 8.4 from source will be added in upcoming release.")],-1),N=s("li",null,"Ubuntu- 16.04, 18.04, 20.04 (Focal Fossa)",-1),G=n("GVM 20.08 for Debian 10 visit "),L={href:"https://sadsloth.net/post/install-gvm-20_08-src-on-debian/",target:"_blank",rel:"noopener noreferrer"},U=n("sadsloth.net"),C=n("."),M=s("li",null,"GVM- 20.08, 20.08.1, 21.04 (21.4.2, 21.4.3, 21.4.4), Atomicorp 21.04 (Redhat 8, CentOS 8, Fedora 32, Fedora 34)",-1),T={href:"https://ko-fi.com/B0B31BJU3",target:"_blank",rel:"noopener noreferrer"},P=s("img",{src:"https://www.ko-fi.com/img/githubbutton_sm.svg",alt:"ko-fi"},null,-1),B=s("h2",{id:"configuration-files",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#configuration-files","aria-hidden":"true"},"#"),n(" Configuration files")],-1),F=s("div",{class:"custom-container tip"},[s("p",{class:"custom-container-title"},"TIP"),s("p",null,'The lines in the "scripts" below has been used for testing and successfully configured GVM 21.04. You may use the testing guide to install GVM or follow our detailed step-by-step tutorial below to install GVM 21.04.')],-1),z={href:"https://github.com/libellux/Libellux-Up-and-Running/blob/master/docs/openvas/config/ubuntu_21.4.4.sh",target:"_blank",rel:"noopener noreferrer"},q=n("GVM 21.4.4"),W={href:"https://github.com/libellux/Libellux-Up-and-Running/blob/master/docs/openvas/config/ubuntu_21.4.3.sh",target:"_blank",rel:"noopener noreferrer"},Y=n("GVM 21.4.3"),K={href:"https://github.com/libellux/Libellux-Up-and-Running/blob/master/docs/openvas/config/ubuntu_21.4.2.sh",target:"_blank",rel:"noopener noreferrer"},H=n("GVM 21.4.2"),X=c('<h2 id="system-requirements" tabindex="-1"><a class="header-anchor" href="#system-requirements" aria-hidden="true">#</a> System requirements</h2><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>These minimum system requirements (VMware ESXi) are in no way official recommendations but used when testing and building GVM from source.</p></div><ul><li>Memory: 4 GB RAM</li><li>Free space: 20 GB</li></ul><h2 id="prerequisites" tabindex="-1"><a class="header-anchor" href="#prerequisites" aria-hidden="true">#</a> Prerequisites</h2>',4),j=n("Dependencies required to install GVM 21.04 (21.4.4) from source. For more detailed information regarding dependencies and their function please visit "),Q={href:"https://greenbone.github.io/docs/",target:"_blank",rel:"noopener noreferrer"},J=n("GVM official docs"),Z=n(" website. It is also recommended if you want to keep yourself up-to-date to read "),ss={href:"https://greenbone.github.io/docs/changelog.html",target:"_blank",rel:"noopener noreferrer"},ns=n("Greenbone's changelog"),es=n("."),as=c(`<details class="custom-container details"><summary>Dependencies for Ubuntu 20.04</summary><div class="language-text ext-text"><pre class="language-text"><code>build-essential cmake pkg-config gcc-mingw-w64 gnutls-bin
libgnutls28-dev libxml2-dev libssh-dev libssl-dev libunistring-dev
libldap2-dev libgcrypt-dev libpcap-dev libgpgme-dev libradcli-dev libglib2.0-dev
libksba-dev libical-dev libpq-dev libopenvas-dev libpopt-dev libnet1-dev
libmicrohttpd-dev redis-server libhiredis-dev doxygen xsltproc uuid-dev
graphviz bison postgresql postgresql-contrib postgresql-server-dev-all
heimdal-dev xmltoman nmap npm nodejs virtualenv gnupg rsync yarnpkg
python3-paramiko python3-lxml python3-defusedxml python3-pip python3-psutil
python3-setuptools python3-packaging python3-wrapt python3-cffi python3-redis
xmlstarlet texlive-fonts-recommended texlive-latex-extra perl-base
</code></pre></div></details><h2 id="install-gvm-21-04-from-source" tabindex="-1"><a class="header-anchor" href="#install-gvm-21-04-from-source" aria-hidden="true">#</a> Install GVM 21.04 from source</h2><p>Begin to install the dependencies for GVM 21.04 (21.4.4).</p>`,3),ts=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,[n("server@ubuntu:~$ "),s("span",{class:"token function"},"sudo"),n(),s("span",{class:"token function"},"apt-get"),n(" update "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
`),s("span",{class:"token function"},"sudo"),n(),s("span",{class:"token function"},"apt-get"),n(" -y upgrade "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
`),s("span",{class:"token function"},"sudo"),n(),s("span",{class:"token function"},"apt-get"),n(),s("span",{class:"token function"},"install"),n(" -y build-essential "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
`),s("span",{class:"token function"},"sudo"),n(),s("span",{class:"token function"},"apt-get"),n(),s("span",{class:"token function"},"install"),n(" -y cmake pkg-config gcc-mingw-w64 "),s("span",{class:"token punctuation"},"\\"),n(`
gnutls-bin libgnutls28-dev libxml2-dev libssh-dev libssl-dev libunistring-dev `),s("span",{class:"token punctuation"},"\\"),n(`
libldap2-dev libgcrypt-dev libpcap-dev libgpgme-dev libradcli-dev libglib2.0-dev `),s("span",{class:"token punctuation"},"\\"),n(`
libksba-dev libical-dev libpq-dev libopenvas-dev libpopt-dev libnet1-dev `),s("span",{class:"token punctuation"},"\\"),n(`
libmicrohttpd-dev redis-server libhiredis-dev doxygen xsltproc uuid-dev `),s("span",{class:"token punctuation"},"\\"),n(`
graphviz bison postgresql postgresql-contrib postgresql-server-dev-all `),s("span",{class:"token punctuation"},"\\"),n(`
heimdal-dev xmltoman nmap `),s("span",{class:"token function"},"npm"),n(" nodejs virtualenv gnupg "),s("span",{class:"token function"},"rsync"),n(" yarnpkg "),s("span",{class:"token punctuation"},"\\"),n(`
python3-paramiko python3-lxml python3-defusedxml python3-pip python3-psutil `),s("span",{class:"token punctuation"},"\\"),n(`
python3-setuptools python3-packaging python3-wrapt python3-cffi python3-redis `),s("span",{class:"token punctuation"},"\\"),n(`
xmlstarlet texlive-fonts-recommended texlive-latex-extra perl-base
`)])])],-1),os=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,`server@rocky:~$
`)])],-1),ls=s("p",null,"Continue to install yarn using npm.",-1),cs=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,[n("server@ubuntu:~$ "),s("span",{class:"token function"},"sudo"),n(),s("span",{class:"token function"},"npm"),n(),s("span",{class:"token function"},"install"),n(" -g "),s("span",{class:"token function"},"yarn"),n(`
`)])])],-1),rs=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,`server@rocky:~$
`)])],-1),is=s("h3",{id:"set-up-gvm-user-define-installation-paths",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#set-up-gvm-user-define-installation-paths","aria-hidden":"true"},"#"),n(" Set up GVM user define installation paths")],-1),ps=s("p",null,[n("Create the GVM user and add it to sudoers group without login. Also add your current sudo user to the GVM group so you're allowed to run "),s("em",null,"gvmd"),n(".")],-1),us=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,[n("server@ubuntu:~$ "),s("span",{class:"token function"},"sudo"),n(),s("span",{class:"token function"},"useradd"),n(" -r -M -U -G "),s("span",{class:"token function"},"sudo"),n(" -s /usr/sbin/nologin gvm "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
`),s("span",{class:"token function"},"sudo"),n(),s("span",{class:"token function"},"usermod"),n(" -aG gvm "),s("span",{class:"token environment constant"},"$USER"),n(),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token function"},"su"),n(),s("span",{class:"token environment constant"},"$USER"),n(`
`)])])],-1),ds=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,`server@rocky:~$
`)])],-1),hs=s("p",null,"Next define base, source, build and installation directories.",-1),gs=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,[n("server@ubuntu:~$ "),s("span",{class:"token builtin class-name"},"export"),n(),s("span",{class:"token assign-left variable"},[s("span",{class:"token environment constant"},"PATH")]),s("span",{class:"token operator"},"="),s("span",{class:"token environment constant"},"$PATH"),n(":/usr/local/sbin "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token builtin class-name"},"export"),n(),s("span",{class:"token assign-left variable"},"INSTALL_PREFIX"),s("span",{class:"token operator"},"="),n("/usr/local "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
`),s("span",{class:"token builtin class-name"},"export"),n(),s("span",{class:"token assign-left variable"},"SOURCE_DIR"),s("span",{class:"token operator"},"="),s("span",{class:"token environment constant"},"$HOME"),n("/source "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token function"},"mkdir"),n(" -p "),s("span",{class:"token variable"},"$SOURCE_DIR"),n(),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
`),s("span",{class:"token builtin class-name"},"export"),n(),s("span",{class:"token assign-left variable"},"BUILD_DIR"),s("span",{class:"token operator"},"="),s("span",{class:"token environment constant"},"$HOME"),n("/build "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token function"},"mkdir"),n(" -p "),s("span",{class:"token variable"},"$BUILD_DIR"),n(),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
`),s("span",{class:"token builtin class-name"},"export"),n(),s("span",{class:"token assign-left variable"},"INSTALL_DIR"),s("span",{class:"token operator"},"="),s("span",{class:"token environment constant"},"$HOME"),n("/install "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token function"},"mkdir"),n(" -p "),s("span",{class:"token variable"},"$INSTALL_DIR"),n(`
`)])])],-1),bs=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,`server@rocky:~$
`)])],-1),ks=s("h3",{id:"import-gvm-signing-key",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#import-gvm-signing-key","aria-hidden":"true"},"#"),n(" Import GVM signing key")],-1),_s=s("p",null,"Download the signing key from Greenbone community to validate the integrity of the source files.",-1),vs=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,[n("server@ubuntu:~$ "),s("span",{class:"token function"},"curl"),n(" -O https://www.greenbone.net/GBCommunitySigningKey.asc "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
gpg --import GBCommunitySigningKey.asc
`)])])],-1),ms=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,`server@rocky:~$
`)])],-1),fs=s("p",null,"Edit GVM signing key to trust ultimately.",-1),ys=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,`server@ubuntu:~$ gpg --edit-key 9823FAA60ED1E580
`)])],-1),Ss=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,`server@rocky:~$
`)])],-1),Rs=c(`<p>When you get prompted type <em>trust</em> and select option 5 (I trust ultimately).</p><div class="language-bash ext-sh"><pre class="language-bash"><code>gpg <span class="token punctuation">(</span>GnuPG<span class="token punctuation">)</span> <span class="token number">2.2</span>.19<span class="token punctuation">;</span> Copyright <span class="token punctuation">(</span>C<span class="token punctuation">)</span> <span class="token number">2019</span> Free Software Foundation, Inc.
This is <span class="token function">free</span> software: you are <span class="token function">free</span> to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

pub  rsa4096/9823FAA60ED1E580
     created: <span class="token number">2017</span>-09-06  expires: never       usage: SC
     trust: unknown       validity: unknown
<span class="token punctuation">[</span> unknown<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>. Greenbone Community Feed integrity key

gpg<span class="token operator">&gt;</span> trust
pub  rsa4096/9823FAA60ED1E580
     created: <span class="token number">2017</span>-09-06  expires: never       usage: SC
     trust: unknown       validity: unknown
<span class="token punctuation">[</span> unknown<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>. Greenbone Community Feed integrity key

Please decide how far you trust this user to correctly verify other <span class="token function">users</span><span class="token string">&#39; keys
(by looking at passports, checking fingerprints from different sources, etc.)

  1 = I don&#39;</span>t know or won&#39;t say
  <span class="token number">2</span> <span class="token operator">=</span> I <span class="token keyword">do</span> NOT trust
  <span class="token number">3</span> <span class="token operator">=</span> I trust marginally
  <span class="token number">4</span> <span class="token operator">=</span> I trust fully
  <span class="token number">5</span> <span class="token operator">=</span> I trust ultimately
  m <span class="token operator">=</span> back to the main menu

Your decision? <span class="token number">5</span>
Do you really want to <span class="token builtin class-name">set</span> this key to ultimate trust? <span class="token punctuation">(</span>y/N<span class="token punctuation">)</span> y

pub  rsa4096/9823FAA60ED1E580
     created: <span class="token number">2017</span>-09-06  expires: never       usage: SC
     trust: ultimate      validity: unknown
<span class="token punctuation">[</span> unknown<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>. Greenbone Community Feed integrity key
Please note that the shown key validity is not necessarily correct
unless you restart the program.

gpg<span class="token operator">&gt;</span> quit
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><div class="highlight-line">\xA0</div><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line">\xA0</div><br><br><div class="highlight-line">\xA0</div><br><br><br><br><br><br><br><br><br><div class="highlight-line">\xA0</div></div></div><h3 id="build-gvm-libraries" tabindex="-1"><a class="header-anchor" href="#build-gvm-libraries" aria-hidden="true">#</a> Build GVM libraries</h3>`,3),Is=n("Download and build the "),Es={href:"https://github.com/greenbone/gvm-libs",target:"_blank",rel:"noopener noreferrer"},xs=n("GVM libraries"),$s=n(" version 21.04 (current 21.4.3)."),Ds=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,[n("server@ubuntu:~$ "),s("span",{class:"token builtin class-name"},"export"),n(),s("span",{class:"token assign-left variable"},"GVM_VERSION"),s("span",{class:"token operator"},"="),s("span",{class:"token number"},"21.4"),n(".4 "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
`),s("span",{class:"token builtin class-name"},"export"),n(),s("span",{class:"token assign-left variable"},"GVM_LIBS_VERSION"),s("span",{class:"token operator"},"="),s("span",{class:"token number"},"21.4"),n(`.3
`)])])],-1),As=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,`server@rocky:~$
`)])],-1),Os=s("p",null,"Download and verify the specified GVM libraries.",-1),ws=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,[n("server@ubuntu:~$ "),s("span",{class:"token function"},"curl"),n(" -f -L https://github.com/greenbone/gvm-libs/archive/refs/tags/v"),s("span",{class:"token variable"},"$GVM_LIBS_VERSION"),n(".tar.gz -o "),s("span",{class:"token variable"},"$SOURCE_DIR"),n("/gvm-libs-"),s("span",{class:"token variable"},"$GVM_LIBS_VERSION"),n(".tar.gz "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
`),s("span",{class:"token function"},"curl"),n(" -f -L https://github.com/greenbone/gvm-libs/releases/download/v"),s("span",{class:"token variable"},"$GVM_LIBS_VERSION"),n("/gvm-libs-"),s("span",{class:"token variable"},"$GVM_LIBS_VERSION"),n(".tar.gz.asc -o "),s("span",{class:"token variable"},"$SOURCE_DIR"),n("/gvm-libs-"),s("span",{class:"token variable"},"$GVM_LIBS_VERSION"),n(".tar.gz.asc "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
gpg --verify `),s("span",{class:"token variable"},"$SOURCE_DIR"),n("/gvm-libs-"),s("span",{class:"token variable"},"$GVM_LIBS_VERSION"),n(".tar.gz.asc "),s("span",{class:"token variable"},"$SOURCE_DIR"),n("/gvm-libs-"),s("span",{class:"token variable"},"$GVM_LIBS_VERSION"),n(`.tar.gz
`)])])],-1),Vs=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,`server@rocky:~$
`)])],-1),Ns=c(`<p>Make sure the output says that the signature from Greenbone Community Feed is good.</p><div class="language-bash ext-sh"><pre class="language-bash"><code>gpg: Signature made Tue 03 Aug <span class="token number">2021</span> <span class="token number">12</span>:11:44 PM UTC
gpg:                using RSA key 8AE4BE429B60A59B311C2E739823FAA60ED1E580
gpg: checking the trustdb
gpg: marginals needed: <span class="token number">3</span>  completes needed: <span class="token number">1</span>  trust model: pgp
gpg: depth: <span class="token number">0</span>  valid:   <span class="token number">1</span>  signed:   <span class="token number">0</span>  trust: <span class="token number">0</span>-, 0q, 0n, 0m, 0f, 1u
gpg: Good signature from <span class="token string">&quot;Greenbone Community Feed integrity key&quot;</span> <span class="token punctuation">[</span>ultimate<span class="token punctuation">]</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><div class="highlight-line">\xA0</div></div></div><p>Once you&#39;ve confirmed that the signature is good, proceed to install GVM libraries.</p>`,3),Gs=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,[n("server@ubuntu:~$ "),s("span",{class:"token function"},"tar"),n(" -C "),s("span",{class:"token variable"},"$SOURCE_DIR"),n(" -xvzf "),s("span",{class:"token variable"},"$SOURCE_DIR"),n("/gvm-libs-"),s("span",{class:"token variable"},"$GVM_LIBS_VERSION"),n(".tar.gz "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
`),s("span",{class:"token function"},"mkdir"),n(" -p "),s("span",{class:"token variable"},"$BUILD_DIR"),n("/gvm-libs "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token builtin class-name"},"cd"),n(),s("span",{class:"token variable"},"$BUILD_DIR"),n("/gvm-libs "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
cmake `),s("span",{class:"token variable"},"$SOURCE_DIR"),n("/gvm-libs-"),s("span",{class:"token variable"},"$GVM_LIBS_VERSION"),n(),s("span",{class:"token punctuation"},"\\"),n(`
  -DCMAKE_INSTALL_PREFIX`),s("span",{class:"token operator"},"="),s("span",{class:"token variable"},"$INSTALL_PREFIX"),n(),s("span",{class:"token punctuation"},"\\"),n(`
  -DCMAKE_BUILD_TYPE`),s("span",{class:"token operator"},"="),n("Release "),s("span",{class:"token punctuation"},"\\"),n(`
  -DSYSCONFDIR`),s("span",{class:"token operator"},"="),n("/etc "),s("span",{class:"token punctuation"},"\\"),n(`
  -DLOCALSTATEDIR`),s("span",{class:"token operator"},"="),n("/var "),s("span",{class:"token punctuation"},"\\"),n(`
  -DGVM_PID_DIR`),s("span",{class:"token operator"},"="),n("/run/gvm "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
`),s("span",{class:"token function"},"make"),n(),s("span",{class:"token assign-left variable"},"DESTDIR"),s("span",{class:"token operator"},"="),s("span",{class:"token variable"},"$INSTALL_DIR"),n(),s("span",{class:"token function"},"install"),n(),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
`),s("span",{class:"token function"},"sudo"),n(),s("span",{class:"token function"},"cp"),n(" -rv "),s("span",{class:"token variable"},"$INSTALL_DIR"),n("/* / "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
`),s("span",{class:"token function"},"rm"),n(" -rf "),s("span",{class:"token variable"},"$INSTALL_DIR"),n(`/*
`)])])],-1),Ls=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,`server@rocky:~$
`)])],-1),Us=s("h3",{id:"build-the-greenbone-vulnerability-manager",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#build-the-greenbone-vulnerability-manager","aria-hidden":"true"},"#"),n(" Build the Greenbone Vulnerability Manager")],-1),Cs=n("Next download, verify and build the "),Ms={href:"https://github.com/greenbone/gvmd",target:"_blank",rel:"noopener noreferrer"},Ts=n("Greenbone Vulnerability Manager (GVM)"),Ps=n(" version 21.04 (21.4.4). Set the GVMD version to the latest realese (current 21.4.4)."),Bs=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,[n("server@ubuntu:~$ "),s("span",{class:"token builtin class-name"},"export"),n(),s("span",{class:"token assign-left variable"},"GVMD_VERSION"),s("span",{class:"token operator"},"="),s("span",{class:"token number"},"21.4"),n(".4 "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
`),s("span",{class:"token function"},"curl"),n(" -f -L https://github.com/greenbone/gvmd/archive/refs/tags/v"),s("span",{class:"token variable"},"$GVMD_VERSION"),n(".tar.gz -o "),s("span",{class:"token variable"},"$SOURCE_DIR"),n("/gvmd-"),s("span",{class:"token variable"},"$GVMD_VERSION"),n(".tar.gz "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
`),s("span",{class:"token function"},"curl"),n(" -f -L https://github.com/greenbone/gvmd/releases/download/v"),s("span",{class:"token variable"},"$GVMD_VERSION"),n("/gvmd-"),s("span",{class:"token variable"},"$GVMD_VERSION"),n(".tar.gz.asc -o "),s("span",{class:"token variable"},"$SOURCE_DIR"),n("/gvmd-"),s("span",{class:"token variable"},"$GVMD_VERSION"),n(".tar.gz.asc "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
gpg --verify `),s("span",{class:"token variable"},"$SOURCE_DIR"),n("/gvmd-"),s("span",{class:"token variable"},"$GVMD_VERSION"),n(".tar.gz.asc "),s("span",{class:"token variable"},"$SOURCE_DIR"),n("/gvmd-"),s("span",{class:"token variable"},"$GVMD_VERSION"),n(`.tar.gz
`)])])],-1),Fs=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,`server@rocky:~$
`)])],-1),zs=c(`<p>Make sure the signature from Greenbone Community Feed is good.</p><div class="language-bash ext-sh"><pre class="language-bash"><code>gpg: Signature made Tue 03 Aug <span class="token number">2021</span> 02:28:53 PM UTC
gpg:                using RSA key 8AE4BE429B60A59B311C2E739823FAA60ED1E580
gpg: Good signature from <span class="token string">&quot;Greenbone Community Feed integrity key&quot;</span> <span class="token punctuation">[</span>ultimate<span class="token punctuation">]</span>
</code></pre><div class="highlight-lines"><br><br><div class="highlight-line">\xA0</div></div></div><p>Extract the downloaded GVMD file and proceed with the installation.</p>`,3),qs=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,[n("server@ubuntu:~$ "),s("span",{class:"token function"},"tar"),n(" -C "),s("span",{class:"token variable"},"$SOURCE_DIR"),n(" -xvzf "),s("span",{class:"token variable"},"$SOURCE_DIR"),n("/gvmd-"),s("span",{class:"token variable"},"$GVMD_VERSION"),n(".tar.gz "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
`),s("span",{class:"token function"},"mkdir"),n(" -p "),s("span",{class:"token variable"},"$BUILD_DIR"),n("/gvmd "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token builtin class-name"},"cd"),n(),s("span",{class:"token variable"},"$BUILD_DIR"),n("/gvmd "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
cmake `),s("span",{class:"token variable"},"$SOURCE_DIR"),n("/gvmd-"),s("span",{class:"token variable"},"$GVMD_VERSION"),n(),s("span",{class:"token punctuation"},"\\"),n(`
  -DCMAKE_INSTALL_PREFIX`),s("span",{class:"token operator"},"="),s("span",{class:"token variable"},"$INSTALL_PREFIX"),n(),s("span",{class:"token punctuation"},"\\"),n(`
  -DCMAKE_BUILD_TYPE`),s("span",{class:"token operator"},"="),n("Release "),s("span",{class:"token punctuation"},"\\"),n(`
  -DLOCALSTATEDIR`),s("span",{class:"token operator"},"="),n("/var "),s("span",{class:"token punctuation"},"\\"),n(`
  -DSYSCONFDIR`),s("span",{class:"token operator"},"="),n("/etc "),s("span",{class:"token punctuation"},"\\"),n(`
  -DGVM_DATA_DIR`),s("span",{class:"token operator"},"="),n("/var "),s("span",{class:"token punctuation"},"\\"),n(`
  -DGVM_RUN_DIR`),s("span",{class:"token operator"},"="),n("/run/gvm "),s("span",{class:"token punctuation"},"\\"),n(`
  -DOPENVAS_DEFAULT_SOCKET`),s("span",{class:"token operator"},"="),n("/run/ospd/ospd-openvas.sock "),s("span",{class:"token punctuation"},"\\"),n(`
  -DGVM_FEED_LOCK_PATH`),s("span",{class:"token operator"},"="),n("/var/lib/gvm/feed-update.lock "),s("span",{class:"token punctuation"},"\\"),n(`
  -DSYSTEMD_SERVICE_DIR`),s("span",{class:"token operator"},"="),n("/lib/systemd/system "),s("span",{class:"token punctuation"},"\\"),n(`
  -DDEFAULT_CONFIG_DIR`),s("span",{class:"token operator"},"="),n("/etc/default "),s("span",{class:"token punctuation"},"\\"),n(`
  -DLOGROTATE_DIR`),s("span",{class:"token operator"},"="),n("/etc/logrotate.d "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
`),s("span",{class:"token function"},"make"),n(),s("span",{class:"token assign-left variable"},"DESTDIR"),s("span",{class:"token operator"},"="),s("span",{class:"token variable"},"$INSTALL_DIR"),n(),s("span",{class:"token function"},"install"),n(),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
`),s("span",{class:"token function"},"sudo"),n(),s("span",{class:"token function"},"cp"),n(" -rv "),s("span",{class:"token variable"},"$INSTALL_DIR"),n("/* / "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
`),s("span",{class:"token function"},"rm"),n(" -rf "),s("span",{class:"token variable"},"$INSTALL_DIR"),n(`/*
`)])])],-1),Ws=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,`server@rocky:~$
`)])],-1),Ys=s("h3",{id:"build-the-greenbone-security-assistant",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#build-the-greenbone-security-assistant","aria-hidden":"true"},"#"),n(" Build the Greenbone Security Assistant")],-1),Ks=n("Proceed to download and build the "),Hs={href:"https://github.com/greenbone/gsa",target:"_blank",rel:"noopener noreferrer"},Xs=n("Greenbone Security Assistant (GSA)"),js=n(" version 21.04 (current 21.4.3)."),Qs=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,[n("server@ubuntu:~$ "),s("span",{class:"token builtin class-name"},"export"),n(),s("span",{class:"token assign-left variable"},"GSA_VERSION"),s("span",{class:"token operator"},"="),s("span",{class:"token number"},"21.4"),n(".3 "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
`),s("span",{class:"token function"},"curl"),n(" -f -L https://github.com/greenbone/gsa/archive/refs/tags/v"),s("span",{class:"token variable"},"$GSA_VERSION"),n(".tar.gz -o "),s("span",{class:"token variable"},"$SOURCE_DIR"),n("/gsa-"),s("span",{class:"token variable"},"$GSA_VERSION"),n(".tar.gz "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
`),s("span",{class:"token function"},"curl"),n(" -f -L https://github.com/greenbone/gsa/releases/download/v"),s("span",{class:"token variable"},"$GSA_VERSION"),n("/gsa-"),s("span",{class:"token variable"},"$GSA_VERSION"),n(".tar.gz.asc -o "),s("span",{class:"token variable"},"$SOURCE_DIR"),n("/gsa-"),s("span",{class:"token variable"},"$GSA_VERSION"),n(".tar.gz.asc "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
gpg --verify `),s("span",{class:"token variable"},"$SOURCE_DIR"),n("/gsa-"),s("span",{class:"token variable"},"$GSA_VERSION"),n(".tar.gz.asc "),s("span",{class:"token variable"},"$SOURCE_DIR"),n("/gsa-"),s("span",{class:"token variable"},"$GSA_VERSION"),n(`.tar.gz
`)])])],-1),Js=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,`server@rocky:~$
`)])],-1),Zs=c(`<p>Once complete, verify the GSA downloads and make sure the signature from Greenbone Community Feed is good.</p><div class="language-bash ext-sh"><pre class="language-bash"><code>gpg: Signature made Tue 03 Aug <span class="token number">2021</span> 02:59:15 PM UTC
gpg:                using RSA key 8AE4BE429B60A59B311C2E739823FAA60ED1E580
gpg: Good signature from <span class="token string">&quot;Greenbone Community Feed integrity key&quot;</span> <span class="token punctuation">[</span>ultimate<span class="token punctuation">]</span>
</code></pre><div class="highlight-lines"><br><br><div class="highlight-line">\xA0</div></div></div><p>Proceed with the installation of GSA.</p><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>This may take a while.</p></div>`,4),sn=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,[n("server@ubuntu:~$ "),s("span",{class:"token function"},"tar"),n(" -C "),s("span",{class:"token variable"},"$SOURCE_DIR"),n(" -xvzf "),s("span",{class:"token variable"},"$SOURCE_DIR"),n("/gsa-"),s("span",{class:"token variable"},"$GSA_VERSION"),n(".tar.gz "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
`),s("span",{class:"token function"},"mkdir"),n(" -p "),s("span",{class:"token variable"},"$BUILD_DIR"),n("/gsa "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token builtin class-name"},"cd"),n(),s("span",{class:"token variable"},"$BUILD_DIR"),n("/gsa "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
cmake `),s("span",{class:"token variable"},"$SOURCE_DIR"),n("/gsa-"),s("span",{class:"token variable"},"$GSA_VERSION"),n(),s("span",{class:"token punctuation"},"\\"),n(`
  -DCMAKE_INSTALL_PREFIX`),s("span",{class:"token operator"},"="),s("span",{class:"token variable"},"$INSTALL_PREFIX"),n(),s("span",{class:"token punctuation"},"\\"),n(`
  -DCMAKE_BUILD_TYPE`),s("span",{class:"token operator"},"="),n("Release "),s("span",{class:"token punctuation"},"\\"),n(`
  -DSYSCONFDIR`),s("span",{class:"token operator"},"="),n("/etc "),s("span",{class:"token punctuation"},"\\"),n(`
  -DLOCALSTATEDIR`),s("span",{class:"token operator"},"="),n("/var "),s("span",{class:"token punctuation"},"\\"),n(`
  -DGVM_RUN_DIR`),s("span",{class:"token operator"},"="),n("/run/gvm "),s("span",{class:"token punctuation"},"\\"),n(`
  -DGSAD_PID_DIR`),s("span",{class:"token operator"},"="),n("/run/gvm "),s("span",{class:"token punctuation"},"\\"),n(`
  -DLOGROTATE_DIR`),s("span",{class:"token operator"},"="),n("/etc/logrotate.d "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
`),s("span",{class:"token function"},"make"),n(),s("span",{class:"token assign-left variable"},"DESTDIR"),s("span",{class:"token operator"},"="),s("span",{class:"token variable"},"$INSTALL_DIR"),n(),s("span",{class:"token function"},"install"),n(),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
`),s("span",{class:"token function"},"sudo"),n(),s("span",{class:"token function"},"cp"),n(" -rv "),s("span",{class:"token variable"},"$INSTALL_DIR"),n("/* / "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
`),s("span",{class:"token function"},"rm"),n(" -rf "),s("span",{class:"token variable"},"$INSTALL_DIR"),n(`/*
`)])])],-1),nn=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,`server@rocky:~$
`)])],-1),en=s("h3",{id:"build-the-openvas-samba-module",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#build-the-openvas-samba-module","aria-hidden":"true"},"#"),n(" Build the OpenVAS Samba module")],-1),an=n("Download and build the "),tn={href:"https://github.com/greenbone/openvas-smb",target:"_blank",rel:"noopener noreferrer"},on=n("OpenVAS SMB module"),ln=n(" version 21.04 (current 21.4.0)."),cn=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,[n("server@ubuntu:~$ "),s("span",{class:"token builtin class-name"},"export"),n(),s("span",{class:"token assign-left variable"},"OPENVAS_SMB_VERSION"),s("span",{class:"token operator"},"="),s("span",{class:"token number"},"21.4"),n(".0 "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
`),s("span",{class:"token function"},"curl"),n(" -f -L https://github.com/greenbone/openvas-smb/archive/refs/tags/v"),s("span",{class:"token variable"},"$OPENVAS_SMB_VERSION"),n(".tar.gz -o "),s("span",{class:"token variable"},"$SOURCE_DIR"),n("/openvas-smb-"),s("span",{class:"token variable"},"$OPENVAS_SMB_VERSION"),n(".tar.gz "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
`),s("span",{class:"token function"},"curl"),n(" -f -L https://github.com/greenbone/openvas-smb/releases/download/v"),s("span",{class:"token variable"},"$OPENVAS_SMB_VERSION"),n("/openvas-smb-"),s("span",{class:"token variable"},"$OPENVAS_SMB_VERSION"),n(".tar.gz.asc -o "),s("span",{class:"token variable"},"$SOURCE_DIR"),n("/openvas-smb-"),s("span",{class:"token variable"},"$OPENVAS_SMB_VERSION"),n(".tar.gz.asc "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
gpg --verify `),s("span",{class:"token variable"},"$SOURCE_DIR"),n("/openvas-smb-"),s("span",{class:"token variable"},"$OPENVAS_SMB_VERSION"),n(".tar.gz.asc "),s("span",{class:"token variable"},"$SOURCE_DIR"),n("/openvas-smb-"),s("span",{class:"token variable"},"$OPENVAS_SMB_VERSION"),n(`.tar.gz
`)])])],-1),rn=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,`server@rocky:~$
`)])],-1),pn=c(`<p>Verify the SMB module download and make sure the signature from Greenbone Community Feed is trusted.</p><div class="language-bash ext-sh"><pre class="language-bash"><code>gpg: Signature made Fri <span class="token number">25</span> Jun <span class="token number">2021</span> 06:36:43 AM UTC
gpg:                using RSA key 8AE4BE429B60A59B311C2E739823FAA60ED1E580
gpg: Good signature from <span class="token string">&quot;Greenbone Community Feed integrity key&quot;</span> <span class="token punctuation">[</span>ultimate<span class="token punctuation">]</span>
</code></pre><div class="highlight-lines"><br><br><div class="highlight-line">\xA0</div></div></div><p>Next extract files and proceed with the installation.</p>`,3),un=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,[n("server@ubuntu:~$ "),s("span",{class:"token function"},"tar"),n(" -C "),s("span",{class:"token variable"},"$SOURCE_DIR"),n(" -xvzf "),s("span",{class:"token variable"},"$SOURCE_DIR"),n("/openvas-smb-"),s("span",{class:"token variable"},"$OPENVAS_SMB_VERSION"),n(".tar.gz "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
`),s("span",{class:"token function"},"mkdir"),n(" -p "),s("span",{class:"token variable"},"$BUILD_DIR"),n("/openvas-smb "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token builtin class-name"},"cd"),n(),s("span",{class:"token variable"},"$BUILD_DIR"),n("/openvas-smb "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
cmake `),s("span",{class:"token variable"},"$SOURCE_DIR"),n("/openvas-smb-"),s("span",{class:"token variable"},"$OPENVAS_SMB_VERSION"),n(),s("span",{class:"token punctuation"},"\\"),n(`
  -DCMAKE_INSTALL_PREFIX`),s("span",{class:"token operator"},"="),s("span",{class:"token variable"},"$INSTALL_PREFIX"),n(),s("span",{class:"token punctuation"},"\\"),n(`
  -DCMAKE_BUILD_TYPE`),s("span",{class:"token operator"},"="),n("Release "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
`),s("span",{class:"token function"},"make"),n(),s("span",{class:"token assign-left variable"},"DESTDIR"),s("span",{class:"token operator"},"="),s("span",{class:"token variable"},"$INSTALL_DIR"),n(),s("span",{class:"token function"},"install"),n(),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
`),s("span",{class:"token function"},"sudo"),n(),s("span",{class:"token function"},"cp"),n(" -rv "),s("span",{class:"token variable"},"$INSTALL_DIR"),n("/* / "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
`),s("span",{class:"token function"},"rm"),n(" -rf "),s("span",{class:"token variable"},"$INSTALL_DIR"),n(`/*
`)])])],-1),dn=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,`server@rocky:~$
`)])],-1),hn=s("h3",{id:"build-the-openvas-scanner",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#build-the-openvas-scanner","aria-hidden":"true"},"#"),n(" Build the OpenVAS Scanner")],-1),gn=n("Download and build the "),bn={href:"https://github.com/greenbone/openvas",target:"_blank",rel:"noopener noreferrer"},kn=n("openvas-scanner (OpenVAS)"),_n=n(" version 21.04 (current 21.4.3)."),vn=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,[n("server@ubuntu:~$ "),s("span",{class:"token builtin class-name"},"export"),n(),s("span",{class:"token assign-left variable"},"OPENVAS_SCANNER_VERSION"),s("span",{class:"token operator"},"="),s("span",{class:"token number"},"21.4"),n(".3 "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
`),s("span",{class:"token function"},"curl"),n(" -f -L https://github.com/greenbone/openvas-scanner/archive/refs/tags/v"),s("span",{class:"token variable"},"$OPENVAS_SCANNER_VERSION"),n(".tar.gz -o "),s("span",{class:"token variable"},"$SOURCE_DIR"),n("/openvas-scanner-"),s("span",{class:"token variable"},"$OPENVAS_SCANNER_VERSION"),n(".tar.gz "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
`),s("span",{class:"token function"},"curl"),n(" -f -L https://github.com/greenbone/openvas-scanner/releases/download/v"),s("span",{class:"token variable"},"$OPENVAS_SCANNER_VERSION"),n("/openvas-scanner-"),s("span",{class:"token variable"},"$OPENVAS_SCANNER_VERSION"),n(".tar.gz.asc -o "),s("span",{class:"token variable"},"$SOURCE_DIR"),n("/openvas-scanner-"),s("span",{class:"token variable"},"$OPENVAS_SCANNER_VERSION"),n(".tar.gz.asc "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
gpg --verify `),s("span",{class:"token variable"},"$SOURCE_DIR"),n("/openvas-scanner-"),s("span",{class:"token variable"},"$OPENVAS_SCANNER_VERSION"),n(".tar.gz.asc "),s("span",{class:"token variable"},"$SOURCE_DIR"),n("/openvas-scanner-"),s("span",{class:"token variable"},"$OPENVAS_SCANNER_VERSION"),n(`.tar.gz
`)])])],-1),mn=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,`server@rocky:~$
`)])],-1),fn=c(`<p>Verify the signature output.</p><div class="language-bash ext-sh"><pre class="language-bash"><code>gpg: Signature made Tue 03 Aug <span class="token number">2021</span> <span class="token number">12</span>:59:52 PM UTC
gpg:                using RSA key 8AE4BE429B60A59B311C2E739823FAA60ED1E580
gpg: Good signature from <span class="token string">&quot;Greenbone Community Feed integrity key&quot;</span> <span class="token punctuation">[</span>ultimate<span class="token punctuation">]</span>
</code></pre><div class="highlight-lines"><br><br><div class="highlight-line">\xA0</div></div></div>`,2),yn=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,[n("server@ubuntu:~$ "),s("span",{class:"token function"},"tar"),n(" -C "),s("span",{class:"token variable"},"$SOURCE_DIR"),n(" -xvzf "),s("span",{class:"token variable"},"$SOURCE_DIR"),n("/openvas-scanner-"),s("span",{class:"token variable"},"$OPENVAS_SCANNER_VERSION"),n(".tar.gz "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
`),s("span",{class:"token function"},"mkdir"),n(" -p "),s("span",{class:"token variable"},"$BUILD_DIR"),n("/openvas-scanner "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token builtin class-name"},"cd"),n(),s("span",{class:"token variable"},"$BUILD_DIR"),n("/openvas-scanner "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
cmake `),s("span",{class:"token variable"},"$SOURCE_DIR"),n("/openvas-scanner-"),s("span",{class:"token variable"},"$OPENVAS_SCANNER_VERSION"),n(),s("span",{class:"token punctuation"},"\\"),n(`
  -DCMAKE_INSTALL_PREFIX`),s("span",{class:"token operator"},"="),s("span",{class:"token variable"},"$INSTALL_PREFIX"),n(),s("span",{class:"token punctuation"},"\\"),n(`
  -DCMAKE_BUILD_TYPE`),s("span",{class:"token operator"},"="),n("Release "),s("span",{class:"token punctuation"},"\\"),n(`
  -DSYSCONFDIR`),s("span",{class:"token operator"},"="),n("/etc "),s("span",{class:"token punctuation"},"\\"),n(`
  -DLOCALSTATEDIR`),s("span",{class:"token operator"},"="),n("/var "),s("span",{class:"token punctuation"},"\\"),n(`
  -DOPENVAS_FEED_LOCK_PATH`),s("span",{class:"token operator"},"="),n("/var/lib/openvas/feed-update.lock "),s("span",{class:"token punctuation"},"\\"),n(`
  -DOPENVAS_RUN_DIR`),s("span",{class:"token operator"},"="),n("/run/ospd "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
`),s("span",{class:"token function"},"make"),n(),s("span",{class:"token assign-left variable"},"DESTDIR"),s("span",{class:"token operator"},"="),s("span",{class:"token variable"},"$INSTALL_DIR"),n(),s("span",{class:"token function"},"install"),n(),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
`),s("span",{class:"token function"},"sudo"),n(),s("span",{class:"token function"},"cp"),n(" -rv "),s("span",{class:"token variable"},"$INSTALL_DIR"),n("/* / "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
`),s("span",{class:"token function"},"rm"),n(" -rf "),s("span",{class:"token variable"},"$INSTALL_DIR"),n(`/*
`)])])],-1),Sn=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,`server@rocky:~$
`)])],-1),Rn=s("h3",{id:"build-ospd-and-ospd-openvas",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#build-ospd-and-ospd-openvas","aria-hidden":"true"},"#"),n(" Build ospd and ospd-openvas")],-1),In=n("Proceed to download "),En={href:"https://github.com/greenbone/ospd",target:"_blank",rel:"noopener noreferrer"},xn=n("ospd"),$n=n(" and "),Dn={href:"https://github.com/greenbone/ospd-openvas",target:"_blank",rel:"noopener noreferrer"},An=n("ospd-openvas"),On=n("."),wn=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,[n("server@ubuntu:~$ "),s("span",{class:"token builtin class-name"},"export"),n(),s("span",{class:"token assign-left variable"},"OSPD_VERSION"),s("span",{class:"token operator"},"="),s("span",{class:"token number"},"21.4"),n(".4 "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token builtin class-name"},"export"),n(),s("span",{class:"token assign-left variable"},"OSPD_OPENVAS_VERSION"),s("span",{class:"token operator"},"="),s("span",{class:"token number"},"21.4"),n(".3 "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
`),s("span",{class:"token function"},"curl"),n(" -f -L https://github.com/greenbone/ospd/archive/refs/tags/v"),s("span",{class:"token variable"},"$OSPD_VERSION"),n(".tar.gz -o "),s("span",{class:"token variable"},"$SOURCE_DIR"),n("/ospd-"),s("span",{class:"token variable"},"$OSPD_VERSION"),n(".tar.gz "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
`),s("span",{class:"token function"},"curl"),n(" -f -L https://github.com/greenbone/ospd/releases/download/v"),s("span",{class:"token variable"},"$OSPD_VERSION"),n("/ospd-"),s("span",{class:"token variable"},"$OSPD_VERSION"),n(".tar.gz.asc -o "),s("span",{class:"token variable"},"$SOURCE_DIR"),n("/ospd-"),s("span",{class:"token variable"},"$OSPD_VERSION"),n(".tar.gz.asc "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
`),s("span",{class:"token function"},"curl"),n(" -f -L https://github.com/greenbone/ospd-openvas/archive/refs/tags/v"),s("span",{class:"token variable"},"$OSPD_OPENVAS_VERSION"),n(".tar.gz -o "),s("span",{class:"token variable"},"$SOURCE_DIR"),n("/ospd-openvas-"),s("span",{class:"token variable"},"$OSPD_OPENVAS_VERSION"),n(".tar.gz "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
`),s("span",{class:"token function"},"curl"),n(" -f -L https://github.com/greenbone/ospd-openvas/releases/download/v"),s("span",{class:"token variable"},"$OSPD_OPENVAS_VERSION"),n("/ospd-openvas-"),s("span",{class:"token variable"},"$OSPD_OPENVAS_VERSION"),n(".tar.gz.asc -o "),s("span",{class:"token variable"},"$SOURCE_DIR"),n("/ospd-openvas-"),s("span",{class:"token variable"},"$OSPD_OPENVAS_VERSION"),n(".tar.gz.asc "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
gpg --verify `),s("span",{class:"token variable"},"$SOURCE_DIR"),n("/ospd-"),s("span",{class:"token variable"},"$OSPD_VERSION"),n(".tar.gz.asc "),s("span",{class:"token variable"},"$SOURCE_DIR"),n("/ospd-"),s("span",{class:"token variable"},"$OSPD_VERSION"),n(".tar.gz "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
gpg --verify `),s("span",{class:"token variable"},"$SOURCE_DIR"),n("/ospd-openvas-"),s("span",{class:"token variable"},"$OSPD_OPENVAS_VERSION"),n(".tar.gz.asc "),s("span",{class:"token variable"},"$SOURCE_DIR"),n("/ospd-openvas-"),s("span",{class:"token variable"},"$OSPD_OPENVAS_VERSION"),n(`.tar.gz
`)])])],-1),Vn=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,`server@rocky:~$
`)])],-1),Nn=c(`<p>Verify signature for both files.</p><div class="language-bash ext-sh"><pre class="language-bash"><code>gpg: Signature made Wed 04 Aug <span class="token number">2021</span> 07:13:45 AM UTC
gpg:                using RSA key 8AE4BE429B60A59B311C2E739823FAA60ED1E580
gpg: Good signature from <span class="token string">&quot;Greenbone Community Feed integrity key&quot;</span> <span class="token punctuation">[</span>ultimate<span class="token punctuation">]</span>
gpg: Signature made Wed 04 Aug <span class="token number">2021</span> <span class="token number">12</span>:23:19 PM UTC
gpg:                using RSA key 8AE4BE429B60A59B311C2E739823FAA60ED1E580
gpg: Good signature from <span class="token string">&quot;Greenbone Community Feed integrity key&quot;</span> <span class="token punctuation">[</span>ultimate<span class="token punctuation">]</span>
</code></pre><div class="highlight-lines"><br><br><div class="highlight-line">\xA0</div><br><br><div class="highlight-line">\xA0</div></div></div><p>Extract files and start the installation.</p>`,3),Gn=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,[n("server@ubuntu:~$ "),s("span",{class:"token function"},"tar"),n(" -C "),s("span",{class:"token variable"},"$SOURCE_DIR"),n(" -xvzf "),s("span",{class:"token variable"},"$SOURCE_DIR"),n("/ospd-"),s("span",{class:"token variable"},"$OSPD_VERSION"),n(".tar.gz "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
`),s("span",{class:"token function"},"tar"),n(" -C "),s("span",{class:"token variable"},"$SOURCE_DIR"),n(" -xvzf "),s("span",{class:"token variable"},"$SOURCE_DIR"),n("/ospd-openvas-"),s("span",{class:"token variable"},"$OSPD_OPENVAS_VERSION"),n(".tar.gz "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
`),s("span",{class:"token builtin class-name"},"cd"),n(),s("span",{class:"token variable"},"$SOURCE_DIR"),n("/ospd-"),s("span",{class:"token variable"},"$OSPD_VERSION"),n(),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
python3 -m pip `),s("span",{class:"token function"},"install"),n(),s("span",{class:"token builtin class-name"},"."),n(" --prefix"),s("span",{class:"token operator"},"="),s("span",{class:"token variable"},"$INSTALL_PREFIX"),n(" --root"),s("span",{class:"token operator"},"="),s("span",{class:"token variable"},"$INSTALL_DIR"),n(`
`)])])],-1),Ln=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,`server@rocky:~$
`)])],-1),Un=s("p",null,[n("Before you're done, upgrade "),s("code",null,"python3-psutil"),n(" to version 5.5.1 then proceed to finalize the installation of ospd-openvas and install "),s("code",null,"gvm-tools"),n(".")],-1),Cn=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,[n("server@ubuntu:~$ pip "),s("span",{class:"token function"},"install"),n(" --upgrade "),s("span",{class:"token assign-left variable"},"psutil"),s("span",{class:"token operator"},"=="),s("span",{class:"token number"},"5.5"),n(".1 "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
`),s("span",{class:"token builtin class-name"},"cd"),n(),s("span",{class:"token variable"},"$SOURCE_DIR"),n("/ospd-openvas-"),s("span",{class:"token variable"},"$OSPD_OPENVAS_VERSION"),n(),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
python3 -m pip `),s("span",{class:"token function"},"install"),n(),s("span",{class:"token builtin class-name"},"."),n(" --prefix"),s("span",{class:"token operator"},"="),s("span",{class:"token variable"},"$INSTALL_PREFIX"),n(" --root"),s("span",{class:"token operator"},"="),s("span",{class:"token variable"},"$INSTALL_DIR"),n(" --no-warn-script-location "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
python3 -m pip `),s("span",{class:"token function"},"install"),n(" --user gvm-tools "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
`),s("span",{class:"token function"},"sudo"),n(),s("span",{class:"token function"},"cp"),n(" -rv "),s("span",{class:"token variable"},"$INSTALL_DIR"),n("/* / "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
`),s("span",{class:"token function"},"rm"),n(" -rf "),s("span",{class:"token variable"},"$INSTALL_DIR"),n(`/*
`)])])],-1),Mn=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,`server@rocky:~$
`)])],-1),Tn=s("h3",{id:"configure-redis",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#configure-redis","aria-hidden":"true"},"#"),n(" Configure Redis")],-1),Pn=s("p",null,"Next configure redis for the default GVM installation.",-1),Bn=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,[n("server@ubuntu:~$ "),s("span",{class:"token function"},"sudo"),n(),s("span",{class:"token function"},"cp"),n(),s("span",{class:"token variable"},"$SOURCE_DIR"),n("/openvas-scanner-21.4.3/config/redis-openvas.conf /etc/redis/ "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
`),s("span",{class:"token function"},"sudo"),n(),s("span",{class:"token function"},"chown"),n(" redis:redis /etc/redis/redis-openvas.conf "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
`),s("span",{class:"token builtin class-name"},"echo"),n(),s("span",{class:"token string"},'"db_address = /run/redis-openvas/redis.sock"'),n(),s("span",{class:"token operator"},"|"),n(),s("span",{class:"token function"},"sudo"),n(),s("span",{class:"token function"},"tee"),n(` -a /etc/openvas/openvas.conf
`)])])],-1),Fn=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,`server@rocky:~$
`)])],-1),zn=s("p",null,"Start the redis server and enable it as a start up service.",-1),qn=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,[n("server@ubuntu:~$ "),s("span",{class:"token function"},"sudo"),n(" systemctl start redis-server@openvas.service "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
`),s("span",{class:"token function"},"sudo"),n(" systemctl "),s("span",{class:"token builtin class-name"},"enable"),n(` redis-server@openvas.service
`)])])],-1),Wn=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,`server@rocky:~$
`)])],-1),Yn=s("p",null,"Add redis to the GVM group and set up correct permissions.",-1),Kn=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,[n("server@ubuntu:~$ "),s("span",{class:"token function"},"sudo"),n(),s("span",{class:"token function"},"usermod"),n(" -aG redis gvm "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
`),s("span",{class:"token function"},"sudo"),n(),s("span",{class:"token function"},"chown"),n(" -R gvm:gvm /var/lib/gvm "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
`),s("span",{class:"token function"},"sudo"),n(),s("span",{class:"token function"},"chown"),n(" -R gvm:gvm /var/lib/openvas "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
`),s("span",{class:"token function"},"sudo"),n(),s("span",{class:"token function"},"chown"),n(" -R gvm:gvm /var/log/gvm "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
`),s("span",{class:"token function"},"sudo"),n(),s("span",{class:"token function"},"chown"),n(" -R gvm:gvm /run/gvm "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
`),s("span",{class:"token function"},"sudo"),n(),s("span",{class:"token function"},"chmod"),n(" -R g+srw /var/lib/gvm "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
`),s("span",{class:"token function"},"sudo"),n(),s("span",{class:"token function"},"chmod"),n(" -R g+srw /var/lib/openvas "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
`),s("span",{class:"token function"},"sudo"),n(),s("span",{class:"token function"},"chmod"),n(" -R g+srw /var/log/gvm "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
`),s("span",{class:"token function"},"sudo"),n(),s("span",{class:"token function"},"chown"),n(" gvm:gvm /usr/local/sbin/gvmd "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
`),s("span",{class:"token function"},"sudo"),n(),s("span",{class:"token function"},"chmod"),n(),s("span",{class:"token number"},"6750"),n(` /usr/local/sbin/gvmd
`)])])],-1),Hn=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,`server@rocky:~$
`)])],-1),Xn=s("p",null,"You also need to adjust the permissions for the feed synchronization.",-1),jn=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,[n("server@ubuntu:~$ "),s("span",{class:"token function"},"sudo"),n(),s("span",{class:"token function"},"chown"),n(" gvm:gvm /usr/local/bin/greenbone-nvt-sync "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
`),s("span",{class:"token function"},"sudo"),n(),s("span",{class:"token function"},"chmod"),n(),s("span",{class:"token number"},"740"),n(" /usr/local/sbin/greenbone-feed-sync "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
`),s("span",{class:"token function"},"sudo"),n(),s("span",{class:"token function"},"chown"),n(" gvm:gvm /usr/local/sbin/greenbone-*-sync "),s("span",{class:"token operator"},"&&"),n(),s("span",{class:"token punctuation"},"\\"),n(`
`),s("span",{class:"token function"},"sudo"),n(),s("span",{class:"token function"},"chmod"),n(),s("span",{class:"token number"},"740"),n(` /usr/local/sbin/greenbone-*-sync
`)])])],-1),Qn=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,`server@rocky:~$
`)])],-1),Jn=s("p",null,"OpenVAS will be launched from an ospd-openvas process. Update the secure path in the sudoers file accordingly.",-1),Zn=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,[n("server@ubuntu:~$ "),s("span",{class:"token function"},"sudo"),n(` visudo
`)])])],-1),se=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,`server@rocky:~$
`)])],-1),ne=c(`<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># Allow members of group sudo to execute any command</span>
%sudo   <span class="token assign-left variable">ALL</span><span class="token operator">=</span><span class="token punctuation">(</span>ALL:ALL<span class="token punctuation">)</span> ALL

<span class="token comment"># allow users of the gvm group run openvas</span>
%gvm ALL <span class="token operator">=</span> NOPASSWD: /usr/local/sbin/openvas
</code></pre><div class="highlight-lines"><br><br><br><br><div class="highlight-line">\xA0</div></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="configure-postgresql-database" tabindex="-1"><a class="header-anchor" href="#configure-postgresql-database" aria-hidden="true">#</a> Configure PostgreSQL database</h3>`,2),ee=n("For additional information see reference greenbone/gvmd "),ae={href:"https://github.com/greenbone/gvmd/blob/master/INSTALL.md",target:"_blank",rel:"noopener noreferrer"},te=n("INSTALL.md"),oe=n(". First make sure that the required dependencies have been installed (see "),le=s("a",{href:"#prerequisites"},"Prerequisites",-1),ce=n("). Before we can add the PostgreSQL user make sure that the service is up and running."),re=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,[s("span",{class:"token function"},"sudo"),n(` systemctl start postgresql@12-main.service
`)])])],-1),ie=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,`server@rocky:~$
`)])],-1),pe=s("p",null,"Proceed to create a Postgres user and database.",-1),ue=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,[n("server@ubuntu:~$ "),s("span",{class:"token function"},"sudo"),n(" -u postgres "),s("span",{class:"token function"},"bash"),n(`
postgres@ubuntu:~$ createuser -DRS gvm `),s("span",{class:"token operator"},"&&"),n(` createdb -O gvm gvmd
postgres@ubuntu:~$ psql gvmd
`)])])],-1),de=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,`server@rocky:~$
`)])],-1),he=c(`<p>Setup correct permissions and create database extensions.</p><div class="language-plsql ext-plsql"><pre class="language-plsql"><code>gvmd<span class="token operator">=</span># <span class="token keyword">create</span> role dba <span class="token keyword">with</span> superuser noinherit<span class="token punctuation">;</span>
gvmd<span class="token operator">=</span># <span class="token keyword">grant</span> dba <span class="token keyword">to</span> gvm<span class="token punctuation">;</span>
gvmd<span class="token operator">=</span># <span class="token keyword">create</span> extension <span class="token string">&quot;uuid-ossp&quot;</span><span class="token punctuation">;</span>
gvmd<span class="token operator">=</span># <span class="token keyword">create</span> extension <span class="token string">&quot;pgcrypto&quot;</span><span class="token punctuation">;</span>
gvmd<span class="token operator">=</span># <span class="token keyword">exit</span>
</code></pre></div><h3 id="create-gvm-admin" tabindex="-1"><a class="header-anchor" href="#create-gvm-admin" aria-hidden="true">#</a> Create GVM admin</h3><p>Create the GVM administration user. Do not forget to change the password later.</p><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>Do not use special characters in the password.</p></div><p>Before you create the administrator, make sure you did exit the postgres session and reloaded the dynamic loader cache.</p>`,6),ge=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,[n("postgres@ubuntu:~$ "),s("span",{class:"token builtin class-name"},"exit"),n(`
server@ubuntu:~$ `),s("span",{class:"token function"},"sudo"),n(` ldconfig
`)])])],-1),be=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,`server@rocky:~$
`)])],-1),ke=s("p",null,"Once you've reloaded the dynamic loader cache proceed with the user creation.",-1),_e=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,[n("server@ubuntu:~$ "),s("span",{class:"token function"},"sudo"),n(" /usr/local/sbin/gvmd --create-user"),s("span",{class:"token operator"},"="),n("admin --password"),s("span",{class:"token operator"},"="),n(`admin
User created.
`)])])],-1),ve=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,`server@rocky:~$
`)])],-1),me=s("p",null,"Next lets retrieve the administrators uuid.",-1),fe=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,[n("server@ubuntu:~$ "),s("span",{class:"token function"},"sudo"),n(` gvmd --get-users --verbose
admin 0279ba6c-391a-472f-8cbd-1f6eb808823b
`)])]),s("div",{class:"highlight-lines"},[s("br"),s("div",{class:"highlight-line"},"\xA0")])],-1),ye=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,`server@rocky:~$
`)])],-1),Se=s("p",null,"Use the administration uuid and modify the gvmd settings. Remember to put your uuid as the value option.",-1),Re=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,[n("server@ubuntu:~$ "),s("span",{class:"token function"},"sudo"),n(` gvmd --modify-setting 78eceaec-3385-11ea-b237-28d24461215b --value UUID_HERE
`)])])],-1),Ie=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,`server@rocky:~$
`)])],-1),Ee=s("h3",{id:"update-network-vulnerability-tests",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#update-network-vulnerability-tests","aria-hidden":"true"},"#"),n(" Update Network Vulnerability Tests")],-1),xe=s("p",null,"Update Network Vulnerability Tests (NVT) from Greenbone Community Feed.",-1),$e=s("div",{class:"custom-container warning"},[s("p",{class:"custom-container-title"},"WARNING"),s("p",null,"This may take a while.")],-1),De=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,[n("server@ubuntu:~$ "),s("span",{class:"token function"},"sudo"),n(` -u gvm greenbone-nvt-sync
`)])])],-1),Ae=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,`server@rocky:~$
`)])],-1),Oe=s("h3",{id:"update-greenbone-feed-synchronisation",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#update-greenbone-feed-synchronisation","aria-hidden":"true"},"#"),n(" Update Greenbone Feed synchronisation")],-1),we=s("p",null,"Update the Greenbone feed synchronisation one at the time.",-1),Ve=s("div",{class:"custom-container warning"},[s("p",{class:"custom-container-title"},"WARNING"),s("p",null,"Only one sync per time, otherwise the source ip will be temporarily blocked.")],-1),Ne=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,[n("server@ubuntu:~$ "),s("span",{class:"token function"},"sudo"),n(` -u gvm greenbone-feed-sync --type GVMD_DATA
server@ubuntu:~$ `),s("span",{class:"token function"},"sudo"),n(` -u gvm greenbone-feed-sync --type SCAP
server@ubuntu:~$ `),s("span",{class:"token function"},"sudo"),n(` -u gvm greenbone-feed-sync --type CERT
`)])])],-1),Ge=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,`server@rocky:~$
`)])],-1),Le=s("p",null,[n("To keep the Greenbone feed up-to-date you may create a "),s("a",{href:"#scheduled-jobs"},"scheduled job"),n(" using crontab.")],-1),Ue=s("h3",{id:"generate-gvm-certificates",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#generate-gvm-certificates","aria-hidden":"true"},"#"),n(" Generate GVM certificates")],-1),Ce=s("p",null,"Once you've finished the feed synchronisation, generate GVM certificates.",-1),Me=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,[n("server@ubuntu:~$ "),s("span",{class:"token function"},"sudo"),n(` -u gvm gvm-manage-certs -a
`)])])],-1),Te=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,`server@rocky:~$
`)])],-1),Pe=s("h3",{id:"set-up-systemd",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#set-up-systemd","aria-hidden":"true"},"#"),n(" Set up systemd")],-1),Be=s("p",null,"Next setup the startup scripts. First configure the Greenbone Manager startup script.",-1),Fe=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,[s("span",{class:"token function"},"cat"),n(),s("span",{class:"token operator"},"<<"),n(),s("span",{class:"token string"},[n("EOF"),s("span",{class:"token bash punctuation"},[n(),s("span",{class:"token operator"},">"),n(),s("span",{class:"token variable"},"$BUILD_DIR"),n("/gvmd.service")]),n(`
[Unit]
Description=Greenbone Vulnerability Manager daemon (gvmd)
After=network.target networking.service postgresql.service ospd-openvas.service
Wants=postgresql.service ospd-openvas.service
Documentation=man:gvmd(8)
ConditionKernelCommandLine=!recovery

[Service]
Type=forking
User=gvm
Group=gvm
PIDFile=/run/gvm/gvmd.pid
RuntimeDirectory=gvm
RuntimeDirectoryMode=2775
ExecStart=/usr/local/sbin/gvmd --osp-vt-update=/run/ospd/ospd-openvas.sock --listen-group=gvm
Restart=always
TimeoutStopSec=10

[Install]
WantedBy=multi-user.target
EOF`)]),n(`
`)])])],-1),ze=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,`server@rocky:~$
`)])],-1),qe=s("p",null,"Copy the startup script from the build folder to your system manager directory.",-1),We=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,[n("server@ubuntu:~$ "),s("span",{class:"token function"},"sudo"),n(),s("span",{class:"token function"},"cp"),n(),s("span",{class:"token variable"},"$BUILD_DIR"),n(`/gvmd.service /etc/systemd/system/
`)])])],-1),Ye=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,`server@rocky:~$
`)])],-1),Ke=s("p",null,"Once the first startup script is saved proceed to create the script for the Greenbone Security Assistant (GSA). Remember to define your IP address for GSA.",-1),He=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,[s("span",{class:"token function"},"cat"),n(),s("span",{class:"token operator"},"<<"),n(),s("span",{class:"token string"},[n("EOF"),s("span",{class:"token bash punctuation"},[n(),s("span",{class:"token operator"},">"),n(),s("span",{class:"token variable"},"$BUILD_DIR"),n("/gsad.service")]),n(`
[Unit]
Description=Greenbone Security Assistant daemon (gsad)
Documentation=man:gsad(8) https://www.greenbone.net
After=network.target gvmd.service
Wants=gvmd.service

[Service]
Type=forking
User=gvm
Group=gvm
PIDFile=/run/gvm/gsad.pid
ExecStart=/usr/local/sbin/gsad --listen=192.168.0.1 --port=9392
Restart=always
TimeoutStopSec=10

[Install]
WantedBy=multi-user.target
Alias=greenbone-security-assistant.service
EOF`)]),n(`
`)])]),s("div",{class:"highlight-lines"},[s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("div",{class:"highlight-line"},"\xA0"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br")])],-1),Xe=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,`server@rocky:~$
`)])],-1),je=s("p",null,"Copy the startup script to system directory.",-1),Qe=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,[n("server@ubuntu:~$ "),s("span",{class:"token function"},"sudo"),n(),s("span",{class:"token function"},"cp"),n(),s("span",{class:"token variable"},"$BUILD_DIR"),n(`/gsad.service /etc/systemd/system/
`)])])],-1),Je=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,`server@rocky:~$
`)])],-1),Ze=s("p",null,"Create the systemd service script for ospd-openvas.",-1),sa=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,[s("span",{class:"token function"},"cat"),n(),s("span",{class:"token operator"},"<<"),n(),s("span",{class:"token string"},[n("EOF"),s("span",{class:"token bash punctuation"},[n(),s("span",{class:"token operator"},">"),n(),s("span",{class:"token variable"},"$BUILD_DIR"),n("/ospd-openvas.service")]),n(`
[Unit]
Description=OSPd Wrapper for the OpenVAS Scanner (ospd-openvas)
Documentation=man:ospd-openvas(8) man:openvas(8)
After=network.target networking.service redis-server@openvas.service
Wants=redis-server@openvas.service
ConditionKernelCommandLine=!recovery

[Service]
Type=forking
User=gvm
Group=gvm
RuntimeDirectory=ospd
RuntimeDirectoryMode=2775
PIDFile=/run/ospd/ospd-openvas.pid
ExecStart=/usr/local/bin/ospd-openvas --unix-socket /run/ospd/ospd-openvas.sock --pid-file /run/ospd/ospd-openvas.pid --log-file /var/log/gvm/ospd-openvas.log --lock-file-dir /var/lib/openvas --socket-mode 0o770
SuccessExitStatus=SIGKILL
Restart=always
RestartSec=60

[Install]
WantedBy=multi-user.target
EOF`)]),n(`
`)])])],-1),na=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,`server@rocky:~$
`)])],-1),ea=s("p",null,"Finally copy the last startup script to your system manager directory.",-1),aa=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,[n("server@ubuntu:~$ "),s("span",{class:"token function"},"sudo"),n(),s("span",{class:"token function"},"cp"),n(),s("span",{class:"token variable"},"$BUILD_DIR"),n(`/ospd-openvas.service /etc/systemd/system/
`)])])],-1),ta=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,`server@rocky:~$
`)])],-1),oa=s("h3",{id:"enable-and-start-services",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#enable-and-start-services","aria-hidden":"true"},"#"),n(" Enable and start services")],-1),la=s("p",null,"To enable the created startup scripts, reload the system control daemon.",-1),ca=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,[n("server@ubuntu:~$ "),s("span",{class:"token function"},"sudo"),n(` systemctl daemon-reload
`)])])],-1),ra=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,`server@rocky:~$
`)])],-1),ia=s("p",null,"Once you've reloaded the daemon proceed to enable each of the services.",-1),pa=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,[n("server@ubuntu:~$ "),s("span",{class:"token function"},"sudo"),n(" systemctl "),s("span",{class:"token builtin class-name"},"enable"),n(` ospd-openvas
server@ubuntu:~$ `),s("span",{class:"token function"},"sudo"),n(" systemctl "),s("span",{class:"token builtin class-name"},"enable"),n(` gvmd
server@ubuntu:~$ `),s("span",{class:"token function"},"sudo"),n(" systemctl "),s("span",{class:"token builtin class-name"},"enable"),n(` gsad
`)])])],-1),ua=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,`server@rocky:~$
`)])],-1),da=s("p",null,"Next start each service.",-1),ha=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,[n("server@ubuntu:~$ "),s("span",{class:"token function"},"sudo"),n(` systemctl start ospd-openvas
server@ubuntu:~$ `),s("span",{class:"token function"},"sudo"),n(` systemctl start gvmd
server@ubuntu:~$ `),s("span",{class:"token function"},"sudo"),n(` systemctl start gsad
`)])])],-1),ga=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,`server@rocky:~$
`)])],-1),ba={class:"custom-container danger"},ka=s("p",{class:"custom-container-title"},"DANGER",-1),_a=n("Remember that even though the initial startup of the services are returned immediately, it make take several minutes or even hours for the services to be ready. For more information visit "),va={href:"https://greenbone.github.io/docs/gvm-21.04/index.html#starting-services-with-systemd",target:"_blank",rel:"noopener noreferrer"},ma=n("GVM official docs"),fa=n("."),ya=s("p",null,"You can check the current status of each of the services by running the commands below.",-1),Sa=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,[n("server@ubuntu:~$ "),s("span",{class:"token function"},"sudo"),n(` systemctl status ospd-openvas.service
`)])])],-1),Ra=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,`server@rocky:~$
`)])],-1),Ia=c(`<div class="language-bash ext-sh"><pre class="language-bash"><code>\u25CF ospd-openvas.service - OSPd Wrapper <span class="token keyword">for</span> the OpenVAS Scanner <span class="token punctuation">(</span>ospd-openvas<span class="token punctuation">)</span>
     Loaded: loaded <span class="token punctuation">(</span>/etc/systemd/system/ospd-openvas.service<span class="token punctuation">;</span> enabled<span class="token punctuation">;</span> vendor preset: enabled<span class="token punctuation">)</span>
     Active: active <span class="token punctuation">(</span>running<span class="token punctuation">)</span> since Mon <span class="token number">2021</span>-10-11 <span class="token number">18</span>:22:39 UTC<span class="token punctuation">;</span> 5min ago
       Docs: man:ospd-openvas<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>
             man:openvas<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>
    Process: <span class="token number">37213</span> <span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/usr/local/bin/ospd-openvas --unix-socket /run/ospd/ospd-openvas.sock --pid-file /run/ospd/ospd-openvas.pid --log-file /var/log/gvm/ospd-openvas.log --lock-file-dir /var/lib/openvas -<span class="token operator">&gt;</span>
   Main PID: <span class="token number">37228</span> <span class="token punctuation">(</span>ospd-openvas<span class="token punctuation">)</span>
      Tasks: <span class="token number">6</span> <span class="token punctuation">(</span>limit: <span class="token number">2278</span><span class="token punctuation">)</span>
     Memory: <span class="token number">16</span>.5M
     CGroup: /system.slice/ospd-openvas.service
             \u251C\u250037228 /usr/bin/python3 /usr/local/bin/ospd-openvas --unix-socket /run/ospd/ospd-openvas.sock --pid-file /run/ospd/ospd-openvas.pid --log-file /var/log/gvm/ospd-openvas.log --lock-file-dir /var/lib/<span class="token operator">&gt;</span>
             \u251C\u250037230 /usr/bin/python3 /usr/local/bin/ospd-openvas --unix-socket /run/ospd/ospd-openvas.sock --pid-file /run/ospd/ospd-openvas.pid --log-file /var/log/gvm/ospd-openvas.log --lock-file-dir /var/lib/<span class="token operator">&gt;</span>
             \u251C\u250037297 openvas --update-vt-info
             \u2514\u250037300 openvas: Reloaded <span class="token number">43550</span> of <span class="token number">77138</span> NVTs <span class="token punctuation">(</span><span class="token number">56</span>% / ETA: 04:25<span class="token punctuation">)</span>

Oct <span class="token number">11</span> <span class="token number">18</span>:22:37 server@libellux systemd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>: Starting OSPd Wrapper <span class="token keyword">for</span> the OpenVAS Scanner <span class="token punctuation">(</span>ospd-openvas<span class="token punctuation">)</span><span class="token punctuation">..</span>.
Oct <span class="token number">11</span> <span class="token number">18</span>:22:39 server@libellux systemd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>: Started OSPd Wrapper <span class="token keyword">for</span> the OpenVAS Scanner <span class="token punctuation">(</span>ospd-openvas<span class="token punctuation">)</span>.
</code></pre><div class="highlight-lines"><br><br><div class="highlight-line">\xA0</div><br><br><br><br><br><br><br><br><br><br><br><br><br><br></div></div>`,1),Ea=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,[n("server@ubuntu:~$ "),s("span",{class:"token function"},"sudo"),n(` systemctl status gvmd.service
`)])])],-1),xa=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,`server@rocky:~$
`)])],-1),$a=c(`<p>Synchronizing the SCAP database is usually what takes a lot of time so please be patient and do not restart your server.</p><div class="language-bash ext-sh"><pre class="language-bash"><code>\u25CF gvmd.service - Greenbone Vulnerability Manager daemon <span class="token punctuation">(</span>gvmd<span class="token punctuation">)</span>
     Loaded: loaded <span class="token punctuation">(</span>/etc/systemd/system/gvmd.service<span class="token punctuation">;</span> enabled<span class="token punctuation">;</span> vendor preset: enabled<span class="token punctuation">)</span>
     Active: active <span class="token punctuation">(</span>running<span class="token punctuation">)</span> since Mon <span class="token number">2021</span>-10-11 <span class="token number">18</span>:22:46 UTC<span class="token punctuation">;</span> 8min ago
       Docs: man:gvmd<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>
    Process: <span class="token number">37240</span> <span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/usr/local/sbin/gvmd --osp-vt-update<span class="token operator">=</span>/run/ospd/ospd-openvas.sock --listen-group<span class="token operator">=</span>gvm <span class="token punctuation">(</span>code<span class="token operator">=</span>exited, <span class="token assign-left variable">status</span><span class="token operator">=</span><span class="token number">0</span>/SUCCESS<span class="token punctuation">)</span>
   Main PID: <span class="token number">37251</span> <span class="token punctuation">(</span>gvmd<span class="token punctuation">)</span>
      Tasks: <span class="token number">3</span> <span class="token punctuation">(</span>limit: <span class="token number">2278</span><span class="token punctuation">)</span>
     Memory: <span class="token number">1</span>.6G
     CGroup: /system.slice/gvmd.service
             \u251C\u250037251 gvmd: Waiting <span class="token keyword">for</span> incoming connections
             \u251C\u250037272 gpg-agent --homedir /var/lib/gvm/gvmd/gnupg --use-standard-socket --daemon
             \u2514\u250037622 gvmd: Syncing SCAP: Updating CPEs

Oct <span class="token number">11</span> <span class="token number">18</span>:22:43 server@libellux systemd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>: Starting Greenbone Vulnerability Manager daemon <span class="token punctuation">(</span>gvmd<span class="token punctuation">)</span><span class="token punctuation">..</span>.
</code></pre><div class="highlight-lines"><br><br><div class="highlight-line">\xA0</div><br><br><br><br><br><br><br><br><div class="highlight-line">\xA0</div><br><br></div></div>`,2),Da=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,[n("server@ubuntu:~$ "),s("span",{class:"token function"},"sudo"),n(` systemctl status gsad.service
`)])])],-1),Aa=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,`server@rocky:~$
`)])],-1),Oa=c(`<div class="language-bash ext-sh"><pre class="language-bash"><code>\u25CF gsad.service - Greenbone Security Assistant daemon <span class="token punctuation">(</span>gsad<span class="token punctuation">)</span>
     Loaded: loaded <span class="token punctuation">(</span>/etc/systemd/system/gsad.service<span class="token punctuation">;</span> enabled<span class="token punctuation">;</span> vendor preset: enabled<span class="token punctuation">)</span>
     Active: active <span class="token punctuation">(</span>running<span class="token punctuation">)</span> since Mon <span class="token number">2021</span>-10-11 <span class="token number">18</span>:50:15 UTC<span class="token punctuation">;</span> 1min 11s ago
       Docs: man:gsad<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>
             https://www.greenbone.net
    Process: <span class="token number">38710</span> <span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/usr/local/sbin/gsad --listen<span class="token operator">=</span><span class="token number">192.168</span>.0.1 --port<span class="token operator">=</span><span class="token number">9392</span> <span class="token punctuation">(</span>code<span class="token operator">=</span>exited, <span class="token assign-left variable">status</span><span class="token operator">=</span><span class="token number">0</span>/SUCCESS<span class="token punctuation">)</span>
   Main PID: <span class="token number">38715</span>
      Tasks: <span class="token number">8</span> <span class="token punctuation">(</span>limit: <span class="token number">2278</span><span class="token punctuation">)</span>
     Memory: <span class="token number">2</span>.1M
     CGroup: /system.slice/gsad.service
             \u2514\u250038714 /usr/local/sbin/gsad --listen<span class="token operator">=</span><span class="token number">192.168</span>.0.1 --port<span class="token operator">=</span><span class="token number">9392</span>

Oct <span class="token number">11</span> <span class="token number">18</span>:50:12 server@libellux systemd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>: Starting Greenbone Security Assistant daemon <span class="token punctuation">(</span>gsad<span class="token punctuation">)</span><span class="token punctuation">..</span>.
Oct <span class="token number">11</span> <span class="token number">18</span>:50:15 server@libellux systemd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>: Started Greenbone Security Assistant daemon <span class="token punctuation">(</span>gsad<span class="token punctuation">)</span>.
</code></pre><div class="highlight-lines"><br><br><div class="highlight-line">\xA0</div><br><br><br><br><br><br><br><br><br><br><br></div></div><p>Login at your localhost e.g. <code>https://192.168.0.1:9392</code> with the username <code>admin</code> and the chosen password.</p>`,2),wa=["src"],Va=s("div",{class:"custom-container warning"},[s("p",{class:"custom-container-title"},"WARNING"),s("p",null,"This may take a while.")],-1),Na=s("p",null,[n("Once logged in, go to the "),s("em",null,"Administration"),n(" tab and select "),s("em",null,"Feed Status"),n(". You'll see that the update is in progress.")],-1),Ga=["src"],La=s("p",null,[n("You may check the "),s("em",null,"gvmd"),n(" logs in real-time to see what updates are being made.")],-1),Ua=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,[n("server@ubuntu:~$ "),s("span",{class:"token function"},"sudo"),n(),s("span",{class:"token function"},"tail"),n(` -f /var/log/gvm/gvmd.log
`)])])],-1),Ca=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,`server@rocky:~$
`)])],-1),Ma=s("p",null,[n("When the status changed to "),s("em",null,"current"),n(" in the "),s("em",null,"Feed status"),n(" go to the dashboard and it will be populated with CVEs by creation time and NVTs by severity class.")],-1),Ta=["src"],Pa=s("p",null,[n("You may also confirm the current version of GSA. Go to the "),s("em",null,"Help"),n(" tab and select "),s("em",null,"About"),n(".")],-1),Ba=["src"],Fa=s("p",null,[n("To run basic vulnerability scans and get a feel for how OpenVAS works, check the "),s("a",{href:"#running-vulnerability-scans"},"Running vulnerability scans"),n(" section.")],-1),za={id:"install-gvm-21-04-atomicorp",tabindex:"-1"},qa=s("a",{class:"header-anchor",href:"#install-gvm-21-04-atomicorp","aria-hidden":"true"},"#",-1),Wa=n(" Install GVM 21.04 Atomicorp "),Ya=n("Atomicorp GVM 21.04 package supports Redhat, Rocky, Centos or Fedora Linux platforms. "),Ka={href:"https://github.com/Atomicorp/gvm",target:"_blank",rel:"noopener noreferrer"},Ha=n("Atomicorp GVM package"),Xa=n("."),ja=s("p",null,"Check if SELinux is enabled.",-1),Qa=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,`server@rocky:~$ sestatus
SELinux status:                 enabled
SELinuxfs mount:                /sys/fs/selinux
SELinux root directory:         /etc/selinux
Loaded policy name:             targeted
Current mode:                   enforcing
Mode from config file:          enforcing
`)]),s("div",{class:"highlight-lines"},[s("br"),s("div",{class:"highlight-line"},"\xA0"),s("br"),s("br"),s("br"),s("br"),s("div",{class:"highlight-line"},"\xA0")])],-1),Ja=s("p",null,"If enabled proceed to disable SELinux by running the command below.",-1),Za=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,[n("server@rocky:~$ "),s("span",{class:"token function"},"sudo"),n(" setenforce "),s("span",{class:"token number"},"0"),n(`
server@rocky:~$ `),s("span",{class:"token function"},"sudo"),n(),s("span",{class:"token function"},"nano"),n(` /etc/selinux/config
`)])]),s("div",{class:"highlight-lines"},[s("div",{class:"highlight-line"},"\xA0"),s("br")])],-1),st=c(`<p>Update the SELinux configuration file and set SELINUX to disabled.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># This file controls the state of SELinux on the system.</span>
<span class="token comment"># SELINUX= can take one of these three values:</span>
<span class="token comment">#     enforcing - SELinux security policy is enforced.</span>
<span class="token comment">#     permissive - SELinux prints warnings instead of enforcing.</span>
<span class="token comment">#     disabled - No SELinux policy is loaded.</span>
<span class="token assign-left variable">SELINUX</span><span class="token operator">=</span>disabled
</code></pre><div class="highlight-lines"><br><br><br><br><br><div class="highlight-line">\xA0</div></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Save and reboot the system.</p>`,3),nt=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,[n("server@rocky:~$ "),s("span",{class:"token function"},"sudo"),n(),s("span",{class:"token function"},"shutdown"),n(` -r now
`)])])],-1),et=s("p",null,"Once the system rebooted, make sure that SELinux has been disabled",-1),at=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,`server@rocky:~$ sestatus
SELinux status:                 disabled
`)])],-1),tt=s("p",null,"Continue and download the Atomicorp installer.",-1),ot=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,[n("server@rocky:~$ "),s("span",{class:"token function"},"wget"),n(" -q -O - https://updates.atomicorp.com/installers/atomic "),s("span",{class:"token operator"},"|"),n(),s("span",{class:"token function"},"sudo"),n(),s("span",{class:"token function"},"sh"),n(`

For supported software packages please contact us at: 

  sales@atomicorp.com

Do you agree to these terms? `),s("span",{class:"token punctuation"},"("),n("yes/no"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"["),n("Default: yes"),s("span",{class:"token punctuation"},"]"),n(),s("span",{class:"token function"},"yes"),n(`
Enable repo by default? `),s("span",{class:"token punctuation"},"("),n("yes/no"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"["),n("Default: yes"),s("span",{class:"token punctuation"},"]"),n(": "),s("span",{class:"token function"},"yes"),n(`
`)])]),s("div",{class:"highlight-lines"},[s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("div",{class:"highlight-line"},"\xA0"),s("div",{class:"highlight-line"},"\xA0")])],-1),lt=s("p",null,"Enable PowerTools and install extra packages.",-1),ct=s("div",{class:"custom-container tip"},[s("p",{class:"custom-container-title"},"TIP"),s("p",null,"Only required for Redhat, Rocky and CentOS.")],-1),rt=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,[n("server@centos:~$ "),s("span",{class:"token function"},"sudo"),n(` yum config-manager --set-enabled PowerTools
server@centos:~$ `),s("span",{class:"token function"},"sudo"),n(" yum "),s("span",{class:"token function"},"install"),n(` epel-release
`)])])],-1),it=s("p",null,"Proceed and install GVM.",-1),pt=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,[n("server@rocky:~$ "),s("span",{class:"token function"},"sudo"),n(" yum "),s("span",{class:"token function"},"install"),n(` gvm
`)])])],-1),ut=s("p",null,"Finally run the GVM configuration script to setup GVM (this might take awhile).",-1),dt=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,[n("server@rocky:~$ "),s("span",{class:"token function"},"sudo"),n(` gvm-setup
`)])])],-1),ht=s("p",null,"Once the GVM setup has been complete, proceed to set the administrator password.",-1),gt=s("div",{class:"custom-container warning"},[s("p",{class:"custom-container-title"},"WARNING"),s("p",null,"Do not use special characters in the password.")],-1),bt=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,[n(`Updating OpenVAS Manager certificates: Complete

GVMD startup: Done

Set the GSAD admin `),s("span",{class:"token function"},"users"),n(` password.
The admin user is used to configure accounts,
Update NVT's manually, and manage roles.

Enter Administrator Password:
Verify Administrator Password:

Setup complete
  Log `),s("span",{class:"token keyword"},"in"),n(` to GSAD at https://localhost
`)])]),s("div",{class:"highlight-lines"},[s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("div",{class:"highlight-line"},"\xA0"),s("div",{class:"highlight-line"},"\xA0"),s("br"),s("br"),s("br")])],-1),kt=s("p",null,[n("Login at your localhost e.g. "),s("code",null,"https://192.168.0.1"),n(" with the username "),s("code",null,"admin"),n(" and the chosen password.")],-1),_t=["src"],vt=c('<h2 id="running-vulnerability-scans" tabindex="-1"><a class="header-anchor" href="#running-vulnerability-scans" aria-hidden="true">#</a> Running vulnerability scans</h2><p>There are several approaches on how to configure and run tasks (scans) toward your targets (hosts) in GVM. In this tutorial we will go through how to run the more basic tasks. We will do both unauthenticated scans, where we do not grant GVM SSH access to our target, and authenticated scans to help identify internal server vulnerabilites or misconfigurations.</p><h3 id="unauthenticated-scan" tabindex="-1"><a class="header-anchor" href="#unauthenticated-scan" aria-hidden="true">#</a> Unauthenticated scan</h3><p>Login to the Greenbone Security Assistant (GSA) e.g. <code>https://192.168.0.1</code>. Once logged in we will add our first target. Go the the <em>Configuration</em> menu in the top navigation and select <em>Targets</em>.</p>',4),mt=["src"],ft=s("p",null,[n("In the top left corner of the "),s("em",null,"Targets"),n(" view there's a starred document icon, click and select to create a "),s("em",null,"New Target"),n(". Fill in the name of the target server e.g. "),s("em",null,"Ubuntu Client"),n(" and its IP address "),s("code",null,"192.168.0.2"),n(". Leave the rest of the settings in default.")],-1),yt=["src"],St=s("p",null,[n("Next we will create a task for unauthenticated targets (scans without SSH access). Go the "),s("em",null,"Scans"),n(" in the top menu and select "),s("em",null,"Tasks"),n(".")],-1),Rt=["src"],It=s("p",null,[n("Click the starred document icon in the top left corner of the "),s("em",null,"Tasks"),n(" view.")],-1),Et=["src"],xt=s("p",null,[n("Select a descriptive name for your task e.g. Unauthenticated scan. In the "),s("em",null,"Scan Targets"),n(" dropdown menu select your target we created before (Ubuntu Client). Leave the default settings and click save.")],-1),$t=["src"],Dt=s("p",null,[n("You will then be redirected back to the "),s("em",null,"Tasks"),n(" overview and our new task will be listed in the table below the graphs. To start the scan press the start button on the right side of the table.")],-1),At=["src"],Ot=s("h3",{id:"authenticated-scan",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#authenticated-scan","aria-hidden":"true"},"#"),n(" Authenticated scan")],-1),wt=s("p",null,[n("First make sure that you've generated SSH keys for your GVM client user e.g. "),s("code",null,"client@ubuntu"),n(". Add your public key to the targets authorized keys file. You may have to connect to your target host, through SSH, before running GVM vulnerability scan to add the target host to your clients machine's known hosts. Once you've established a secure connection between your client and target, proceed to configure credentials in the Greenbone Security Assistant. Go to "),s("em",null,"Configuration"),n(" and select "),s("em",null,"Credentials"),n(".")],-1),Vt=["src"],Nt=s("p",null,[n("Next click the starred document in the top left corner to create your new credentials. Give the credentials a desciptive name with an optional comment. In the dropdown menu "),s("em",null,"Type"),n(", select "),s("em",null,"Username + SSH key"),n(" and disallow insecure use and auto-generation. Add the username of the target host user followed by the password and upload the private key (e.g. id_rsa). Click save.")],-1),Gt=["src"],Lt=s("p",null,[n("Go to the "),s("em",null,"Targets"),n(" section and either edit your "),s("a",{href:"#unauthenticated-scan"},"unauthenticated scan"),n(" or create a new target. Set the host IP address and in the dropdown menu, under the "),s("em",null,"Credentials for authentication checks"),n(", select your newly created SSH credential.")],-1),Ut=["src"],Ct=s("p",null,"Finally create a new task and select the target that we attached our credentials to and leave the default settings.",-1),Mt=["src"],Tt=s("h2",{id:"two-factor-authentication-w-privacyidea",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#two-factor-authentication-w-privacyidea","aria-hidden":"true"},"#"),n(" Two-factor authentication w/ privacyIDEA")],-1),Pt=n("To enforce two-factor authentication for Greenbone Security Assistant with privacyIDEA and YubiKey read the "),Bt=n("Two-factor authentication w/ privacyIDEA and YubiKey"),Ft=n(" chapter."),zt=s("h2",{id:"scheduled-jobs",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#scheduled-jobs","aria-hidden":"true"},"#"),n(" Scheduled jobs")],-1),qt=s("p",null,"To keep the community feed up-to-date create a file and add the Greenbone feed commands to check for daily updates using crontab.",-1),Wt=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,[n("server@ubuntu:~$ "),s("span",{class:"token function"},"sudo"),n(),s("span",{class:"token function"},"touch"),n(` /usr/local/bin/openvas-update
`)])])],-1),Yt=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,`server@rocky:~$
`)])],-1),Kt=s("p",null,"Make sure the file is owned by the gvm user.",-1),Ht=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,[n("server@ubuntu:~$ "),s("span",{class:"token function"},"sudo"),n(),s("span",{class:"token function"},"chown"),n(` gvm:gvm /usr/local/bin/openvas-update
`)])])],-1),Xt=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,`server@rocky:~$
`)])],-1),jt=s("p",null,"Make the file executable.",-1),Qt=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,[n("server@ubuntu:~$ "),s("span",{class:"token function"},"sudo"),n(),s("span",{class:"token function"},"chmod"),n(` a+x /usr/local/bin/openvas-update
`)])])],-1),Jt=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,`server@rocky:~$
`)])],-1),Zt=s("p",null,"Next open the file in your favorite text editor.",-1),so=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,[n("server@ubuntu:~$ "),s("span",{class:"token function"},"sudo"),n(),s("span",{class:"token function"},"nano"),n(` /usr/local/bin/openvas-update
`)])])],-1),no=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,`server@rocky:~$
`)])],-1),eo=s("p",null,"Enter the Greenbone feed commands below to keep the community feed up-to-date.",-1),ao=s("div",{class:"language-bash ext-sh line-numbers-mode"},[s("pre",{class:"language-bash"},[s("code",null,`/usr/local/bin/greenbone-nvt-sync
/usr/local/bin/greenbone-feed-sync --type GVMD_DATA
/usr/local/bin/greenbone-feed-sync --type SCAP
/usr/local/bin/greenbone-feed-sync --type CERT
`)]),s("div",{class:"line-numbers"},[s("span",{class:"line-number"},"1"),s("br"),s("span",{class:"line-number"},"2"),s("br"),s("span",{class:"line-number"},"3"),s("br"),s("span",{class:"line-number"},"4"),s("br")])],-1),to=s("div",{class:"language-bash ext-sh line-numbers-mode"},[s("pre",{class:"language-bash"},[s("code",null,`server@rocky:~$
`)]),s("div",{class:"line-numbers"},[s("span",{class:"line-number"},"1"),s("br")])],-1),oo=s("p",null,"Edit the root crontab and add the file you created to check for daily updates.",-1),lo=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,[n("server@ubuntu:~$ "),s("span",{class:"token function"},"crontab"),n(` -e
`)])])],-1),co=s("div",{class:"language-bash ext-sh"},[s("pre",{class:"language-bash"},[s("code",null,`server@rocky:~$
`)])],-1),ro=c(`<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># Edit this file to introduce tasks to be run by cron.</span>
<span class="token comment">#</span>
<span class="token comment"># Each task to run has to be defined through a single line</span>
<span class="token comment"># indicating with different fields when the task will be run</span>
<span class="token comment"># and what command to run for the task</span>
<span class="token comment">#</span>
<span class="token comment"># To define the time you can provide concrete values for</span>
<span class="token comment"># minute (m), hour (h), day of month (dom), month (mon),</span>
<span class="token comment"># and day of week (dow) or use &#39;*&#39; in these fields (for &#39;any&#39;).</span>
<span class="token comment">#</span>
<span class="token comment"># Notice that tasks will be started based on the cron&#39;s system</span>
<span class="token comment"># daemon&#39;s notion of time and timezones.</span>
<span class="token comment">#</span>
<span class="token comment"># Output of the crontab jobs (including errors) is sent through</span>
<span class="token comment"># email to the user the crontab file belongs to (unless redirected).</span>
<span class="token comment">#</span>
<span class="token comment"># For example, you can run a backup of all your user accounts</span>
<span class="token comment"># at 5 a.m every week with:</span>
<span class="token comment"># 0 5 * * 1 tar -zcf /var/backups/home.tgz /home/</span>
<span class="token comment">#</span>
<span class="token comment"># For more information see the manual pages of crontab(5) and cron(8)</span>
<span class="token comment">#</span>
<span class="token comment"># m h  dom mon dow   command</span>

<span class="token number">0</span> <span class="token number">0</span> * * * gvm /usr/local/bin/openvas-update
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line">\xA0</div></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h2 id="troubleshooting" tabindex="-1"><a class="header-anchor" href="#troubleshooting" aria-hidden="true">#</a> Troubleshooting</h2>`,2),io=n("If you encounter any issue or having questions regarding Greenbone Vulnerability Manager, I recommend using their helpful "),po={href:"https://community.greenbone.net/",target:"_blank",rel:"noopener noreferrer"},uo=n("community forum"),ho=n("."),go={href:"https://github.com/libellux/Libellux-Up-and-Running/issues/new/choose",target:"_blank",rel:"noopener noreferrer"},bo=n("Questions"),ko=n(", "),_o={href:"https://github.com/libellux/Libellux-Up-and-Running/issues/new/choose",target:"_blank",rel:"noopener noreferrer"},vo=n("comments"),mo=n(", or "),fo={href:"https://github.com/libellux/Libellux-Up-and-Running/issues/new/choose",target:"_blank",rel:"noopener noreferrer"},yo=n("problems"),So=n(" regarding this service? Create an issue "),Ro={href:"https://github.com/libellux/Libellux-Up-and-Running/issues/new/choose",target:"_blank",rel:"noopener noreferrer"},Io=n("here"),Eo=n(" or contact "),xo=s("a",{href:"mailto:webmaster@libellux.com"},"webmaster@libellux.com",-1),$o=n("."),Do={id:"enterprise-solutions",tabindex:"-1"},Ao=s("a",{class:"header-anchor",href:"#enterprise-solutions","aria-hidden":"true"},"#",-1),Oo=n(" Enterprise solutions "),wo=s("h3",{id:"the-greenbone-security-manager",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#the-greenbone-security-manager","aria-hidden":"true"},"#"),n(" The Greenbone Security Manager")],-1),Vo=s("p",null,"The Greenbone Security Manager (GSM) is an appliance for vulnerability scanning and management. It is offered in various performance levels and basically supports an unlimited number of target systems. The actually achievable number depends on the scan pattern and scan targets. For finding the right model for your purpose, we provide reference values for the number of target IP addresses below, assuming a common scenario with a scan every 24 hours.",-1),No={href:"https://www.greenbone.net/en/product-comparison/",target:"_blank",rel:"noopener noreferrer"},Go=n("Greenbone Security Manager");function Lo(Uo,Co){const i=r("Badge"),l=r("ExternalLinkIcon"),t=r("CodeGroupItem"),o=r("CodeGroup"),p=r("RouterLink");return u(),d(h,null,[s("h1",k,[_,v,e(i,{text:"Rev 7",type:"tip"})]),m,s("p",null,[s("a",f,[y,e(l)]),S,s("a",R,[I,e(l)]),E,s("a",x,[$,e(l)]),D,s("a",A,[O,e(l)])]),w,V,s("ul",null,[N,s("li",null,[G,s("a",L,[U,e(l)]),C]),M]),s("p",null,[s("a",T,[P,e(l)])]),B,F,s("ul",null,[s("li",null,[s("a",z,[q,e(l)])]),s("li",null,[s("a",W,[Y,e(l)])]),s("li",null,[s("a",K,[H,e(l)])])]),X,s("p",null,[j,s("a",Q,[J,e(l)]),Z,s("a",ss,[ns,e(l)]),es]),as,e(o,null,{default:a(()=>[e(t,{title:"Ubuntu"},{default:a(()=>[ts]),_:1}),e(t,{title:"Rocky"},{default:a(()=>[os]),_:1})]),_:1}),ls,e(o,null,{default:a(()=>[e(t,{title:"Ubuntu"},{default:a(()=>[cs]),_:1}),e(t,{title:"Rocky"},{default:a(()=>[rs]),_:1})]),_:1}),is,ps,e(o,null,{default:a(()=>[e(t,{title:"Ubuntu"},{default:a(()=>[us]),_:1}),e(t,{title:"Rocky"},{default:a(()=>[ds]),_:1})]),_:1}),hs,e(o,null,{default:a(()=>[e(t,{title:"Ubuntu"},{default:a(()=>[gs]),_:1}),e(t,{title:"Rocky"},{default:a(()=>[bs]),_:1})]),_:1}),ks,_s,e(o,null,{default:a(()=>[e(t,{title:"Ubuntu"},{default:a(()=>[vs]),_:1}),e(t,{title:"Rocky"},{default:a(()=>[ms]),_:1})]),_:1}),fs,e(o,null,{default:a(()=>[e(t,{title:"Ubuntu"},{default:a(()=>[ys]),_:1}),e(t,{title:"Rocky"},{default:a(()=>[Ss]),_:1})]),_:1}),Rs,s("p",null,[Is,s("a",Es,[xs,e(l)]),$s]),e(o,null,{default:a(()=>[e(t,{title:"Ubuntu"},{default:a(()=>[Ds]),_:1}),e(t,{title:"Rocky"},{default:a(()=>[As]),_:1})]),_:1}),Os,e(o,null,{default:a(()=>[e(t,{title:"Ubuntu"},{default:a(()=>[ws]),_:1}),e(t,{title:"Rocky"},{default:a(()=>[Vs]),_:1})]),_:1}),Ns,e(o,null,{default:a(()=>[e(t,{title:"Ubuntu"},{default:a(()=>[Gs]),_:1}),e(t,{title:"Rocky"},{default:a(()=>[Ls]),_:1})]),_:1}),Us,s("p",null,[Cs,s("a",Ms,[Ts,e(l)]),Ps]),e(o,null,{default:a(()=>[e(t,{title:"Ubuntu"},{default:a(()=>[Bs]),_:1}),e(t,{title:"Rocky"},{default:a(()=>[Fs]),_:1})]),_:1}),zs,e(o,null,{default:a(()=>[e(t,{title:"Ubuntu"},{default:a(()=>[qs]),_:1}),e(t,{title:"Rocky"},{default:a(()=>[Ws]),_:1})]),_:1}),Ys,s("p",null,[Ks,s("a",Hs,[Xs,e(l)]),js]),e(o,null,{default:a(()=>[e(t,{title:"Ubuntu"},{default:a(()=>[Qs]),_:1}),e(t,{title:"Rocky"},{default:a(()=>[Js]),_:1})]),_:1}),Zs,e(o,null,{default:a(()=>[e(t,{title:"Ubuntu"},{default:a(()=>[sn]),_:1}),e(t,{title:"Rocky"},{default:a(()=>[nn]),_:1})]),_:1}),en,s("p",null,[an,s("a",tn,[on,e(l)]),ln]),e(o,null,{default:a(()=>[e(t,{title:"Ubuntu"},{default:a(()=>[cn]),_:1}),e(t,{title:"Rocky"},{default:a(()=>[rn]),_:1})]),_:1}),pn,e(o,null,{default:a(()=>[e(t,{title:"Ubuntu"},{default:a(()=>[un]),_:1}),e(t,{title:"Rocky"},{default:a(()=>[dn]),_:1})]),_:1}),hn,s("p",null,[gn,s("a",bn,[kn,e(l)]),_n]),e(o,null,{default:a(()=>[e(t,{title:"Ubuntu"},{default:a(()=>[vn]),_:1}),e(t,{title:"Rocky"},{default:a(()=>[mn]),_:1})]),_:1}),fn,e(o,null,{default:a(()=>[e(t,{title:"Ubuntu"},{default:a(()=>[yn]),_:1}),e(t,{title:"Rocky"},{default:a(()=>[Sn]),_:1})]),_:1}),Rn,s("p",null,[In,s("a",En,[xn,e(l)]),$n,s("a",Dn,[An,e(l)]),On]),e(o,null,{default:a(()=>[e(t,{title:"Ubuntu"},{default:a(()=>[wn]),_:1}),e(t,{title:"Rocky"},{default:a(()=>[Vn]),_:1})]),_:1}),Nn,e(o,null,{default:a(()=>[e(t,{title:"Ubuntu"},{default:a(()=>[Gn]),_:1}),e(t,{title:"Rocky"},{default:a(()=>[Ln]),_:1})]),_:1}),Un,e(o,null,{default:a(()=>[e(t,{title:"Ubuntu"},{default:a(()=>[Cn]),_:1}),e(t,{title:"Rocky"},{default:a(()=>[Mn]),_:1})]),_:1}),Tn,Pn,e(o,null,{default:a(()=>[e(t,{title:"Ubuntu"},{default:a(()=>[Bn]),_:1}),e(t,{title:"Rocky"},{default:a(()=>[Fn]),_:1})]),_:1}),zn,e(o,null,{default:a(()=>[e(t,{title:"Ubuntu"},{default:a(()=>[qn]),_:1}),e(t,{title:"Rocky"},{default:a(()=>[Wn]),_:1})]),_:1}),Yn,e(o,null,{default:a(()=>[e(t,{title:"Ubuntu"},{default:a(()=>[Kn]),_:1}),e(t,{title:"Rocky"},{default:a(()=>[Hn]),_:1})]),_:1}),Xn,e(o,null,{default:a(()=>[e(t,{title:"Ubuntu"},{default:a(()=>[jn]),_:1}),e(t,{title:"Rocky"},{default:a(()=>[Qn]),_:1})]),_:1}),Jn,e(o,null,{default:a(()=>[e(t,{title:"Ubuntu"},{default:a(()=>[Zn]),_:1}),e(t,{title:"Rocky"},{default:a(()=>[se]),_:1})]),_:1}),ne,s("p",null,[ee,s("a",ae,[te,e(l)]),oe,le,ce]),e(o,null,{default:a(()=>[e(t,{title:"Ubuntu"},{default:a(()=>[re]),_:1}),e(t,{title:"Rocky"},{default:a(()=>[ie]),_:1})]),_:1}),pe,e(o,null,{default:a(()=>[e(t,{title:"Ubuntu"},{default:a(()=>[ue]),_:1}),e(t,{title:"Rocky"},{default:a(()=>[de]),_:1})]),_:1}),he,e(o,null,{default:a(()=>[e(t,{title:"Ubuntu"},{default:a(()=>[ge]),_:1}),e(t,{title:"Rocky"},{default:a(()=>[be]),_:1})]),_:1}),ke,e(o,null,{default:a(()=>[e(t,{title:"Ubuntu"},{default:a(()=>[_e]),_:1}),e(t,{title:"Rocky"},{default:a(()=>[ve]),_:1})]),_:1}),me,e(o,null,{default:a(()=>[e(t,{title:"Ubuntu"},{default:a(()=>[fe]),_:1}),e(t,{title:"Rocky"},{default:a(()=>[ye]),_:1})]),_:1}),Se,e(o,null,{default:a(()=>[e(t,{title:"Ubuntu"},{default:a(()=>[Re]),_:1}),e(t,{title:"Rocky"},{default:a(()=>[Ie]),_:1})]),_:1}),Ee,xe,$e,e(o,null,{default:a(()=>[e(t,{title:"Ubuntu"},{default:a(()=>[De]),_:1}),e(t,{title:"Rocky"},{default:a(()=>[Ae]),_:1})]),_:1}),Oe,we,Ve,e(o,null,{default:a(()=>[e(t,{title:"Ubuntu"},{default:a(()=>[Ne]),_:1}),e(t,{title:"Rocky"},{default:a(()=>[Ge]),_:1})]),_:1}),Le,Ue,Ce,e(o,null,{default:a(()=>[e(t,{title:"Ubuntu"},{default:a(()=>[Me]),_:1}),e(t,{title:"Rocky"},{default:a(()=>[Te]),_:1})]),_:1}),Pe,Be,e(o,null,{default:a(()=>[e(t,{title:"Ubuntu"},{default:a(()=>[Fe]),_:1}),e(t,{title:"Rocky"},{default:a(()=>[ze]),_:1})]),_:1}),qe,e(o,null,{default:a(()=>[e(t,{title:"Ubuntu"},{default:a(()=>[We]),_:1}),e(t,{title:"Rocky"},{default:a(()=>[Ye]),_:1})]),_:1}),Ke,e(o,null,{default:a(()=>[e(t,{title:"Ubuntu"},{default:a(()=>[He]),_:1}),e(t,{title:"Rocky"},{default:a(()=>[Xe]),_:1})]),_:1}),je,e(o,null,{default:a(()=>[e(t,{title:"Ubuntu"},{default:a(()=>[Qe]),_:1}),e(t,{title:"Rocky"},{default:a(()=>[Je]),_:1})]),_:1}),Ze,e(o,null,{default:a(()=>[e(t,{title:"Ubuntu"},{default:a(()=>[sa]),_:1}),e(t,{title:"Rocky"},{default:a(()=>[na]),_:1})]),_:1}),ea,e(o,null,{default:a(()=>[e(t,{title:"Ubuntu"},{default:a(()=>[aa]),_:1}),e(t,{title:"Rocky"},{default:a(()=>[ta]),_:1})]),_:1}),oa,la,e(o,null,{default:a(()=>[e(t,{title:"Ubuntu"},{default:a(()=>[ca]),_:1}),e(t,{title:"Rocky"},{default:a(()=>[ra]),_:1})]),_:1}),ia,e(o,null,{default:a(()=>[e(t,{title:"Ubuntu"},{default:a(()=>[pa]),_:1}),e(t,{title:"Rocky"},{default:a(()=>[ua]),_:1})]),_:1}),da,e(o,null,{default:a(()=>[e(t,{title:"Ubuntu"},{default:a(()=>[ha]),_:1}),e(t,{title:"Rocky"},{default:a(()=>[ga]),_:1})]),_:1}),s("div",ba,[ka,s("p",null,[_a,s("a",va,[ma,e(l)]),fa])]),ya,e(o,null,{default:a(()=>[e(t,{title:"Ubuntu"},{default:a(()=>[Sa]),_:1}),e(t,{title:"Rocky"},{default:a(()=>[Ra]),_:1})]),_:1}),Ia,e(o,null,{default:a(()=>[e(t,{title:"Ubuntu"},{default:a(()=>[Ea]),_:1}),e(t,{title:"Rocky"},{default:a(()=>[xa]),_:1})]),_:1}),$a,e(o,null,{default:a(()=>[e(t,{title:"Ubuntu"},{default:a(()=>[Da]),_:1}),e(t,{title:"Rocky"},{default:a(()=>[Aa]),_:1})]),_:1}),Oa,s("img",{class:"zoom-custom-imgs",src:"/img/openvas/gvm-21_4_4-gsa_login.png",alt:"GSA login"},null,8,wa),Va,Na,s("img",{class:"zoom-custom-imgs",src:"/img/openvas/gvm-21_4_4-feed_status.png",alt:"GVM feed status"},null,8,Ga),La,e(o,null,{default:a(()=>[e(t,{title:"Ubuntu"},{default:a(()=>[Ua]),_:1}),e(t,{title:"Rocky"},{default:a(()=>[Ca]),_:1})]),_:1}),Ma,s("img",{class:"zoom-custom-imgs",src:"/img/openvas/gvm-21_4_4-dashboard.png",alt:"GSA dashboard"},null,8,Ta),Pa,s("img",{class:"zoom-custom-imgs",src:"/img/openvas/gvm-21_4_4-gsa_about.png",alt:"GSA about"},null,8,Ba),Fa,s("h2",za,[qa,Wa,e(i,{text:"non-sponsored",type:"tip"})]),s("p",null,[Ya,s("a",Ka,[Ha,e(l)]),Xa]),ja,e(o,null,{default:a(()=>[e(t,{title:"Rocky"},{default:a(()=>[Qa]),_:1})]),_:1}),Ja,e(o,null,{default:a(()=>[e(t,{title:"Rocky"},{default:a(()=>[Za]),_:1})]),_:1}),st,e(o,null,{default:a(()=>[e(t,{title:"Rocky"},{default:a(()=>[nt]),_:1})]),_:1}),et,e(o,null,{default:a(()=>[e(t,{title:"Rocky"},{default:a(()=>[at]),_:1})]),_:1}),tt,e(o,null,{default:a(()=>[e(t,{title:"Rocky"},{default:a(()=>[ot]),_:1})]),_:1}),lt,ct,e(o,null,{default:a(()=>[e(t,{title:"Rocky"},{default:a(()=>[rt]),_:1})]),_:1}),it,e(o,null,{default:a(()=>[e(t,{title:"Rocky"},{default:a(()=>[pt]),_:1})]),_:1}),ut,e(o,null,{default:a(()=>[e(t,{title:"Rocky"},{default:a(()=>[dt]),_:1})]),_:1}),ht,gt,e(o,null,{default:a(()=>[e(t,{title:"Rocky"},{default:a(()=>[bt]),_:1})]),_:1}),kt,s("img",{class:"zoom-custom-imgs",src:"/img/openvas/gsa_dashboard.png",alt:"GSA dashboard"},null,8,_t),vt,s("img",{class:"zoom-custom-imgs",src:"/img/openvas/gsa_targets.png",alt:"GSA targets"},null,8,mt),ft,s("img",{class:"zoom-custom-imgs",src:"/img/openvas/gsa_target.png",alt:"GSA target"},null,8,yt),St,s("img",{class:"zoom-custom-imgs",src:"/img/openvas/gsa_tasks.png",alt:"GSA tasks"},null,8,Rt),It,s("img",{class:"zoom-custom-imgs",src:"/img/openvas/gsa_task.png",alt:"GSA task"},null,8,Et),xt,s("img",{class:"zoom-custom-imgs",src:"/img/openvas/gsa_noauth_task.png",alt:"GSA noauth task"},null,8,$t),Dt,s("img",{class:"zoom-custom-imgs",src:"/img/openvas/gsa_noauth_scan.png",alt:"GSA noauth scan"},null,8,At),Ot,wt,s("img",{class:"zoom-custom-imgs",src:"/img/openvas/gsa_credentials.png",alt:"GSA credentials"},null,8,Vt),Nt,s("img",{class:"zoom-custom-imgs",src:"/img/openvas/gsa_newcredentials.png",alt:"GSA new credentials"},null,8,Gt),Lt,s("img",{class:"zoom-custom-imgs",src:"/img/openvas/gsa_auth_target.png",alt:"GSA auth target"},null,8,Ut),Ct,s("img",{class:"zoom-custom-imgs",src:"/img/openvas/gsa_auth_task.png",alt:"GSA auth task"},null,8,Mt),Tt,s("p",null,[Pt,e(p,{to:"/privacyidea/"},{default:a(()=>[Bt]),_:1}),Ft]),zt,qt,e(o,null,{default:a(()=>[e(t,{title:"Ubuntu"},{default:a(()=>[Wt]),_:1}),e(t,{title:"Rocky"},{default:a(()=>[Yt]),_:1})]),_:1}),Kt,e(o,null,{default:a(()=>[e(t,{title:"Ubuntu"},{default:a(()=>[Ht]),_:1}),e(t,{title:"Rocky"},{default:a(()=>[Xt]),_:1})]),_:1}),jt,e(o,null,{default:a(()=>[e(t,{title:"Ubuntu"},{default:a(()=>[Qt]),_:1}),e(t,{title:"Rocky"},{default:a(()=>[Jt]),_:1})]),_:1}),Zt,e(o,null,{default:a(()=>[e(t,{title:"Ubuntu"},{default:a(()=>[so]),_:1}),e(t,{title:"Rocky"},{default:a(()=>[no]),_:1})]),_:1}),eo,e(o,null,{default:a(()=>[e(t,{title:"Ubuntu"},{default:a(()=>[ao]),_:1}),e(t,{title:"Rocky"},{default:a(()=>[to]),_:1})]),_:1}),oo,e(o,null,{default:a(()=>[e(t,{title:"Ubuntu"},{default:a(()=>[lo]),_:1}),e(t,{title:"Rocky"},{default:a(()=>[co]),_:1})]),_:1}),ro,s("p",null,[io,s("a",po,[uo,e(l)]),ho]),s("p",null,[s("a",go,[bo,e(l)]),ko,s("a",_o,[vo,e(l)]),mo,s("a",fo,[yo,e(l)]),So,s("a",Ro,[Io,e(l)]),Eo,xo,$o]),s("h2",Do,[Ao,Oo,e(i,{text:"non-sponsored",type:"tip"})]),wo,Vo,s("p",null,[s("a",No,[Go,e(l)])])],64)}var Po=g(b,[["render",Lo]]);export{Po as default};
