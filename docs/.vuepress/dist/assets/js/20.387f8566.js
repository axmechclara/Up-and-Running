(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{387:function(e,s,t){"use strict";t.r(s);var a=t(12),n=Object(a.a)({},(function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"rsyslog-syslog-processing"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#rsyslog-syslog-processing"}},[e._v("#")]),e._v(" Rsyslog Syslog Processing")]),e._v(" "),t("TagLinks"),e._v(" "),t("p",[e._v("In this example the central rsyslog server will receive encrypted TCP trafic from remote server(s) and upload the syslog data locally through UDP to our Graylog server.")]),e._v(" "),t("p",[e._v("Setup and configuration has been tested on following OS with version:")]),e._v(" "),t("ul",[t("li",[e._v("Ubuntu 16.04, Ubuntu 18.04")]),e._v(" "),t("li",[e._v("8.16.0, 8.32.0")])]),e._v(" "),t("h2",{attrs:{id:"configuration-files"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#configuration-files"}},[e._v("#")]),e._v(" Configuration files")]),e._v(" "),t("h2",{attrs:{id:"prerequisites"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#prerequisites"}},[e._v("#")]),e._v(" Prerequisites")]),e._v(" "),t("ul",[t("li",[e._v("OpenSSL")])]),e._v(" "),t("h2",{attrs:{id:"setup-rsyslog"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#setup-rsyslog"}},[e._v("#")]),e._v(" Setup Rsyslog")]),e._v(" "),t("h3",{attrs:{id:"generate-ca-key-and-certificate"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#generate-ca-key-and-certificate"}},[e._v("#")]),e._v(" Generate CA key and certificate")]),e._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),t("p",[e._v("See script for self-signed SSL certificates")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("openssl genrsa -out ca.key 2048\nopenssl req -x509 -new -nodes -key ca.key -sha256 -days 1024 -out ca.pem\n")])])]),t("h3",{attrs:{id:"create-server-certificate"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#create-server-certificate"}},[e._v("#")]),e._v(" Create server certificate")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("openssl genrsa -out server.key 2048\nopenssl req -new -key server.key -out server.csr\n")])])]),t("h3",{attrs:{id:"sign-server-certificate"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sign-server-certificate"}},[e._v("#")]),e._v(" Sign server certificate")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("openssl x509 -req -in server.csr -CA ca.pem -CAkey ca.key -CAcreateserial -out server.pem -days 1024 -sha256\n")])])]),t("h3",{attrs:{id:"create-client-certificate"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#create-client-certificate"}},[e._v("#")]),e._v(" Create client certificate")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("openssl genrsa -out client.key 2048\nopenssl req -new -key client.key -out client.csr\n")])])]),t("h3",{attrs:{id:"sign-client-certificate"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sign-client-certificate"}},[e._v("#")]),e._v(" Sign client certificate")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("openssl x509 -req -in client.csr -CA ca.pem -CAkey ca.key -CAcreateserial -out client.pem -days 1024 -sha256\n")])])]),t("h3",{attrs:{id:"setup-tcp-listener-on-rsyslog-server"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#setup-tcp-listener-on-rsyslog-server"}},[e._v("#")]),e._v(" Setup TCP listener on Rsyslog server")]),e._v(" "),t("p",[e._v("We will retrieve our syslogs listening to TCP port 10514 and require x509 encryption certificate. We will also forward all the logs locally to our Graylog server on UDP port 10514.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("$ sudo nano /etc/rsyslog.conf\n...\n$ModLoad imtcp # TCP listener\n\n# make gtls driver the default\n$DefaultNetstreamDriver gtls\n\n# certificate files\n$DefaultNetstreamDriverCAFile /home/user/certs/ca.pem\n$DefaultNetstreamDriverCertFile /home/user/certs/server.pem\n$DefaultNetstreamDriverKeyFile /home/user/certs/server.key\n\n$InputTCPServerStreamDriverAuthMode x509/name\n$InputTCPServerStreamDriverPermittedPeer *.libellux.com\n$InputTCPServerStreamDriverMode 1 # run driver in TLS-only mode\n$InputTCPServerRun 10514 # start up listener at port 10514\n\n*.* @127.0.0.1:10514 # forward everything to graylog\n")])])]),t("h3",{attrs:{id:"setup-tcp-forwarding-on-rsyslog-client"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#setup-tcp-forwarding-on-rsyslog-client"}},[e._v("#")]),e._v(" Setup TCP forwarding on Rsyslog client")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("# make gtls driver the default\n$DefaultNetstreamDriver gtls\n\n# certificate files\n$DefaultNetstreamDriverCAFile /home/user/certs/ca.pem\n$DefaultNetstreamDriverCertFile /home/user/certs/client.pem\n$DefaultNetstreamDriverKeyFile /home/user/certs/client.key\n\n$ActionSendStreamDriverAuthMode x509/name\n$ActionSendStreamDriverPermittedPeer *.libellux.com\n$ActionSendStreamDriverMode 1 # run driver in TLS-only mode\n*.* @@[rsyslog-server IP]:10514 # forward everything to remote server\n")])])]),t("h2",{attrs:{id:"firewall-settings"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#firewall-settings"}},[e._v("#")]),e._v(" Firewall settings")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('$ sudo ufw allow proto tcp from [remote IP] to any port 10514 comment "Client X syslog"\n')])])]),t("h2",{attrs:{id:"check-if-tcp-listener-is-encrypted"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#check-if-tcp-listener-is-encrypted"}},[e._v("#")]),e._v(" Check if TCP listener is encrypted")]),e._v(" "),t("p",[e._v("To generate a syslog message on client simply type from cli "),t("code",[e._v("$ logger test")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("$ sudo tcpdump -i eth1 port 10514 -vv -x\n")])])]),t("h2",{attrs:{id:"generate-self-signed-ssl-certificates-for-rsyslog"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#generate-self-signed-ssl-certificates-for-rsyslog"}},[e._v("#")]),e._v(" Generate Self-Signed SSL Certificates for Rsyslog")]),e._v(" "),t("p",[e._v("Forked from "),t("a",{attrs:{href:"https://github.com/kingkool68/generate-ssl-certs-for-local-development/",target:"_blank",rel:"noopener noreferrer"}},[e._v("kingkool68/generate-ssl-certs-for-local-development"),t("OutboundLink")],1),e._v(", and modified to be used for encrypting communication between central rsyslog server and its clients.")]),e._v(" "),t("ol",[t("li",[e._v("Edit "),t("code",[e._v("options.conf")]),e._v(" and "),t("code",[e._v("ca-options.conf")]),e._v(" to match your setup.")]),e._v(" "),t("li",[e._v("Run the script "),t("code",[e._v("sudo ./generate-ssl.sh client.libellux.com")])])]),e._v(" "),t("p",[e._v("The script creates a self-signed certificate authority and signs your generated certificate(s). Browse the "),t("code",[e._v("certs/")]),e._v(" folder and copy the new client folder to your remote machine.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("# options.conf\nauthorityKeyIdentifier=keyid,issuer\nbasicConstraints=CA:FALSE\nkeyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment\nsubjectAltName = @alt_names\n\n[alt_names]\n# Local hosts\nDNS.1 = localhost\nDNS.2 = 127.0.0.1\nDNS.3 = ::1\n\n# List your domain names here\nDNS.4 = local.dev\n# DNS.5 = another-domain.dev\n# DNS.6 = yet-another-domain.dev\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("#ca-options.conf\n[req]\nprompt = no\ndistinguished_name = req_distinguished_name\n\n[req_distinguished_name]\nC = SE\nST = Kalmar\nL = Kalmar\nO = Libellux Systems, Inc.\nOU = Libellux Systems, Inc.\n# emailAddress = info@example.com\nCN = client.libellux.com\n")])])]),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token shebang important"}},[e._v("#!/bin/bash")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Forked from https://github.com/kingkool68/generate-ssl-certs-for-local-development")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Modified to use for local rsyslog server")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Fredrik Hilmersson <fredrik@libellux.com>")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Make sure this script is run as sudo")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"'),t("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("$EUID")]),e._v('"')]),e._v(" -ne "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("then")]),e._v("\n        "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Insufficient privileges!"')]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("exit")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("fi")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("function")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function-name function"}},[e._v("command_exists")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("type")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$1")]),e._v('"')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&>")]),e._v(" /dev/null "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Make sure openssl exists")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("!")]),e._v(" command_exists openssl "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("then")]),e._v("\n        "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Missing dependency: OpenSSL"')]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("exit")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("fi")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("name")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$1")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v(" -z "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$name")]),e._v('"')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("then")]),e._v("\n        "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Missing argument!"')]),e._v("\n        "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Try ./generate-ssl.sh client.libellux.com"')]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("exit")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("fi")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Make sure the certs/ directory exists")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("!")]),e._v(" -d "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"certs"')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("then")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("mkdir")]),e._v(" certs/\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("fi")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Make sure the ~/certs/tmp/ directory exists")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("!")]),e._v(" -d "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"tmp"')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("then")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("mkdir")]),e._v(" tmp/\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("fi")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Cleanup files from previous runs")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("rm")]),e._v(" tmp/* "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&>")]),e._v(" /dev/null\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Remove any lines that start with CN")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("sed")]),e._v(" -i "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'/^CN/d'")]),e._v(" ca-options.conf\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Modify the conf file to set CN = ${name}")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"CN = '),t("span",{pre:!0,attrs:{class:"token variable"}},[e._v("${name}")]),e._v('"')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),e._v(" ca-options.conf\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("!")]),e._v(" -e "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"certs/ca.key"')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("||")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("!")]),e._v(" -e "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"certs/ca.pem"')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("then")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Remove remaining ca file(s)")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("rm")]),e._v(" certs/ca.* "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&>")]),e._v(" /dev/null\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Generate Certificate Authority")]),e._v("\n    openssl genrsa -out "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"certs/ca.key"')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("2048")]),e._v("\n    openssl req -x509 -config ca-options.conf -new -nodes -key "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"certs/ca.key"')]),e._v(" -sha256 -days "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("1024")]),e._v(" -out "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"certs/ca.pem"')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("fi")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("!")]),e._v(" -d "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"certs/'),t("span",{pre:!0,attrs:{class:"token variable"}},[e._v("${name}")]),e._v('"')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("then")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("mkdir")]),e._v(" certs/"),t("span",{pre:!0,attrs:{class:"token variable"}},[e._v("${name}")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("fi")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Generate CA-signed Certificate")]),e._v("\nopenssl genrsa -out "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"certs/'),t("span",{pre:!0,attrs:{class:"token variable"}},[e._v("${name}")]),e._v("/"),t("span",{pre:!0,attrs:{class:"token variable"}},[e._v("${name}")]),e._v('.key"')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("2048")]),e._v("\nopenssl req -new -config ca-options.conf -key "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"certs/'),t("span",{pre:!0,attrs:{class:"token variable"}},[e._v("${name}")]),e._v("/"),t("span",{pre:!0,attrs:{class:"token variable"}},[e._v("${name}")]),e._v('.key"')]),e._v(" -out "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"tmp/'),t("span",{pre:!0,attrs:{class:"token variable"}},[e._v("${name}")]),e._v('.csr"')]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Generate SSL Certificate")]),e._v("\nopenssl x509 -req -in "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"tmp/'),t("span",{pre:!0,attrs:{class:"token variable"}},[e._v("${name}")]),e._v('.csr"')]),e._v(" -CA "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"certs/ca.pem"')]),e._v(" -CAkey "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"certs/ca.key"')]),e._v(" -CAcreateserial -out "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"certs/'),t("span",{pre:!0,attrs:{class:"token variable"}},[e._v("${name}")]),e._v("/"),t("span",{pre:!0,attrs:{class:"token variable"}},[e._v("${name}")]),e._v('.crt"')]),e._v(" -days "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("1024")]),e._v(" -sha256 -extfile options.conf\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Create CA certificate copy")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("cp")]),e._v(" certs/ca.pem certs/"),t("span",{pre:!0,attrs:{class:"token variable"}},[e._v("${name}")]),e._v("/\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Set user permissions")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("chmod")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("400")]),e._v(" certs/ca.key\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("chmod")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("400")]),e._v(" certs/"),t("span",{pre:!0,attrs:{class:"token variable"}},[e._v("${name}")]),e._v("/"),t("span",{pre:!0,attrs:{class:"token variable"}},[e._v("${name}")]),e._v(".key\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("chown")]),e._v(" syslog:syslog certs/"),t("span",{pre:!0,attrs:{class:"token variable"}},[e._v("${name}")]),e._v("/"),t("span",{pre:!0,attrs:{class:"token variable"}},[e._v("${name}")]),e._v(".key\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Cleanup stray file")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("rm")]),e._v(" certs/*.srl "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&>")]),e._v(" /dev/null\n\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Complete"')]),e._v("\n")])])])],1)}),[],!1,null,null,null);s.default=n.exports}}]);