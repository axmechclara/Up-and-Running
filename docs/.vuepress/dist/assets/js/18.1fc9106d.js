(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{412:function(e,t,s){"use strict";s.r(t);var a=s(11),n=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"greenbone-vulnerability-manager"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#greenbone-vulnerability-manager"}},[e._v("#")]),e._v(" Greenbone Vulnerability Manager")]),e._v(" "),s("TagLinks"),e._v(" "),s("p",[e._v("OpenVAS is a full-featured vulnerability scanner. Its capabilities include unauthenticated testing, authenticated testing, various high level and low level Internet and industrial protocols, performance tuning for large-scale scans and a powerful internal programming language to implement any type of vulnerability test.")]),e._v(" "),s("p",[s("a",{attrs:{href:"https://www.greenbone.net/en/vulnerability-management/",target:"_blank",rel:"noopener noreferrer"}},[e._v("GVM website"),s("OutboundLink")],1),e._v(" "),s("a",{attrs:{href:"https://www.openvas.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("OpenVAS website"),s("OutboundLink")],1),e._v(" "),s("a",{attrs:{href:"https://github.com/greenbone/openvas",target:"_blank",rel:"noopener noreferrer"}},[e._v("GitHub"),s("OutboundLink")],1),e._v(" "),s("a",{attrs:{href:"https://greenbone.github.io/docs/",target:"_blank",rel:"noopener noreferrer"}},[e._v("GVM official docs"),s("OutboundLink")],1)]),e._v(" "),s("p",[e._v("Setup and configuration has been tested on the following operating systems:")]),e._v(" "),s("ul",[s("li",[e._v("Ubuntu- 16.04, 18.04, 20.04, CentOS 8")]),e._v(" "),s("li",[e._v("GVM 20.08 for Debian 10 visit "),s("a",{attrs:{href:"https://sadsloth.net/post/install-gvm-20_08-src-on-debian/",target:"_blank",rel:"noopener noreferrer"}},[e._v("sadsloth.net"),s("OutboundLink")],1),e._v(".")]),e._v(" "),s("li",[e._v("GVM-9 (OpenVAS-9), Atomicorp 20.08 (RHEL 8, CentOS 8, Fedora 32), GVM- 20.08, 20.08.1, 21.04, 21.4.2")])]),e._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[e._v("NOTE")]),e._v(" "),s("p",[e._v("GVM-9 (OpenVAS-9) reached end-of-life support. GVM 10 and 11 will reach end-of-life support in the end of 2020.")])]),e._v(" "),s("h2",{attrs:{id:"configuration-files"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#configuration-files"}},[e._v("#")]),e._v(" Configuration files")]),e._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[e._v("INFO")]),e._v(" "),s("p",[e._v('The lines in the "scripts" below has been used for testing and successfully configure GVM 20.08 (20.08.1) and 21.04 (21.4.2).\nYou may use the testing guide to install GVM or follow our detailed step-by-step tutorial below to install GVM 21.04.')])]),e._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://github.com/libellux/Libellux-Up-and-Running/blob/master/docs/openvas/config/21_4_2.sh",target:"_blank",rel:"noopener noreferrer"}},[e._v("21.4.2"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/libellux/Libellux-Up-and-Running/blob/master/docs/openvas/config/20_08_1.sh",target:"_blank",rel:"noopener noreferrer"}},[e._v("20.08.1"),s("OutboundLink")],1)])]),e._v(" "),s("h2",{attrs:{id:"prerequisites"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#prerequisites"}},[e._v("#")]),e._v(" Prerequisites")]),e._v(" "),s("p",[e._v("Dependencies required to install GVM 21.04 (21.4.2) from source on Ubuntu 20.04:")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("build-essential")])]),e._v(" "),s("li",[s("code",[e._v("cmake")])]),e._v(" "),s("li",[s("code",[e._v("gnutls-bin")])]),e._v(" "),s("li",[s("code",[e._v("pkg-config")])]),e._v(" "),s("li",[s("code",[e._v("glib2.0")])]),e._v(" "),s("li",[s("code",[e._v("libgnutls28-dev")])]),e._v(" "),s("li",[s("code",[e._v("libssh-dev")])]),e._v(" "),s("li",[s("code",[e._v("libssl-dev")])]),e._v(" "),s("li",[s("code",[e._v("libhiredis-dev")])]),e._v(" "),s("li",[s("code",[e._v("redis-server")])]),e._v(" "),s("li",[s("code",[e._v("libxml2-dev")])]),e._v(" "),s("li",[s("code",[e._v("doxygen")])]),e._v(" "),s("li",[s("code",[e._v("xsltproc")])]),e._v(" "),s("li",[s("code",[e._v("libldap2-dev")])]),e._v(" "),s("li",[s("code",[e._v("libgcrypt-dev")])]),e._v(" "),s("li",[s("code",[e._v("libpcap-dev")])]),e._v(" "),s("li",[s("code",[e._v("libgpgme-dev")])]),e._v(" "),s("li",[s("code",[e._v("libradcli-dev")])]),e._v(" "),s("li",[s("code",[e._v("graphviz")])]),e._v(" "),s("li",[s("code",[e._v("bison")])]),e._v(" "),s("li",[s("code",[e._v("libksba-dev")])]),e._v(" "),s("li",[s("code",[e._v("libical-dev")])]),e._v(" "),s("li",[s("code",[e._v("libpq-dev")])]),e._v(" "),s("li",[s("code",[e._v("postgresql")])]),e._v(" "),s("li",[s("code",[e._v("postgresql-contrib")])]),e._v(" "),s("li",[s("code",[e._v("postgresql-server-dev-all")])]),e._v(" "),s("li",[s("code",[e._v("libopenvas-dev")])]),e._v(" "),s("li",[s("code",[e._v("heimdal-dev")])]),e._v(" "),s("li",[s("code",[e._v("libpopt-dev")])]),e._v(" "),s("li",[s("code",[e._v("xmltoman")])]),e._v(" "),s("li",[s("code",[e._v("gcc-mingw-w64")])]),e._v(" "),s("li",[s("code",[e._v("nmap")])]),e._v(" "),s("li",[s("code",[e._v("npm")])]),e._v(" "),s("li",[s("code",[e._v("nodejs")])]),e._v(" "),s("li",[s("code",[e._v("libpthread-stubs0-dev")])]),e._v(" "),s("li",[s("code",[e._v("clang-format")])]),e._v(" "),s("li",[s("code",[e._v("libmicrohttpd-dev")])]),e._v(" "),s("li",[s("code",[e._v("yarn")])]),e._v(" "),s("li",[s("code",[e._v("virtualenv")])]),e._v(" "),s("li",[s("code",[e._v("python3-paramiko")])]),e._v(" "),s("li",[s("code",[e._v("python3-lxml")])]),e._v(" "),s("li",[s("code",[e._v("python3-defusedxml")])]),e._v(" "),s("li",[s("code",[e._v("python3-pip")])]),e._v(" "),s("li",[s("code",[e._v("python3-psutil")])]),e._v(" "),s("li",[s("code",[e._v("libnet1-dev")])]),e._v(" "),s("li",[s("code",[e._v("libunistring-dev")])])]),e._v(" "),s("h2",{attrs:{id:"install-gvm-21-04-from-source"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#install-gvm-21-04-from-source"}},[e._v("#")]),e._v(" Install GVM 21.04 from source "),s("Badge",{attrs:{text:"Rev 6",type:"default"}})],1),e._v(" "),s("p",[e._v("Before we will install the latest version of Greenbone Vulnerability Manager (GVM) 21.04 (21.4.2) make sure your system is up-to-date.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ sudo apt-get update\nserver@ubuntu:~$ sudo apt-get upgrade\n")])])]),s("p",[e._v("Proceed to install all the dependencies for GVM 21.04 (21.4.2) on Ubuntu 20.04.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ sudo apt-get update && \\\nsudo apt-get -y upgrade && \\\nsudo apt-get install -y build-essential && \\\nsudo apt-get install -y cmake pkg-config glib2.0 gcc-mingw-w64 \\\ngnutls-bin libgnutls28-dev libxml2-dev libssh-dev libssl-dev libunistring-dev \\\nlibldap2-dev libgcrypt-dev libpcap-dev libgpgme-dev libradcli-dev \\\nlibksba-dev libical-dev libpq-dev libopenvas-dev libpopt-dev libnet1-dev \\\nlibmicrohttpd-dev redis-server libhiredis-dev doxygen xsltproc \\\ngraphviz bison postgresql postgresql-contrib postgresql-server-dev-all \\\nheimdal-dev xmltoman nmap npm nodejs virtualenv \\\npython3-paramiko python3-lxml python3-defusedxml python3-pip python3-psutil\n")])])]),s("p",[e._v("Continue to install yarn using npm with the specified installation path.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ sudo npm install -g yarn --prefix /usr/\n")])])]),s("h3",{attrs:{id:"set-up-gvm-user-and-group"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#set-up-gvm-user-and-group"}},[e._v("#")]),e._v(" Set up GVM user and group")]),e._v(" "),s("p",[e._v("Lets create the GVM user and add it to sudoers group without login.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ sudo useradd -r -M -U -G sudo -s /usr/sbin/nologin gvm\n")])])]),s("p",[e._v("Next add your current sudo users to the GVM group so you're allowed to run "),s("em",[e._v("gvmd")]),e._v(".")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ sudo usermod -aG gvm $USER\n")])])]),s("p",[e._v("Make sure that the group change is updated by running the below command.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ su $USER\n")])])]),s("h3",{attrs:{id:"define-paths"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#define-paths"}},[e._v("#")]),e._v(" Define paths")]),e._v(" "),s("p",[e._v("Next we will define base, source, build and installation directory. First lets set up the base path.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ export PATH=$PATH:/usr/local/sbin\nserver@ubuntu:~$ export INSTALL_PREFIX=/usr/local\n")])])]),s("p",[e._v("Continue to setup the source directory.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ export SOURCE_DIR=$HOME/source\nserver@ubuntu:~$ mkdir -p $SOURCE_DIR\n")])])]),s("p",[e._v("Next set and create the build directory.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ export BUILD_DIR=$HOME/build\nserver@ubuntu:~$ mkdir -p $BUILD_DIR\n")])])]),s("p",[e._v("Finally set up the installation directory.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ export INSTALL_DIR=$HOME/install\nserver@ubuntu:~$ mkdir -p $INSTALL_DIR\n")])])]),s("h3",{attrs:{id:"import-gvm-signing-key-to-validate-the-integrity-of-the-source-files"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#import-gvm-signing-key-to-validate-the-integrity-of-the-source-files"}},[e._v("#")]),e._v(" Import GVM signing key to validate the integrity of the source files")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("div",{staticClass:"highlight-lines"},[s("div",{staticClass:"highlighted"},[e._v(" ")]),s("div",{staticClass:"highlighted"},[e._v(" ")]),s("br"),s("br"),s("br"),s("br"),s("br"),s("br")]),s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('server@ubuntu:~$ curl -O https://www.greenbone.net/GBCommunitySigningKey.asc\nserver@ubuntu:~$ gpg --import GBCommunitySigningKey.asc\n\ngpg: /home/$USER/.gnupg/trustdb.gpg: trustdb created\ngpg: key 9823FAA60ED1E580: public key "Greenbone Community Feed integrity key" imported\ngpg: Total number processed: 1\ngpg:               imported: 1\n')])])]),s("p",[e._v("Next edit and add the GPG key to the ultimately trusted list.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ gpg --edit-key 9823FAA60ED1E580\n")])])]),s("p",[e._v("You'll be presented with following information and options as below. First type "),s("em",[e._v("trust")]),e._v(" and select option 5 (I trust ultimately).")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("div",{staticClass:"highlight-lines"},[s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("div",{staticClass:"highlighted"},[e._v(" ")]),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("div",{staticClass:"highlighted"},[e._v(" ")]),s("br"),s("br"),s("div",{staticClass:"highlighted"},[e._v(" ")]),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br")]),s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("gpg (GnuPG) 2.2.19; Copyright (C) 2019 Free Software Foundation, Inc.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\npub  rsa4096/9823FAA60ED1E580\n     created: 2017-09-06  expires: never       usage: SC\n     trust: unknown       validity: unknown\n[ unknown] (1). Greenbone Community Feed integrity key\n\ngpg> trust\npub  rsa4096/9823FAA60ED1E580\n     created: 2017-09-06  expires: never       usage: SC\n     trust: unknown       validity: unknown\n[ unknown] (1). Greenbone Community Feed integrity key\n\nPlease decide how far you trust this user to correctly verify other users' keys\n(by looking at passports, checking fingerprints from different sources, etc.)\n\n  1 = I don't know or won't say\n  2 = I do NOT trust\n  3 = I trust marginally\n  4 = I trust fully\n  5 = I trust ultimately\n  m = back to the main menu\n\nYour decision? 5\nDo you really want to set this key to ultimate trust? (y/N) y\n\npub  rsa4096/9823FAA60ED1E580\n     created: 2017-09-06  expires: never       usage: SC\n     trust: ultimate      validity: unknown\n[ unknown] (1). Greenbone Community Feed integrity key\nPlease note that the shown key validity is not necessarily correct\nunless you restart the program.\n\ngpg> quit\n")])])]),s("h3",{attrs:{id:"specify-greenbone-vulnerability-manager-version"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#specify-greenbone-vulnerability-manager-version"}},[e._v("#")]),e._v(" Specify Greenbone Vulnerability Manager version")]),e._v(" "),s("p",[e._v("Set the GVM version to 21.4.2.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ export GVM_VERSION=21.4.2\n")])])]),s("h3",{attrs:{id:"build-gvm-libraries"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#build-gvm-libraries"}},[e._v("#")]),e._v(" Build GVM libraries")]),e._v(" "),s("p",[e._v("Download and build the "),s("a",{attrs:{href:"https://github.com/greenbone/gvm-libs",target:"_blank",rel:"noopener noreferrer"}},[e._v("GVM libraries"),s("OutboundLink")],1),e._v(" version 21.04 (21.4.1). Set the GVM libraries to same version as GVM.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ export GVM_LIBS_VERSION=$GVM_VERSION\n")])])]),s("p",[e._v("Download the specified GVM libraries version.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ curl -f -L https://github.com/greenbone/gvm-libs/archive/refs/tags/v$GVM_LIBS_VERSION.tar.gz -o $SOURCE_DIR/gvm-libs-$GVM_LIBS_VERSION.tar.gz\nserver@ubuntu:~$ curl -f -L https://github.com/greenbone/gvm-libs/releases/download/v$GVM_LIBS_VERSION/gvm-libs-$GVM_LIBS_VERSION.tar.gz.asc -o $SOURCE_DIR/gvm-libs-$GVM_LIBS_VERSION.tar.gz.asc\n")])])]),s("p",[e._v("Verify the GVM libraries.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ gpg --verify $SOURCE_DIR/gvm-libs-$GVM_LIBS_VERSION.tar.gz.asc $SOURCE_DIR/gvm-libs-$GVM_LIBS_VERSION.tar.gz\n")])])]),s("p",[e._v("Make sure the output says that the signature from Greenbone Community Feed is good.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('gpg: Signature made Tue 03 Aug 2021 12:11:44 PM UTC\ngpg:                using RSA key 8AE4BE429B60A59B311C2E739823FAA60ED1E580\ngpg: Good signature from "Greenbone Community Feed integrity key" [ultimate]\n')])])]),s("p",[e._v("Continue to extract the gvm-libs file.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ tar -C $SOURCE_DIR -xvzf $SOURCE_DIR/gvm-libs-$GVM_LIBS_VERSION.tar.gz\n")])])]),s("p",[e._v("Next create build folder for gvm-libs.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ mkdir -p $BUILD_DIR/gvm-libs && cd $BUILD_DIR/gvm-libs\n")])])]),s("p",[e._v("Proceed to build the gvm-libs source.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ cmake $SOURCE_DIR/gvm-libs-$GVM_LIBS_VERSION \\\n  -DCMAKE_INSTALL_PREFIX=$INSTALL_PREFIX \\\n  -DCMAKE_BUILD_TYPE=Release \\\n  -DSYSCONFDIR=/etc \\\n  -DLOCALSTATEDIR=/var \\\n  -DGVM_PID_DIR=/run/gvm\n")])])]),s("p",[e._v("Install gvm-libs by running the command below.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ make DESTDIR=$INSTALL_DIR install\n")])])]),s("p",[e._v("Finally clean up.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ sudo cp -rv $INSTALL_DIR/* /\nserver@ubuntu:~$ rm -rf $INSTALL_DIR/*\n")])])]),s("h3",{attrs:{id:"build-the-greenbone-vulnerability-manager"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#build-the-greenbone-vulnerability-manager"}},[e._v("#")]),e._v(" Build the Greenbone Vulnerability Manager")]),e._v(" "),s("p",[e._v("Next download and build the "),s("a",{attrs:{href:"https://github.com/greenbone/gvmd",target:"_blank",rel:"noopener noreferrer"}},[e._v("Greenbone Vulnerability Manager (GVM)"),s("OutboundLink")],1),e._v(" version 21.04 (21.4.3). Set the GVMD version to the latest realese 21.4.3.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ export GVMD_VERSION=21.4.3\n")])])]),s("p",[e._v("Proceed to download set version.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ curl -f -L https://github.com/greenbone/gvmd/archive/refs/tags/v$GVMD_VERSION.tar.gz -o $SOURCE_DIR/gvmd-$GVMD_VERSION.tar.gz\nserver@ubuntu:~$ curl -f -L https://github.com/greenbone/gvmd/releases/download/v$GVMD_VERSION/gvmd-$GVMD_VERSION.tar.gz.asc -o $SOURCE_DIR/gvmd-$GVMD_VERSION.tar.gz.asc\n")])])]),s("p",[e._v("Verify the GVMD download.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ gpg --verify $SOURCE_DIR/gvmd-$GVMD_VERSION.tar.gz.asc $SOURCE_DIR/gvmd-$GVMD_VERSION.tar.gz\n")])])]),s("p",[e._v("Make sure the output says that the signature from Greenbone Community Feed is good.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('gpg: Signature made Tue 03 Aug 2021 02:28:53 PM UTC\ngpg:                using RSA key 8AE4BE429B60A59B311C2E739823FAA60ED1E580\ngpg: Good signature from "Greenbone Community Feed integrity key" [ultimate]\n')])])]),s("p",[e._v("Extract the downloaded GVMD file.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ tar -C $SOURCE_DIR -xvzf $SOURCE_DIR/gvmd-$GVMD_VERSION.tar.gz\n")])])]),s("p",[e._v("Next create the build folder for GVMD.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ mkdir -p $BUILD_DIR/gvmd && cd $BUILD_DIR/gvmd\n")])])]),s("p",[e._v("Build GVMD running below command.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ cmake $SOURCE_DIR/gvmd-$GVMD_VERSION \\\n  -DCMAKE_INSTALL_PREFIX=$INSTALL_PREFIX \\\n  -DCMAKE_BUILD_TYPE=Release \\\n  -DLOCALSTATEDIR=/var \\\n  -DSYSCONFDIR=/etc \\\n  -DGVM_DATA_DIR=/var \\\n  -DGVM_RUN_DIR=/run/gvm \\\n  -DOPENVAS_DEFAULT_SOCKET=/run/ospd/ospd-openvas.sock \\\n  -DGVM_FEED_LOCK_PATH=/var/lib/gvm/feed-update.lock \\\n  -DSYSTEMD_SERVICE_DIR=/lib/systemd/system \\\n  -DDEFAULT_CONFIG_DIR=/etc/default \\\n  -DLOGROTATE_DIR=/etc/logrotate.d\n")])])]),s("p",[e._v("Install GVMD.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ make DESTDIR=$INSTALL_DIR install\n")])])]),s("p",[e._v("Clean up.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ sudo cp -rv $INSTALL_DIR/* /\nserver@ubuntu:~$ rm -rf $INSTALL_DIR/*\n")])])]),s("h3",{attrs:{id:"build-the-greenbone-security-assistant"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#build-the-greenbone-security-assistant"}},[e._v("#")]),e._v(" Build the Greenbone Security Assistant")]),e._v(" "),s("p",[e._v("Proceed to download and build the "),s("a",{attrs:{href:"https://github.com/greenbone/gsa",target:"_blank",rel:"noopener noreferrer"}},[e._v("Greenbone Security Assistant (GSA)"),s("OutboundLink")],1),e._v(" version 21.04 (21.4.2).")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ export GSA_VERSION=$GVM_VERSION\n")])])]),s("p",[e._v("Download Greenbone Security Assistant and its node modules.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ curl -f -L https://github.com/greenbone/gsa/archive/refs/tags/v$GSA_VERSION.tar.gz -o $SOURCE_DIR/gsa-$GSA_VERSION.tar.gz\nserver@ubuntu:~$ curl -f -L https://github.com/greenbone/gsa/releases/download/v$GSA_VERSION/gsa-$GSA_VERSION.tar.gz.asc -o $SOURCE_DIR/gsa-$GSA_VERSION.tar.gz.asc\nserver@ubuntu:~$ curl -f -L https://github.com/greenbone/gsa/releases/download/v$GSA_VERSION/gsa-node-modules-$GSA_VERSION.tar.gz -o $SOURCE_DIR/gsa-node-modules-$GSA_VERSION.tar.gz\nserver@ubuntu:~$ curl -f -L https://github.com/greenbone/gsa/releases/download/v$GSA_VERSION/gsa-node-modules-$GSA_VERSION.tar.gz.asc -o $SOURCE_DIR/gsa-node-modules-$GSA_VERSION.tar.gz.asc\n")])])]),s("p",[e._v("Once complete verify the GSA downloads and make sure the signature from Greenbone Community Feed is good.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ gpg --verify $SOURCE_DIR/gsa-$GSA_VERSION.tar.gz.asc $SOURCE_DIR/gsa-$GSA_VERSION.tar.gz\nserver@ubuntu:~$ gpg --verify $SOURCE_DIR/gsa-node-modules-$GSA_VERSION.tar.gz.asc $SOURCE_DIR/gsa-node-modules-$GSA_VERSION.tar.gz\n")])])]),s("p",[e._v("Extract the GSA and its node modules.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ tar -C $SOURCE_DIR -xvzf $SOURCE_DIR/gsa-$GSA_VERSION.tar.gz\nserver@ubuntu:~$ tar -C $SOURCE_DIR/gsa-$GSA_VERSION/gsa -xvzf $SOURCE_DIR/gsa-node-modules-$GSA_VERSION.tar.gz\n")])])]),s("p",[e._v("Proceed to create the GSA build folder.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ mkdir -p $BUILD_DIR/gsa && cd $BUILD_DIR/gsa\n")])])]),s("p",[e._v("Once you've created the build folder build the GSA source.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ cmake $SOURCE_DIR/gsa-$GSA_VERSION \\\n  -DCMAKE_INSTALL_PREFIX=$INSTALL_PREFIX \\\n  -DCMAKE_BUILD_TYPE=Release \\\n  -DSYSCONFDIR=/etc \\\n  -DLOCALSTATEDIR=/var \\\n  -DGVM_RUN_DIR=/run/gvm \\\n  -DGSAD_PID_DIR=/run/gvm \\\n  -DLOGROTATE_DIR=/etc/logrotate.d\n")])])]),s("p",[e._v("Next run the installation and clean up.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ make DESTDIR=$INSTALL_DIR install\nserver@ubuntu:~$ sudo cp -rv $INSTALL_DIR/* /\nserver@ubuntu:~$ rm -rf $INSTALL_DIR/*\n")])])]),s("h3",{attrs:{id:"build-the-openvas-smb-module"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#build-the-openvas-smb-module"}},[e._v("#")]),e._v(" Build the OpenVAS SMB module")]),e._v(" "),s("p",[e._v("Download and build the "),s("a",{attrs:{href:"https://github.com/greenbone/openvas-smb",target:"_blank",rel:"noopener noreferrer"}},[e._v("openvas-scanner (OpenVAS)"),s("OutboundLink")],1),e._v(" version 21.04.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ export OPENVAS_SMB_VERSION=21.4.0\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ curl -f -L https://github.com/greenbone/openvas-smb/archive/refs/tags/v$OPENVAS_SMB_VERSION.tar.gz -o $SOURCE_DIR/openvas-smb-$OPENVAS_SMB_VERSION.tar.gz\nserver@ubuntu:~$ curl -f -L https://github.com/greenbone/openvas-smb/releases/download/v$OPENVAS_SMB_VERSION/openvas-smb-$OPENVAS_SMB_VERSION.tar.gz.asc -o $SOURCE_DIR/openvas-smb-$OPENVAS_SMB_VERSION.tar.gz.asc\n")])])]),s("p",[e._v("Run the gpg command to verify the downloaded file.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ gpg --verify $SOURCE_DIR/openvas-smb-$OPENVAS_SMB_VERSION.tar.gz.asc $SOURCE_DIR/openvas-smb-$OPENVAS_SMB_VERSION.tar.gz\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('gpg: Signature made Fri 25 Jun 2021 06:36:43 AM UTC\ngpg:                using RSA key 8AE4BE429B60A59B311C2E739823FAA60ED1E580\ngpg: Good signature from "Greenbone Community Feed integrity key" [ultimate]\n')])])]),s("p",[e._v("Extract files.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ tar -C $SOURCE_DIR -xvzf $SOURCE_DIR/openvas-smb-$OPENVAS_SMB_VERSION.tar.gz\n")])])]),s("p",[e._v("Create the build folder.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ mkdir -p $BUILD_DIR/openvas-smb && cd $BUILD_DIR/openvas-smb\n")])])]),s("p",[e._v("Build openvas-smb to enable scans for Windows systems.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ cmake $SOURCE_DIR/openvas-smb-$OPENVAS_SMB_VERSION \\\n  -DCMAKE_INSTALL_PREFIX=$INSTALL_PREFIX \\\n  -DCMAKE_BUILD_TYPE=Release\n")])])]),s("p",[e._v("Proceed with installation.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ make DESTDIR=$INSTALL_DIR install\n")])])]),s("p",[e._v("Copy the installation and remove the temporary installation directory.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ sudo cp -rv $INSTALL_DIR/* /\nserver@ubuntu:~$ rm -rf $INSTALL_DIR/*\n")])])]),s("h3",{attrs:{id:"build-the-openvas-scanner"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#build-the-openvas-scanner"}},[e._v("#")]),e._v(" Build the OpenVAS Scanner")]),e._v(" "),s("p",[e._v("Download and build the "),s("a",{attrs:{href:"https://github.com/greenbone/openvas",target:"_blank",rel:"noopener noreferrer"}},[e._v("openvas-scanner (OpenVAS)"),s("OutboundLink")],1),e._v(" version 21.04 (21.4.1).")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ export OPENVAS_SCANNER_VERSION=$GVM_VERSION\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ curl -f -L https://github.com/greenbone/openvas-scanner/archive/refs/tags/v$OPENVAS_SCANNER_VERSION.tar.gz -o $SOURCE_DIR/openvas-scanner-$OPENVAS_SCANNER_VERSION.tar.gz\nserver@ubuntu:~$ curl -f -L https://github.com/greenbone/openvas-scanner/releases/download/v$OPENVAS_SCANNER_VERSION/openvas-scanner-$OPENVAS_SCANNER_VERSION.tar.gz.asc -o $SOURCE_DIR/openvas-scanner-$OPENVAS_SCANNER_VERSION.tar.gz.asc\n")])])]),s("p",[e._v("As prior verify the downloaded source file.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ gpg --verify $SOURCE_DIR/openvas-scanner-$OPENVAS_SCANNER_VERSION.tar.gz.asc $SOURCE_DIR/openvas-scanner-$OPENVAS_SCANNER_VERSION.tar.gz\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('gpg: Signature made Tue 03 Aug 2021 12:59:52 PM UTC\ngpg:                using RSA key 8AE4BE429B60A59B311C2E739823FAA60ED1E580\ngpg: Good signature from "Greenbone Community Feed integrity key" [ultimate]\n')])])]),s("p",[e._v("If all good proceed to extract the OpenVAS scanner.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ tar -C $SOURCE_DIR -xvzf $SOURCE_DIR/openvas-scanner-$OPENVAS_SCANNER_VERSION.tar.gz\n")])])]),s("p",[e._v("Create the OpenVAS scanner build directory.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ mkdir -p $BUILD_DIR/openvas-scanner && cd $BUILD_DIR/openvas-scanner\n")])])]),s("p",[e._v("Build the OpenVAS scanner.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ cmake $SOURCE_DIR/openvas-scanner-$OPENVAS_SCANNER_VERSION \\\n  -DCMAKE_INSTALL_PREFIX=$INSTALL_PREFIX \\\n  -DCMAKE_BUILD_TYPE=Release \\\n  -DSYSCONFDIR=/etc \\\n  -DLOCALSTATEDIR=/var \\\n  -DOPENVAS_FEED_LOCK_PATH=/var/lib/openvas/feed-update.lock \\\n  -DOPENVAS_RUN_DIR=/run/ospd\n")])])]),s("p",[e._v("Next install the scanner.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ make DESTDIR=$INSTALL_DIR install\n")])])]),s("p",[e._v("Finally clean up.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ sudo cp -rv $INSTALL_DIR/* /\nserver@ubuntu:~$ rm -rf $INSTALL_DIR/*\n")])])]),s("h3",{attrs:{id:"download-and-install-the-base-class-ospd-21-4-3-for-scanner-wrappers-and-ospd-openvas-for-remote-control"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#download-and-install-the-base-class-ospd-21-4-3-for-scanner-wrappers-and-ospd-openvas-for-remote-control"}},[e._v("#")]),e._v(" Download and install the base class ospd (21.4.3) for scanner wrappers and ospd-openvas for remote control")]),e._v(" "),s("p",[e._v("Proceed to download and install "),s("a",{attrs:{href:"https://github.com/greenbone/ospd",target:"_blank",rel:"noopener noreferrer"}},[e._v("ospd"),s("OutboundLink")],1),e._v(".")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ export OSPD_VERSION=21.4.3\nserver@ubuntu:~$ export OSPD_OPENVAS_VERSION=$GVM_VERSION\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ curl -f -L https://github.com/greenbone/ospd/archive/refs/tags/v$OSPD_VERSION.tar.gz -o $SOURCE_DIR/ospd-$OSPD_VERSION.tar.gz\nserver@ubuntu:~$ curl -f -L https://github.com/greenbone/ospd/releases/download/v$OSPD_VERSION/ospd-$OSPD_VERSION.tar.gz.asc -o $SOURCE_DIR/ospd-$OSPD_VERSION.tar.gz.asc\nserver@ubuntu:~$ curl -f -L https://github.com/greenbone/ospd-openvas/archive/refs/tags/v$OSPD_OPENVAS_VERSION.tar.gz -o $SOURCE_DIR/ospd-openvas-$OSPD_OPENVAS_VERSION.tar.gz\nserver@ubuntu:~$ curl -f -L https://github.com/greenbone/ospd-openvas/releases/download/v$OSPD_OPENVAS_VERSION/ospd-openvas-$OSPD_OPENVAS_VERSION.tar.gz.asc -o $SOURCE_DIR/ospd-openvas-$OSPD_OPENVAS_VERSION.tar.gz.asc\n")])])]),s("p",[e._v("Verify ospd and ospd-openvas.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ gpg --verify $SOURCE_DIR/ospd-$OSPD_VERSION.tar.gz.asc $SOURCE_DIR/ospd-$OSPD_VERSION.tar.gz\nserver@ubuntu:~$ gpg --verify $SOURCE_DIR/ospd-openvas-$OSPD_OPENVAS_VERSION.tar.gz.asc $SOURCE_DIR/ospd-openvas-$OSPD_OPENVAS_VERSION.tar.gz\n")])])]),s("p",[e._v("Continue by extracting both files.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ tar -C $SOURCE_DIR -xvzf $SOURCE_DIR/ospd-$OSPD_VERSION.tar.gz\nserver@ubuntu:~$ tar -C $SOURCE_DIR -xvzf $SOURCE_DIR/ospd-openvas-$OSPD_OPENVAS_VERSION.tar.gz\n")])])]),s("p",[e._v("Before you install ospd and ospd-openvas make sure that you've got the required version of python3-psutil (5.7.2).")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ pip install --upgrade psutil==5.7.2\n\n")])])]),s("p",[e._v("Once you've installed Python3-psutil 5.7.2 go to the source directory of ospd.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ cd $SOURCE_DIR/ospd-$OSPD_VERSION\n")])])]),s("p",[e._v("Run the installation.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ python3 -m pip install . --prefix=$INSTALL_PREFIX --root=$INSTALL_DIR\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("Successfully built ospd wrapt\nInstalling collected packages: wrapt, deprecated, ospd\nSuccessfully installed deprecated-1.2.12 ospd-21.4.3 wrapt-1.12.1\n")])])]),s("p",[e._v("Proceed to install ospd-openvas and go to its source directory.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ cd $SOURCE_DIR/ospd-openvas-$OSPD_OPENVAS_VERSION\n")])])]),s("p",[e._v("Run the ospd-openvas installation.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ python3 -m pip install . --prefix=$INSTALL_PREFIX --root=$INSTALL_DIR --no-warn-script-location\n")])])]),s("p",[e._v("Clean up.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ sudo cp -rv $INSTALL_DIR/* /\nserver@ubuntu:~$ rm -rf $INSTALL_DIR/*\n")])])]),s("h3",{attrs:{id:"build-the-gvm-tools"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#build-the-gvm-tools"}},[e._v("#")]),e._v(" Build the GVM tools")]),e._v(" "),s("p",[e._v("Install "),s("a",{attrs:{href:"https://github.com/greenbone/gvm-tools",target:"_blank",rel:"noopener noreferrer"}},[e._v("GVM tools"),s("OutboundLink")],1),e._v(" version 21.04 (21.6.1).")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ python3 -m pip install --user gvm-tools\n")])])]),s("h3",{attrs:{id:"configure-redis"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#configure-redis"}},[e._v("#")]),e._v(" Configure Redis")]),e._v(" "),s("p",[e._v("Next configure redis for the default GVM installation.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('server@ubuntu:~$ sudo cp $SOURCE_DIR/openvas-scanner-$GVM_VERSION/config/redis-openvas.conf /etc/redis/\nserver@ubuntu:~$ sudo chown redis:redis /etc/redis/redis-openvas.conf\nserver@ubuntu:~$ echo "db_address = /run/redis-openvas/redis.sock" | sudo tee -a /etc/openvas/openvas.conf\n')])])]),s("p",[e._v("Start the redis server and enable it as an start up service.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ sudo systemctl start redis-server@openvas.service\nserver@ubuntu:~$ sudo systemctl enable redis-server@openvas.service\n")])])]),s("p",[e._v("Add redis to the GVM group.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ sudo usermod -aG redis gvm\n")])])]),s("h3",{attrs:{id:"set-up-gvm-user-permissions"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#set-up-gvm-user-permissions"}},[e._v("#")]),e._v(" Set up GVM user permissions")]),e._v(" "),s("p",[e._v("Make sure that the GVM user and the GVM group has correct permissions.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ sudo chown -R gvm:gvm /var/lib/gvm\nserver@ubuntu:~$ sudo chown -R gvm:gvm /var/lib/openvas\nserver@ubuntu:~$ sudo chown -R gvm:gvm /var/log/gvm\nserver@ubuntu:~$ sudo chown -R gvm:gvm /run/gvm\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ sudo chmod -R g+srw /var/lib/gvm\nserver@ubuntu:~$ sudo chmod -R g+srw /var/lib/openvas\nserver@ubuntu:~$ sudo chmod -R g+srw /var/log/gvm\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ sudo chown gvm:gvm /usr/local/sbin/gvmd\nserver@ubuntu:~$ sudo chmod 6750 /usr/local/sbin/gvmd\n")])])]),s("p",[e._v("You also need to adjust the permissions for the feed synchronization.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ sudo chown gvm:gvm /usr/local/bin/greenbone-nvt-sync\nserver@ubuntu:~$ sudo chmod 740 /usr/local/sbin/greenbone-feed-sync\nserver@ubuntu:~$ sudo chown gvm:gvm /usr/local/sbin/greenbone-*-sync\nserver@ubuntu:~$ sudo chmod 740 /usr/local/sbin/greenbone-*-sync\n")])])]),s("p",[e._v("OpenVAS will be launched from an ospd-openvas process. The process need to be executed using root. Update the secure path in the sudoers file accordingly.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("div",{staticClass:"highlight-lines"},[s("br"),s("br"),s("br"),s("br"),s("div",{staticClass:"highlighted"},[e._v(" ")]),s("br")]),s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("# Allow members of group sudo to execute any command\n%sudo   ALL=(ALL:ALL) ALL\n\n# allow users of the gvm group run openvas\n%gvm ALL = NOPASSWD: /usr/local/sbin/openvas\n")])])]),s("h3",{attrs:{id:"configure-postgresql-database"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#configure-postgresql-database"}},[e._v("#")]),e._v(" Configure PostgreSQL database")]),e._v(" "),s("p",[e._v("For additional information see reference greenbone/gvmd "),s("a",{attrs:{href:"https://github.com/greenbone/gvmd/blob/master/INSTALL.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("INSTALL.md"),s("OutboundLink")],1),e._v(".")]),e._v(" "),s("p",[e._v("First make sure that the required dependencies have been installed (see "),s("a",{attrs:{href:"#prerequisites"}},[e._v("Prerequisites")]),e._v("). Proceed to create a Postgres user and database.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ sudo -u postgres bash\npostgres@ubuntu:/home/server$ createuser -DRS gvm\npostgres@ubuntu:/home/server$ createdb -O gvm gvmd\n")])])]),s("p",[e._v("Setup correct permissions.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("postgres@ubuntu:/home/server$ psql gvmd\ngvmd=# create role dba with superuser noinherit;\ngvmd=# grant dba to gvm;\n")])])]),s("p",[e._v("Create database extensions.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('gvmd=# create extension "uuid-ossp";\ngvmd=# create extension "pgcrypto";\ngvmd=# exit\npostgres@ubuntu:/home/server$ exit\n')])])]),s("h3",{attrs:{id:"create-gvm-admin"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#create-gvm-admin"}},[e._v("#")]),e._v(" Create GVM admin")]),e._v(" "),s("p",[e._v("Create the GVM administration user. Do not forget to change the password later.")]),e._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[e._v("NOTE")]),e._v(" "),s("p",[e._v("Do not use special characters in the password.")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ sudo /usr/local/sbin/gvmd --create-user=admin --password=admin\nUser created.\n")])])]),s("p",[e._v("Next, lets retrieve our administrators uuid.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("div",{staticClass:"highlight-lines"},[s("br"),s("div",{staticClass:"highlighted"},[e._v(" ")]),s("br")]),s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ sudo gvmd --get-users --verbose\nadmin 0279ba6c-391a-472f-8cbd-1f6eb808823b\n")])])]),s("p",[e._v("Use the administration uuid and modify the gvmd settings. Remember to put your uuid as the value option.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ sudo gvmd --modify-setting 78eceaec-3385-11ea-b237-28d24461215b --value UUID_HERE\n")])])]),s("h3",{attrs:{id:"update-network-vulnerability-tests"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#update-network-vulnerability-tests"}},[e._v("#")]),e._v(" Update Network Vulnerability Tests")]),e._v(" "),s("p",[e._v("Update Network Vulnerability Tests (NVT) from Greenbone Community Feed (this might take awhile).")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ sudo -u gvm greenbone-nvt-sync\n")])])]),s("h3",{attrs:{id:"update-greenbone-feed-synchronisation"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#update-greenbone-feed-synchronisation"}},[e._v("#")]),e._v(" Update Greenbone Feed synchronisation")]),e._v(" "),s("p",[e._v("Update the Greenbone feed synchronisation one at the time (this might take awhile).")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ sudo -u gvm greenbone-feed-sync --type GVMD_DATA\nserver@ubuntu:~$ sudo -u gvm greenbone-feed-sync --type SCAP\nserver@ubuntu:~$ sudo -u gvm greenbone-feed-sync --type CERT\n")])])]),s("h3",{attrs:{id:"generate-gvm-certificates"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#generate-gvm-certificates"}},[e._v("#")]),e._v(" Generate GVM certificates")]),e._v(" "),s("p",[e._v("Once we've finished the feed synchronisation generate GVM certificates.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ sudo -u gvm gvm-manage-certs -a\n")])])]),s("h3",{attrs:{id:"set-up-systemd"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#set-up-systemd"}},[e._v("#")]),e._v(" Set up systemd")]),e._v(" "),s("p",[e._v("Next setup the startup scripts. First, configure the Greenbone Manager startup script.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("cat << EOF > $BUILD_DIR/gvmd.service\n[Unit]\nDescription=Greenbone Vulnerability Manager daemon (gvmd)\nAfter=network.target networking.service postgresql.service ospd-openvas.service\nWants=postgresql.service ospd-openvas.service\nDocumentation=man:gvmd(8)\nConditionKernelCommandLine=!recovery\n\n[Service]\nType=forking\nUser=gvm\nGroup=gvm\nPIDFile=/run/gvm/gvmd.pid\nRuntimeDirectory=gvm\nRuntimeDirectoryMode=2775\nExecStart=/usr/local/sbin/gvmd --osp-vt-update=/run/ospd/ospd-openvas.sock --listen-group=gvm\nRestart=always\nTimeoutStopSec=10\n\n[Install]\nWantedBy=multi-user.target\nEOF\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ sudo cp $BUILD_DIR/gvmd.service /etc/systemd/system/\n")])])]),s("p",[e._v("Once the first startup script is saved, proceed to create the script for the Greenbone Security Assistant (GSA).")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("div",{staticClass:"highlight-lines"},[s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("div",{staticClass:"highlighted"},[e._v(" ")]),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br")]),s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("cat << EOF > $BUILD_DIR/gsad.service\n[Unit]\nDescription=Greenbone Security Assistant daemon (gsad)\nDocumentation=man:gsad(8) https://www.greenbone.net\nAfter=network.target gvmd.service\nWants=gvmd.service\n\n[Service]\nType=forking\nUser=gvm\nGroup=gvm\nPIDFile=/run/gvm/gsad.pid\nExecStart=/usr/local/sbin/gsad --listen=192.168.0.1 --port=9392\nRestart=always\nTimeoutStopSec=10\n\n[Install]\nWantedBy=multi-user.target\nAlias=greenbone-security-assistant.service\nEOF\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ sudo cp $BUILD_DIR/gsad.service /etc/systemd/system/\n")])])]),s("p",[e._v("Create the systemd service script for ospd-openvas.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("cat << EOF > $BUILD_DIR/ospd-openvas.service\n[Unit]\nDescription=OSPd Wrapper for the OpenVAS Scanner (ospd-openvas)\nDocumentation=man:ospd-openvas(8) man:openvas(8)\nAfter=network.target networking.service redis-server@openvas.service\nWants=redis-server@openvas.service\nConditionKernelCommandLine=!recovery\n\n[Service]\nType=forking\nUser=gvm\nGroup=gvm\nRuntimeDirectory=ospd\nRuntimeDirectoryMode=2775\nPIDFile=/run/ospd/ospd-openvas.pid\nExecStart=/usr/local/bin/ospd-openvas --unix-socket /run/ospd/ospd-openvas.sock --pid-file /run/ospd/ospd-openvas.pid --log-file /var/log/gvm/ospd-openvas.log --lock-file-dir /var/lib/openvas --socket-mode 0o770\nSuccessExitStatus=SIGKILL\nRestart=always\nRestartSec=60\n\n[Install]\nWantedBy=multi-user.target\nEOF\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ sudo cp $BUILD_DIR/ospd-openvas.service /etc/systemd/system/\n")])])]),s("h3",{attrs:{id:"modify-scanner"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#modify-scanner"}},[e._v("#")]),e._v(" Modify scanner")]),e._v(" "),s("p",[e._v("Before running vulnerability scans, also known as tasks, you need to modify the default OpenVAS scanner. Get the pre-exisiting scanners by running command below. Copy the UUID from the OpenVAS Default Scanner.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("div",{staticClass:"highlight-lines"},[s("br"),s("br"),s("div",{staticClass:"highlighted"},[e._v(" ")]),s("br")]),s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ sudo gvmd --get-scanners\n6acd0832-df90-11e4-b9d5-28d24461215b  CVE    0  CVE\n08b69003-5fc2-4037-a479-93b440211c73  OpenVAS  /opt/gvm/var/run/ospd.sock  0  OpenVAS Default\n")])])]),s("p",[e._v("Next run the modification command and attach the UUID to the scanner host socket.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ sudo gvmd --modify-scanner=08b69003-5fc2-4037-a479-93b440211c73 --scanner-host=/opt/gvm/var/run/ospd.sock\nScanner modified.\n")])])]),s("h3",{attrs:{id:"enable-and-start-services"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#enable-and-start-services"}},[e._v("#")]),e._v(" Enable and start services")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ sudo systemctl daemon-reload\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ sudo systemctl enable ospd-openvas\nserver@ubuntu:~$ sudo systemctl enable gvmd\nserver@ubuntu:~$ sudo systemctl enable gsad\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ sudo systemctl start ospd-openvas\nserver@ubuntu:~$ sudo systemctl start gvmd\nserver@ubuntu:~$ sudo systemctl start gsad\n")])])]),s("p",[e._v("Next check that all the services are running.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("div",{staticClass:"highlight-lines"},[s("div",{staticClass:"highlighted"},[e._v(" ")]),s("br"),s("br"),s("br"),s("div",{staticClass:"highlighted"},[e._v(" ")]),s("br"),s("br"),s("br"),s("div",{staticClass:"highlighted"},[e._v(" ")]),s("br"),s("br"),s("br"),s("br")]),s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ sudo systemctl status gvmd\n● gvmd.service - Greenbone Vulnerability Manager daemon (gvmd)\n     Loaded: loaded (/etc/systemd/system/gvmd.service; enabled; vendor preset: enabled)\n     Active: active (running) since Sat 2021-08-28 20:23:46 UTC; 54min ago\nserver@ubuntu:~$ sudo systemctl status gsad\n● gsad.service - Greenbone Security Assistant daemon (gsad)\n     Loaded: loaded (/etc/systemd/system/gsad.service; enabled; vendor preset: enabled)\n     Active: active (running) since Sat 2021-08-28 20:50:09 UTC; 28min ago\nserver@ubuntu:~$ sudo systemctl status ospd-openvas\n● ospd-openvas.service - OSPd Wrapper for the OpenVAS Scanner (ospd-openvas)\n     Loaded: loaded (/etc/systemd/system/ospd-openvas.service; enabled; vendor preset: enabled)\n     Active: active (running) since Sat 2021-08-28 20:48:04 UTC; 31min ago\n")])])]),s("p",[e._v("Login at your localhost e.g. "),s("code",[e._v("https://192.168.0.1:9392")]),e._v(" with the username "),s("code",[e._v("admin")]),e._v(" and the chosen password.")]),e._v(" "),s("img",{staticClass:"zoom-custom-imgs",attrs:{src:"/img/openvas/gsa_login-2.png",alt:"GSA login"}}),e._v(" "),s("p",[e._v("Once logged in, go to the "),s("em",[e._v("Administration")]),e._v(" tab and select "),s("em",[e._v("Feed Status")]),e._v(". You'll see that the update is in progress (this might take awhile). When the status changed to "),s("em",[e._v("current")]),e._v(", go to the dashboard and it will be populated with CVEs by creation time and NVTs by severity class.")]),e._v(" "),s("img",{staticClass:"zoom-custom-imgs",attrs:{src:"/img/openvas/gsa_dashboard.png",alt:"GSA dashboard"}}),e._v(" "),s("p",[e._v("You may also confirm the current version, go to the "),s("em",[e._v("Help")]),e._v(" tab and select "),s("em",[e._v("About")]),e._v(".")]),e._v(" "),s("img",{staticClass:"zoom-custom-imgs",attrs:{src:"/img/openvas/gsa_about.png",alt:"GSA about"}}),e._v(" "),s("p",[e._v("To run basic vulnerability scans and get hands-on approach to get started with OpenVAS check the "),s("a",{attrs:{href:"#running-vulnerability-scans"}},[e._v("Running vulnerability scans")]),e._v(" section.")]),e._v(" "),s("h2",{attrs:{id:"install-gvm-20-08-centos"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#install-gvm-20-08-centos"}},[e._v("#")]),e._v(" Install GVM 20.08 CentOS")]),e._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/Atomicorp/openvas",target:"_blank",rel:"noopener noreferrer"}},[e._v("Atomicorp GVM package"),s("OutboundLink")],1),e._v(" "),s("Badge",{attrs:{text:"non-sponsored",type:"default"}})],1),e._v(" "),s("p",[e._v("Check if SELinux is enabled.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("div",{staticClass:"highlight-lines"},[s("br"),s("div",{staticClass:"highlighted"},[e._v(" ")]),s("br"),s("br"),s("br"),s("br"),s("div",{staticClass:"highlighted"},[e._v(" ")]),s("br")]),s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@centos:~$ sestatus\nSELinux status:                 enabled\nSELinuxfs mount:                /sys/fs/selinux\nSELinux root directory:         /etc/selinux\nLoaded policy name:             targeted\nCurrent mode:                   enforcing\nMode from config file:          enforcing\n")])])]),s("p",[e._v("If enabled proceed to disable SELinux by running the command below and update the SELinux configuration file.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("div",{staticClass:"highlight-lines"},[s("div",{staticClass:"highlighted"},[e._v(" ")]),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("div",{staticClass:"highlighted"},[e._v(" ")]),s("br")]),s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@centos:~$ sudo setenforce 0\nserver@centos:~$ sudo nano /etc/selinux/config\n\n# This file controls the state of SELinux on the system.\n# SELINUX= can take one of these three values:\n#     enforcing - SELinux security policy is enforced.\n#     permissive - SELinux prints warnings instead of enforcing.\n#     disabled - No SELinux policy is loaded.\nSELINUX=disabled\n")])])]),s("p",[e._v("Save and reboot the system.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@centos:~$ sudo shutdown -r now\n")])])]),s("p",[e._v("Once the system rebooted control that SELinux been disabled.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@centos:~$ sestatus\nSELinux status:                 disabled\n")])])]),s("p",[e._v("Continue and download the Atomicorp installer.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("div",{staticClass:"highlight-lines"},[s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("div",{staticClass:"highlighted"},[e._v(" ")]),s("div",{staticClass:"highlighted"},[e._v(" ")]),s("br")]),s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@centos:~$ wget -q -O - https://updates.atomicorp.com/installers/atomic | sudo sh\n\nFor supported software packages please contact us at: \n\n  sales@atomicorp.com\n\nDo you agree to these terms? (yes/no) [Default: yes] yes\nEnable repo by default? (yes/no) [Default: yes]: yes\n")])])]),s("p",[e._v("Enable PowerTools and install extra packages.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@centos:~$ sudo yum config-manager --set-enabled PowerTools\nserver@centos:~$ sudo yum install epel-release\n")])])]),s("p",[e._v("Proceed and install GVM.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@centos:~$ sudo yum install gvm\n")])])]),s("p",[e._v("Finally run the GVM configuration script to setup GVM (this might take awhile).")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@centos:~$ sudo gvm-setup\n")])])]),s("p",[e._v("Once the GVM setup been complete proceed to set the administrator password.")]),e._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[e._v("NOTE")]),e._v(" "),s("p",[e._v("Do not use special characters in the password.")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("div",{staticClass:"highlight-lines"},[s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("div",{staticClass:"highlighted"},[e._v(" ")]),s("div",{staticClass:"highlighted"},[e._v(" ")]),s("br"),s("br"),s("br"),s("br")]),s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("Updating OpenVAS Manager certificates: Complete\n\nGVMD startup: Done\n\nSet the GSAD admin users password.\nThe admin user is used to configure accounts,\nUpdate NVT's manually, and manage roles.\n\nEnter Administrator Password:\nVerify Administrator Password:\n\nSetup complete\n  Log in to GSAD at https://localhost\n")])])]),s("p",[e._v("Login at your localhost e.g. "),s("code",[e._v("https://192.168.0.1")]),e._v(" with the username "),s("code",[e._v("admin")]),e._v(" and the chosen password.")]),e._v(" "),s("img",{staticClass:"zoom-custom-imgs",attrs:{src:"/img/openvas/gsa_dashboard.png",alt:"GSA dashboard"}}),e._v(" "),s("h2",{attrs:{id:"running-vulnerability-scans"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#running-vulnerability-scans"}},[e._v("#")]),e._v(" Running vulnerability scans")]),e._v(" "),s("p",[e._v("There is several approaches on how to configure and run tasks (scans) toward your targets (hosts) in GVM. In this tutorial we will go through how to run the more basic tasks. We will do both unauthenticated scans, where we do not grant GVM SSH access to our target, and authenticated scans to help identify internal server vulnerabilites or misconfigurations.")]),e._v(" "),s("h3",{attrs:{id:"unauthenticated-scan"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#unauthenticated-scan"}},[e._v("#")]),e._v(" Unauthenticated scan")]),e._v(" "),s("br"),e._v(" "),s("p",{attrs:{align:"center"}},[s("video",{staticStyle:{witdth:"100%",height:"auto"},attrs:{width:"600",controls:"",poster:"/img/icons/video.png"}},[s("source",{attrs:{src:"/vids/openvas/unauthenticated_scan.mp4",type:"video/mp4"}}),e._v("\n    Your browser does not support the video tag.\n  ")])]),e._v(" "),s("p",[e._v("Login to the Greenbone Security Assistant (GSA) e.g. "),s("code",[e._v("https://192.168.0.1")]),e._v(". Once logged in we will add our first target. Go the the "),s("em",[e._v("Configuration")]),e._v(" menu in the top navigation and select "),s("em",[e._v("Targets")]),e._v(".")]),e._v(" "),s("img",{staticClass:"zoom-custom-imgs",attrs:{src:"/img/openvas/gsa_targets.png",alt:"GSA targets"}}),e._v(" "),s("p",[e._v("In the top left corner of the "),s("em",[e._v("Targets")]),e._v(" view there's a starred document icon, click and select to create a "),s("em",[e._v("New Target")]),e._v(". Fill in the name of the target server e.g. "),s("em",[e._v("Ubuntu Client")]),e._v(" and its IP address "),s("code",[e._v("192.168.0.2")]),e._v(". Leave the rest of the settings in default.")]),e._v(" "),s("img",{staticClass:"zoom-custom-imgs",attrs:{src:"/img/openvas/gsa_target.png",alt:"GSA target"}}),e._v(" "),s("p",[e._v("Next we will create a task for unauthenticated targets (scans without SSH access). Go the "),s("em",[e._v("Scans")]),e._v(" in the top menu and select "),s("em",[e._v("Tasks")]),e._v(".")]),e._v(" "),s("img",{staticClass:"zoom-custom-imgs",attrs:{src:"/img/openvas/gsa_tasks.png",alt:"GSA tasks"}}),e._v(" "),s("p",[e._v("Click the starred document icon in the top left corner of the "),s("em",[e._v("Tasks")]),e._v(" view.")]),e._v(" "),s("img",{staticClass:"zoom-custom-imgs",attrs:{src:"/img/openvas/gsa_task.png",alt:"GSA task"}}),e._v(" "),s("p",[e._v("Select a descriptive name for your task e.g. Unauthenticated scan. In the "),s("em",[e._v("Scan Targets")]),e._v(" dropdown menu select your target we created before (Ubuntu Client). Leave the default settings and click save.")]),e._v(" "),s("img",{staticClass:"zoom-custom-imgs",attrs:{src:"/img/openvas/gsa_noauth_task.png",alt:"GSA noauth task"}}),e._v(" "),s("p",[e._v("You will then be redirected back to the "),s("em",[e._v("Tasks")]),e._v(" overview and our new task will be listed in the table below the graphs. To start the scan press the start button on the right side of the table.")]),e._v(" "),s("img",{staticClass:"zoom-custom-imgs",attrs:{src:"/img/openvas/gsa_noauth_scan.png",alt:"GSA noauth scan"}}),e._v(" "),s("h3",{attrs:{id:"authenticated-scan"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#authenticated-scan"}},[e._v("#")]),e._v(" Authenticated scan")]),e._v(" "),s("p",[e._v("First make sure that you've generated SSH keys for your GVM client user e.g. "),s("code",[e._v("client@ubuntu")]),e._v(". Add your public key to the targets authorized keys file. You may have to connect to your target host, through SSH, before running GVM vulnerability scan to add the target host to your clients machine known hosts. Once you've established a secure communication between your client and target, proceed to configure credentials in the Greenbone Security Assistant. Go to "),s("em",[e._v("Configuration")]),e._v(" and select "),s("em",[e._v("Credentials")]),e._v(".")]),e._v(" "),s("img",{staticClass:"zoom-custom-imgs",attrs:{src:"/img/openvas/gsa_credentials.png",alt:"GSA credentials"}}),e._v(" "),s("p",[e._v("Next click the starred document in the top left corner to create your new credentials. Give the credentials a desciptive name with an optional comment. In the dropdown menu "),s("em",[e._v("Type")]),e._v(", select "),s("em",[e._v("Username + SSH key")]),e._v(" and disallow insecure use and auto-generation. Add the username of the target host user followed by the password and upload the private key (e.g. id_rsa). Click save.")]),e._v(" "),s("img",{staticClass:"zoom-custom-imgs",attrs:{src:"/img/openvas/gsa_newcredentials.png",alt:"GSA new credentials"}}),e._v(" "),s("p",[e._v("Go to the "),s("em",[e._v("Targets")]),e._v(" section and either edit your "),s("a",{attrs:{href:"#unauthenticated-scan"}},[e._v("unauthenticated scan")]),e._v(" or create a new target. Set the host IP address and in the dropdown menu, under the "),s("em",[e._v("Credentials for authentication checks")]),e._v(", select your newly created SSH credential.")]),e._v(" "),s("img",{staticClass:"zoom-custom-imgs",attrs:{src:"/img/openvas/gsa_auth_target.png",alt:"GSA auth target"}}),e._v(" "),s("p",[e._v("Finally create a new task and select the target that we attached our credentials to and leave the default settings.")]),e._v(" "),s("img",{staticClass:"zoom-custom-imgs",attrs:{src:"/img/openvas/gsa_auth_task.png",alt:"GSA auth task"}}),e._v(" "),s("h2",{attrs:{id:"two-factor-authentication-w-privacyidea"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#two-factor-authentication-w-privacyidea"}},[e._v("#")]),e._v(" Two-factor authentication w/ privacyIDEA")]),e._v(" "),s("p",[e._v("To enforce two-factor authentication for Greenbone Security Assistant with privacyIDEA and YubiKey read the "),s("RouterLink",{attrs:{to:"/privacyidea/"}},[e._v("Two-factor authentication w/ privacyIDEA and YubiKey")]),e._v(" chapter.")],1),e._v(" "),s("h2",{attrs:{id:"install-openvas-9-community-version"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#install-openvas-9-community-version"}},[e._v("#")]),e._v(" Install OpenVAS-9 community version "),s("Badge",{attrs:{text:"deprecated",type:"warning"}})],1),e._v(" "),s("p",[e._v("First add the OpenVAS PPA repository to your server.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ sudo add-apt-repository ppa:mrazavi/openvas\n")])])]),s("p",[e._v("Next we need to update and install the main packages.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ sudo apt-get update\nserver@ubuntu:~$ sudo apt-get install openvas9\n")])])]),s("p",[e._v("We will also install the OpenVAS9 dev package so we can run single OpenVAS nasl scripts, for fast troubleshooting. Additionaly we will also be adding the vulnerability data by syncing with the Greenbone feeds.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ sudo apt-get install libopenvas9-dev\nserver@ubuntu:~$ sudo greenbone-nvt-sync\nserver@ubuntu:~$ sudo greenbone-scapdata-sync\nserver@ubuntu:~$ sudo greenbone-certdata-sync\n")])])]),s("p",[e._v("To keep OpenVAS up-to-date to run the latest tests, we need to sync the nvt, scap and cert data regularly. To achieve this we will create a script and add it to our cron.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ sudo nano /usr/local/bin/openvas-update\n")])])]),s("p",[e._v("Add the following content to the openvas-update file.")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("/usr/sbin/greenbone-nvt-sync\n/usr/sbin/greenbone-certdata-sync\n/usr/sbin/greenbone-scapdata-sync\n/usr/sbin/openvasmd --update --verbose --progress\n/etc/init.d/openvas-manager restart\n/etc/init.d/openvas-scanner restart\n")])])]),s("p",[e._v("Save the file and make it executable.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ sudo chmod a+x /usr/local/bin/openvas-update\n")])])]),s("p",[e._v("We will add the update script to cron with a nightly frequency.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("Nightly 0 0 * * * root /usr/local/bin/openvas-update\n")])])]),s("h2",{attrs:{id:"gvm-behind-nginx-proxy"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gvm-behind-nginx-proxy"}},[e._v("#")]),e._v(" GVM behind NGINX Proxy")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ sudo nano /etc/default/openvas-gsa\n")])])]),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Defaults for Greenbone Security Assistant initscript")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# sourced by /etc/init.d/openvas-gsa")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# installed at /etc/default/openvas-gsa by the maintainer scripts")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# To disable HTTPS:")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#HTTP_ONLY=1")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# To allow <host> as hostname/address part of a Host header:")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("ALLOW_HEADER_HOST")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("openvas.example.com\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# To enable http redirection:")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("HTTP_REDIRECT")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# To set listening address:")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("LISTEN_ADDRESS")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"127.0.0.1"')]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# To set listening port number:")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("PORT_NUMBER")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("4000")]),e._v("\n")])])]),s("p",[e._v("Restart openvas-gsa "),s("code",[e._v("sudo systemctl restart openvas-gsa")]),e._v(". Edit the NGINX configuration to fit the environment.")]),e._v(" "),s("div",{staticClass:"language-nginx extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nginx"}},[s("code",[s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("server")])]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("listen")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("443")]),e._v(" ssl http2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("listen")]),e._v(" [::]:443 ssl http2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("server_name")]),e._v(" openvas.example.com")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# SSL CERTIFICATES")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("ssl_certificate")]),e._v(" /etc/nginx/ssl/openvas.example.com/server.crt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("ssl_certificate_key")]),e._v(" /etc/nginx/ssl/openvas.example.com/server.key")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("ssl_protocols")]),e._v(" TLSv1.2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("ssl_ciphers")]),e._v(" ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("ssl_prefer_server_ciphers")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("on")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("ssl_dhparam")]),e._v(" /etc/nginx/dhparams.pem")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("add_header")]),e._v(" X-Frame-Options "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"SAMEORIGIN"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("add_header")]),e._v(" X-XSS-Protection "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"1; mode=block"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("add_header")]),e._v(" X-Content-Type-Options "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"nosniff"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("index")]),e._v(" index.html index.htm index.php")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("charset")]),e._v(" utf-8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("location")]),e._v(" /")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n        "),s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("proxy_set_header")]),e._v("   Host             "),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$http_host")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n        "),s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("proxy_set_header")]),e._v("   X-Real-IP        "),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$remote_addr")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n        "),s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("proxy_set_header")]),e._v("   REMOTE_HOST      "),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$remote_addr")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n        "),s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("proxy_set_header")]),e._v("   X-Forwarded-For  "),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$proxy_add_x_forwarded_for")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n        "),s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("proxy_set_header")]),e._v("   X-FORWARDED-PROTOCOL "),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$scheme")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("  \n        "),s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("proxy_pass")]),e._v(" https://127.0.0.1:4000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n\n   "),s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("location")]),e._v(" = /favicon.ico")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("access_log")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("off")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("log_not_found")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("off")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n   "),s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("location")]),e._v(" = /robots.txt")]),e._v("  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("access_log")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("off")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("log_not_found")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("off")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n\n   "),s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("access_log")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("off")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n   "),s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("error_log")]),e._v("  /var/log/nginx/openvas.example.com-error.log error")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n   "),s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("location")]),e._v(" ~ /\\.(?!well-known).*")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n       "),s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("deny")]),e._v(" all")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ sudo systemctl reload nginx.service\n")])])]),s("h2",{attrs:{id:"scheduled-jobs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#scheduled-jobs"}},[e._v("#")]),e._v(" Scheduled jobs")]),e._v(" "),s("p",[e._v("To keep the community feed up-to-date, first login as your GVM user.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ sudo su - gvm\n")])])]),s("p",[e._v("Create the file that we will populate with the required commands.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("gvm@ubuntu:~$ touch /opt/gvm/bin/openvas-update\n")])])]),s("p",[e._v("Make the file executable.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("gvm@ubuntu:~$ chmod a+x /opt/gvm/bin/openvas-update\n")])])]),s("p",[e._v("Enter the commands that we will run daily.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("gvm@ubuntu:~$ nano /opt/gvm/bin/openvas-update\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("/opt/gvm/bin/greenbone-nvt-sync\n/opt/gvm/sbin/greenbone-feed-sync --type GVMD_DATA\n/opt/gvm/sbin/greenbone-feed-sync --type SCAP\n/opt/gvm/sbin/greenbone-feed-sync --type CERT\n")])])]),s("p",[e._v("Edit the GVM users crontab and add the script we created to check for daily updates.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("gvm@ubuntu:~$ crontab -e\n")])])]),s("div",{staticClass:"language-bash extra-class"},[s("div",{staticClass:"highlight-lines"},[s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("div",{staticClass:"highlighted"},[e._v(" ")]),s("br")]),s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Edit this file to introduce tasks to be run by cron.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Each task to run has to be defined through a single line")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# indicating with different fields when the task will be run")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# and what command to run for the task")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# To define the time you can provide concrete values for")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# minute (m), hour (h), day of month (dom), month (mon),")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# and day of week (dow) or use '*' in these fields (for 'any').")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Notice that tasks will be started based on the cron's system")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# daemon's notion of time and timezones.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Output of the crontab jobs (including errors) is sent through")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# email to the user the crontab file belongs to (unless redirected).")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# For example, you can run a backup of all your user accounts")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# at 5 a.m every week with:")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 0 5 * * 1 tar -zcf /var/backups/home.tgz /home/")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# For more information see the manual pages of crontab(5) and cron(8)")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# m h  dom mon dow   command")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v(" * * * /opt/gvm/bin/openvas-update\n")])])]),s("h2",{attrs:{id:"troubleshooting"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#troubleshooting"}},[e._v("#")]),e._v(" Troubleshooting")]),e._v(" "),s("p",[e._v("If you encounter any issue or having questions regarding Greenbone Vulnerability Manager, I recommend using their helpful "),s("a",{attrs:{href:"https://community.greenbone.net/",target:"_blank",rel:"noopener noreferrer"}},[e._v("community forum"),s("OutboundLink")],1),e._v(".")]),e._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/libellux/Libellux-Up-and-Running/issues/new/choose",target:"_blank",rel:"noopener noreferrer"}},[e._v("Questions"),s("OutboundLink")],1),e._v(", "),s("a",{attrs:{href:"https://github.com/libellux/Libellux-Up-and-Running/issues/new/choose",target:"_blank",rel:"noopener noreferrer"}},[e._v("comments"),s("OutboundLink")],1),e._v(", or "),s("a",{attrs:{href:"https://github.com/libellux/Libellux-Up-and-Running/issues/new/choose",target:"_blank",rel:"noopener noreferrer"}},[e._v("problems"),s("OutboundLink")],1),e._v(" regarding this service? Create an issue "),s("a",{attrs:{href:"https://github.com/libellux/Libellux-Up-and-Running/issues/new/choose",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),s("OutboundLink")],1),e._v(" or contact "),s("a",{attrs:{href:"mailto:webmaster@libellux.com"}},[e._v("webmaster@libellux.com")]),e._v(".")]),e._v(" "),s("h3",{attrs:{id:"sec-error-inadequate-key-usage"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sec-error-inadequate-key-usage"}},[e._v("#")]),e._v(" SEC_ERROR_INADEQUATE_KEY_USAGE")]),e._v(" "),s("p",[e._v("If receiving "),s("code",[e._v("SEC_ERROR_INADEQUATE_KEY_USAGE")]),e._v(" and the browser blocks access to the local GVM server, proceed with removing the certificate. For example, in Firefox go to "),s("code",[e._v("about:preferences#privacy")]),e._v(" and the certificate section. Select Show certificates, click the Servers tab and remove the certificates found under GVM Users.")]),e._v(" "),s("h3",{attrs:{id:"failed-to-find-interpreter-for-python-3-7"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#failed-to-find-interpreter-for-python-3-7"}},[e._v("#")]),e._v(" Failed to find interpreter for Python 3.7")]),e._v(" "),s("p",[e._v("If receiving "),s("code",[e._v("RuntimeError: failed to find interpreter for Builtin discover of python_spec='python3.7'")]),e._v(" make sure you've followed the instructions to install the required 3.7 packages.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ sudo add-apt-repository ppa:deadsnakes/ppa\nserver@ubuntu:~$ sudo apt-get update\nserver@ubuntu:~$ sudo apt-get install python3.7 python3.7-dev\n")])])]),s("h2",{attrs:{id:"enterprise-solutions"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#enterprise-solutions"}},[e._v("#")]),e._v(" Enterprise solutions "),s("Badge",{attrs:{text:"non-sponsored",type:"default"}})],1),e._v(" "),s("h3",{attrs:{id:"the-greenbone-security-manager"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#the-greenbone-security-manager"}},[e._v("#")]),e._v(" The Greenbone Security Manager")]),e._v(" "),s("p",[e._v("The Greenbone Security Manager (GSM) is an appliance for vulnerability scanning and management. It is offered in various performance levels and basically supports an unlimited number of target systems. The actually achievable number depends on the scan pattern and scan targets. For finding the right model for your purpose, we provide reference values for the number of target IP addresses below, assuming a common scenario with a scan every 24 hours.")]),e._v(" "),s("p",[s("a",{attrs:{href:"https://www.greenbone.net/en/product-comparison/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Greenbone Security Manager"),s("OutboundLink")],1)]),e._v(" "),s("p",[s("a",{attrs:{href:"https://ko-fi.com/B0B31BJU3",target:"_blank",rel:"noopener noreferrer"}},[s("img",{attrs:{src:"https://www.ko-fi.com/img/githubbutton_sm.svg",alt:"ko-fi"}}),s("OutboundLink")],1)]),e._v(" "),s("social-share")],1)}),[],!1,null,null,null);t.default=n.exports}}]);