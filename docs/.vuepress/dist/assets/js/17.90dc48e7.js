(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{396:function(e,t,s){"use strict";s.r(t);var a=s(11),n=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"greenbone-vulnerability-manager-openvas"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#greenbone-vulnerability-manager-openvas"}},[e._v("#")]),e._v(" Greenbone Vulnerability Manager (OpenVAS)")]),e._v(" "),s("TagLinks"),e._v(" "),s("p",[e._v("OpenVAS is a full-featured vulnerability scanner. Its capabilities include unauthenticated testing, authenticated testing, various high level and low level Internet and industrial protocols, performance tuning for large-scale scans and a powerful internal programming language to implement any type of vulnerability test.")]),e._v(" "),s("p",[s("a",{attrs:{href:"https://www.greenbone.net/en/vulnerability-management/",target:"_blank",rel:"noopener noreferrer"}},[e._v("GVM website"),s("OutboundLink")],1),e._v(" "),s("a",{attrs:{href:"https://www.openvas.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("OpenVAS website"),s("OutboundLink")],1),e._v(" "),s("a",{attrs:{href:"https://github.com/greenbone/openvas",target:"_blank",rel:"noopener noreferrer"}},[e._v("GitHub"),s("OutboundLink")],1)]),e._v(" "),s("p",[e._v("Setup and configuration has been tested on the following operating systems:")]),e._v(" "),s("ul",[s("li",[e._v("Ubuntu- 16.04, 18.04, 20.04, CentOS 8")]),e._v(" "),s("li",[e._v("GVM 20.08 for Debian 10 visit "),s("a",{attrs:{href:"https://sadsloth.net/post/install-gvm-20_08-src-on-debian/",target:"_blank",rel:"noopener noreferrer"}},[e._v("sadsloth.net"),s("OutboundLink")],1),e._v(".")]),e._v(" "),s("li",[e._v("GVM-9 (OpenVAS-9), Atomicorp 20.08 (RHEL 8, CentOS 8, Fedora 32), GVM- 20.08, 20.08.1, 21.04")])]),e._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[e._v("NOTE")]),e._v(" "),s("p",[e._v("GVM-9 (OpenVAS-9) reached end-of-life support. GVM 10 and 11 will reach end-of-life support in the end of 2020.")])]),e._v(" "),s("h2",{attrs:{id:"configuration-files"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#configuration-files"}},[e._v("#")]),e._v(" Configuration files")]),e._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[e._v("INFO")]),e._v(" "),s("p",[e._v('The lines in the "script" below has been used for testing and successfully configure GVM 20.08.1.\nYou may use the testing guide to install GVM or follow our detailed step-by-step tutorial below to install GVM 21.04.')])]),e._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://github.com/libellux/Libellux-Up-and-Running/blob/master/docs/openvas/config/20_08_1.sh",target:"_blank",rel:"noopener noreferrer"}},[e._v("20.08.1"),s("OutboundLink")],1)])]),e._v(" "),s("h2",{attrs:{id:"prerequisites"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#prerequisites"}},[e._v("#")]),e._v(" Prerequisites")]),e._v(" "),s("p",[e._v("Dependencies required to install GVM 21.04 from source on Ubuntu 20.04:")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("build-essential")])]),e._v(" "),s("li",[s("code",[e._v("cmake")])]),e._v(" "),s("li",[s("code",[e._v("gnutls-bin")])]),e._v(" "),s("li",[s("code",[e._v("pkg-config")])]),e._v(" "),s("li",[s("code",[e._v("glib2.0")])]),e._v(" "),s("li",[s("code",[e._v("libgnutls28-dev")])]),e._v(" "),s("li",[s("code",[e._v("libssh-dev")])]),e._v(" "),s("li",[s("code",[e._v("libssl-dev")])]),e._v(" "),s("li",[s("code",[e._v("libhiredis-dev")])]),e._v(" "),s("li",[s("code",[e._v("redis-server")])]),e._v(" "),s("li",[s("code",[e._v("libxml2-dev")])]),e._v(" "),s("li",[s("code",[e._v("doxygen")])]),e._v(" "),s("li",[s("code",[e._v("xsltproc")])]),e._v(" "),s("li",[s("code",[e._v("libldap2-dev")])]),e._v(" "),s("li",[s("code",[e._v("libgcrypt-dev")])]),e._v(" "),s("li",[s("code",[e._v("libpcap-dev")])]),e._v(" "),s("li",[s("code",[e._v("libgpgme-dev")])]),e._v(" "),s("li",[s("code",[e._v("libradcli-dev")])]),e._v(" "),s("li",[s("code",[e._v("graphviz")])]),e._v(" "),s("li",[s("code",[e._v("bison")])]),e._v(" "),s("li",[s("code",[e._v("libksba-dev")])]),e._v(" "),s("li",[s("code",[e._v("libical-dev")])]),e._v(" "),s("li",[s("code",[e._v("libpq-dev")])]),e._v(" "),s("li",[s("code",[e._v("postgresql")])]),e._v(" "),s("li",[s("code",[e._v("postgresql-contrib")])]),e._v(" "),s("li",[s("code",[e._v("postgresql-server-dev-all")])]),e._v(" "),s("li",[s("code",[e._v("libopenvas-dev")])]),e._v(" "),s("li",[s("code",[e._v("heimdal-dev")])]),e._v(" "),s("li",[s("code",[e._v("libpopt-dev")])]),e._v(" "),s("li",[s("code",[e._v("xmltoman")])]),e._v(" "),s("li",[s("code",[e._v("gcc-mingw-w64")])]),e._v(" "),s("li",[s("code",[e._v("nmap")])]),e._v(" "),s("li",[s("code",[e._v("npm")])]),e._v(" "),s("li",[s("code",[e._v("nodejs")])]),e._v(" "),s("li",[s("code",[e._v("libpthread-stubs0-dev")])]),e._v(" "),s("li",[s("code",[e._v("clang-format")])]),e._v(" "),s("li",[s("code",[e._v("libmicrohttpd-dev")])]),e._v(" "),s("li",[s("code",[e._v("yarn")])]),e._v(" "),s("li",[s("code",[e._v("virtualenv")])]),e._v(" "),s("li",[s("code",[e._v("python3-paramiko")])]),e._v(" "),s("li",[s("code",[e._v("python3-lxml")])]),e._v(" "),s("li",[s("code",[e._v("python3-defusedxml")])]),e._v(" "),s("li",[s("code",[e._v("python3-pip")])]),e._v(" "),s("li",[s("code",[e._v("python3-psutil")])]),e._v(" "),s("li",[s("code",[e._v("libnet1-dev")])])]),e._v(" "),s("h2",{attrs:{id:"install-gvm-21-04-from-source"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#install-gvm-21-04-from-source"}},[e._v("#")]),e._v(" Install GVM 21.04 from source "),s("Badge",{attrs:{text:"Rev 5",type:"default"}})],1),e._v(" "),s("p",[e._v("Before we will install the latest version of Greenbone Vulnerability Manager (GVM) 21.04 make sure your system is up-to-date.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ sudo apt-get update\nserver@ubuntu:~$ sudo apt-get upgrade\n")])])]),s("p",[e._v("Proceed to install all the dependencies for GVM 21.04 on Ubuntu 20.04.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ sudo apt-get install build-essential\nserver@ubuntu:~$ sudo apt-get install cmake pkg-config glib2.0 gcc-mingw-w64 gnutls-bin libgnutls28-dev libxml2-dev libssh-dev libssl-dev libldap2-dev libgcrypt-dev libpcap-dev libgpgme-dev libradcli-dev libksba-dev libical-dev libpq-dev libopenvas-dev libpopt-dev libmicrohttpd-dev redis-server libhiredis-dev doxygen xsltproc graphviz bison postgresql postgresql-contrib postgresql-server-dev-all heimdal-dev xmltoman nmap npm nodejs virtualenv python3-paramiko python3-lxml python3-defusedxml python3-pip python3-psutil libnet1-dev\n")])])]),s("p",[e._v("Once we've installed all the dependencies update our package manager.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ sudo apt-get update\n")])])]),s("p",[e._v("Continue to install yarn using npm with the specified installation path.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ sudo npm install -g yarn --prefix /usr/\n")])])]),s("h3",{attrs:{id:"set-up-gvm-user-profile"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#set-up-gvm-user-profile"}},[e._v("#")]),e._v(" Set up GVM user profile")]),e._v(" "),s("p",[e._v("Create the profile for the GVM (Greenbone Vulnerability Manager) user and set the export path.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ echo 'export PATH=\"$PATH:/opt/gvm/bin:/opt/gvm/sbin:/opt/gvm/.local/bin\"' | sudo tee -a /etc/profile.d/gvm.sh\nserver@ubuntu:~$ sudo chmod 0755 /etc/profile.d/gvm.sh\nserver@ubuntu:~$ source /etc/profile.d/gvm.sh\n")])])]),s("h3",{attrs:{id:"create-dynamic-loader-configuration-file"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#create-dynamic-loader-configuration-file"}},[e._v("#")]),e._v(" Create dynamic loader configuration file")]),e._v(" "),s("p",[e._v("Now create the "),s("code",[e._v("gvm.conf")]),e._v(" for the dynamic loader and define the gvm-libs path.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ sudo nano /etc/ld.so.conf.d/gvm.conf\n# gmv-libs location\n/opt/gvm/lib\n")])])]),s("h3",{attrs:{id:"create-the-gvm-user"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#create-the-gvm-user"}},[e._v("#")]),e._v(" Create the GVM user")]),e._v(" "),s("p",[e._v("Once saved, proceed to create and configure the GVM user.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ sudo mkdir /opt/gvm\nserver@ubuntu:~$ sudo adduser gvm --disabled-password --home /opt/gvm/ --no-create-home --gecos ''\nserver@ubuntu:~$ sudo usermod -aG redis gvm\nserver@ubuntu:~$ sudo chown gvm:gvm /opt/gvm/\nserver@ubuntu:~$ sudo su - gvm\n")])])]),s("h3",{attrs:{id:"create-source-build-directory"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#create-source-build-directory"}},[e._v("#")]),e._v(" Create source build directory")]),e._v(" "),s("p",[e._v("Run the command "),s("code",[e._v("pwd")]),e._v(" and you should now be in the "),s("code",[e._v("/opt/gvm/")]),e._v(" directory. Create the source directory, where we will download and build all required packages and set the package configuration path.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("gvm@ubuntu:~$ mkdir src\ngvm@ubuntu:~$ cd src/\ngvm@ubuntu:~$ export PKG_CONFIG_PATH=/opt/gvm/lib/pkgconfig:$PKG_CONFIG_PATH\n")])])]),s("h3",{attrs:{id:"build-gvm-libraries"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#build-gvm-libraries"}},[e._v("#")]),e._v(" Build GVM Libraries")]),e._v(" "),s("p",[e._v("Download and build the "),s("a",{attrs:{href:"https://github.com/greenbone/gvm-libs",target:"_blank",rel:"noopener noreferrer"}},[e._v("GVM Libraries"),s("OutboundLink")],1),e._v(" version 21.04.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("gvm@ubuntu:~$ git clone -b gvm-libs-21.04 --single-branch https://github.com/greenbone/gvm-libs.git\ngvm@ubuntu:~$ cd gvm-libs/\ngvm@ubuntu:~$ export PKG_CONFIG_PATH=/opt/gvm/lib/pkgconfig:$PKG_CONFIG_PATH\ngvm@ubuntu:~$ mkdir build\ngvm@ubuntu:~$ cd build\ngvm@ubuntu:~$ cmake -DCMAKE_INSTALL_PREFIX=/opt/gvm ..\ngvm@ubuntu:~$ make\ngvm@ubuntu:~$ make doc\ngvm@ubuntu:~$ make install\ngvm@ubuntu:~$ cd /opt/gvm/src/\n")])])]),s("h3",{attrs:{id:"build-the-openvas-scanner"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#build-the-openvas-scanner"}},[e._v("#")]),e._v(" Build the OpenVAS Scanner")]),e._v(" "),s("p",[e._v("Download and build the "),s("a",{attrs:{href:"https://github.com/greenbone/openvas",target:"_blank",rel:"noopener noreferrer"}},[e._v("openvas-scanner (OpenVAS)"),s("OutboundLink")],1),e._v(" version 21.04.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("gvm@ubuntu:~$ git clone -b openvas-21.04 --single-branch https://github.com/greenbone/openvas.git\ngvm@ubuntu:~$ cd openvas/\ngvm@ubuntu:~$ export PKG_CONFIG_PATH=/opt/gvm/lib/pkgconfig:$PKG_CONFIG_PATH\ngvm@ubuntu:~$ mkdir build\ngvm@ubuntu:~$ cd build/\ngvm@ubuntu:~$ cmake -DCMAKE_INSTALL_PREFIX=/opt/gvm ..\ngvm@ubuntu:~$ make\ngvm@ubuntu:~$ make doc\ngvm@ubuntu:~$ make install\ngvm@ubuntu:~$ exit\n")])])]),s("h3",{attrs:{id:"configure-redis"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#configure-redis"}},[e._v("#")]),e._v(" Configure Redis")]),e._v(" "),s("p",[e._v("Next configure redis for the default GVM installation.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('server@ubuntu:~$ sudo su\nroot@ubuntu:~$ export LC_ALL="C"\nroot@ubuntu:~$ ldconfig\nroot@ubuntu:~$ cp /etc/redis/redis.conf /etc/redis/redis.orig\nroot@ubuntu:~$ cp /opt/gvm/src/openvas/config/redis-openvas.conf /etc/redis/\nroot@ubuntu:~$ chown redis:redis /etc/redis/redis-openvas.conf\nroot@ubuntu:~$ echo "db_address = /run/redis-openvas/redis.sock" > /opt/gvm/etc/openvas/openvas.conf\nroot@ubuntu:~$ systemctl enable redis-server@openvas.service\nroot@ubuntu:~$ systemctl start redis-server@openvas.service\n')])])]),s("h3",{attrs:{id:"set-up-gvm-user-permissions"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#set-up-gvm-user-permissions"}},[e._v("#")]),e._v(" Set up GVM user permissions")]),e._v(" "),s("p",[e._v("OpenVAS will be launched from an ospd-openvas process. The process need to be executed using root. Update the secure path in the sudoers file accordingly.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("div",{staticClass:"highlight-lines"},[s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("div",{staticClass:"highlighted"},[e._v(" ")]),s("br")]),s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("root@ubuntu:~$ visudo\n#\n# This file MUST be edited with the 'visudo' command as root.\n#\n# Please consider adding local content in /etc/sudoers.d/ instead of\n# directly modifying this file.\n#\n# See the man page for details on how to write a sudoers file.\n#\nDefaults        env_reset\nDefaults        mail_badpass\nDefaults        secure_path=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin:/opt/gvm/sbin\"\n")])])]),s("p",[e._v("Additionally in the sudoers file add the following lines to give the GVM user privileges to execute GVM and the greenbone security assistant (gsad) without password.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("div",{staticClass:"highlight-lines"},[s("br"),s("br"),s("br"),s("br"),s("div",{staticClass:"highlighted"},[e._v(" ")]),s("div",{staticClass:"highlighted"},[e._v(" ")]),s("br")]),s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("# Allow members of group sudo to execute any command\n%sudo   ALL=(ALL:ALL) ALL\n\n### Allow gvm user to run ospd-openvas and launch GVM with root privileges\ngvm ALL = NOPASSWD: /opt/gvm/sbin/openvas\ngvm ALL = NOPASSWD: /opt/gvm/sbin/gsad\n")])])]),s("h3",{attrs:{id:"update-network-vulnerability-tests"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#update-network-vulnerability-tests"}},[e._v("#")]),e._v(" Update Network Vulnerability Tests")]),e._v(" "),s("p",[e._v("Once the updated sudoers file is saved, update Network Vulnerability Tests (NVT) from Greenbone Community Feed (this might take awhile).")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("div",{staticClass:"highlight-lines"},[s("br"),s("br"),s("div",{staticClass:"highlighted"},[e._v(" ")]),s("br")]),s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("root@ubuntu:~$ exit\nserver@ubuntu:~$ sudo su - gvm\ngvm@ubuntu:~$ greenbone-nvt-sync\n")])])]),s("h3",{attrs:{id:"build-the-greenbone-vulnerability-manager"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#build-the-greenbone-vulnerability-manager"}},[e._v("#")]),e._v(" Build the Greenbone Vulnerability Manager")]),e._v(" "),s("p",[e._v("Next download and build the "),s("a",{attrs:{href:"https://github.com/greenbone/gvmd",target:"_blank",rel:"noopener noreferrer"}},[e._v("Greenbone Vulnerability Manager (GVM)"),s("OutboundLink")],1),e._v(" version 21.04.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("gvm@ubuntu:~$ cd /opt/gvm/src/\ngvm@ubuntu:~$ git clone -b gvmd-21.04 --single-branch https://github.com/greenbone/gvmd.git\ngvm@ubuntu:~$ cd gvmd/\ngvm@ubuntu:~$ export PKG_CONFIG_PATH=/opt/gvm/lib/pkgconfig:$PKG_CONFIG_PATH\ngvm@ubuntu:~$ mkdir build\ngvm@ubuntu:~$ cd build/\ngvm@ubuntu:~$ cmake -DCMAKE_INSTALL_PREFIX=/opt/gvm ..\ngvm@ubuntu:~$ make\ngvm@ubuntu:~$ make doc\ngvm@ubuntu:~$ make install\ngvm@ubuntu:~$ exit\n")])])]),s("h3",{attrs:{id:"configure-postgresql-database"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#configure-postgresql-database"}},[e._v("#")]),e._v(" Configure PostgreSQL database")]),e._v(" "),s("p",[e._v("For additional information see reference greenbone/gvmd "),s("a",{attrs:{href:"https://github.com/greenbone/gvmd/blob/master/INSTALL.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("INSTALL.md"),s("OutboundLink")],1),e._v(".")]),e._v(" "),s("p",[e._v("First make sure that the required dependencies have been installed (see "),s("a",{attrs:{href:"#prerequisites"}},[e._v("Prerequisites")]),e._v("). Proceed to create a Postgres user and database.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('server@ubuntu:~$ sudo -u postgres bash\npostgres@ubuntu:/home/server$ export LC_ALL="C"\npostgres@ubuntu:/home/server$ createuser -DRS gvm\npostgres@ubuntu:/home/server$ createdb -O gvm gvmd\n')])])]),s("p",[e._v("Setup correct permissions.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("postgres@ubuntu:/home/server$ psql gvmd\ngvmd=# create role dba with superuser noinherit;\ngvmd=# grant dba to gvm;\n")])])]),s("p",[e._v("Create database extensions.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('gvmd=# create extension "uuid-ossp";\ngvmd=# create extension "pgcrypto";\ngvmd=# exit\npostgres@ubuntu:/home/server$ exit\n')])])]),s("h3",{attrs:{id:"generate-gvm-certificates"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#generate-gvm-certificates"}},[e._v("#")]),e._v(" Generate GVM certificates")]),e._v(" "),s("p",[e._v("Once the database has been configured proceed and create the certificates.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("div",{staticClass:"highlight-lines"},[s("br"),s("div",{staticClass:"highlighted"},[e._v(" ")]),s("br")]),s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ sudo su - gvm\ngvm@ubuntu:~$ gvm-manage-certs -a\n")])])]),s("h3",{attrs:{id:"create-gvm-admin"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#create-gvm-admin"}},[e._v("#")]),e._v(" Create GVM admin")]),e._v(" "),s("p",[e._v("Create the GVM administration user. Do not forget to change the password later.")]),e._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[e._v("NOTE")]),e._v(" "),s("p",[e._v("Do not use special characters in the password.")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("gvm@ubuntu:~$ /opt/gvm/sbin/gvmd --create-user=admin --password=admin\nUser created.\n")])])]),s("p",[e._v("Next, lets retrieve our administrators uuid.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("div",{staticClass:"highlight-lines"},[s("br"),s("div",{staticClass:"highlighted"},[e._v(" ")]),s("br")]),s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("gvm@ubuntu:~$ gvmd --get-users --verbose\ngvm@ubuntu:~$ admin 129a1661-138b-4017-25x1-xc0231f91222\n")])])]),s("p",[e._v("Use the administration uuid and modify the gvmd settings as written below.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("gvm@ubuntu:~$ gvmd --modify-setting 78eceaec-3385-11ea-b237-28d24461215b --value 129a1661-138b-4017-25x1-xc0231f91222\n")])])]),s("h3",{attrs:{id:"update-greenbone-feed-sync"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#update-greenbone-feed-sync"}},[e._v("#")]),e._v(" Update Greenbone Feed Sync")]),e._v(" "),s("p",[e._v("Update the Greenbone Feed Synchronisation one at the time (this might take awhile).")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("gvm@ubuntu:~$ greenbone-feed-sync --type GVMD_DATA\ngvm@ubuntu:~$ greenbone-feed-sync --type SCAP\ngvm@ubuntu:~$ greenbone-feed-sync --type CERT\n")])])]),s("h3",{attrs:{id:"build-the-greenbone-security-assistant"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#build-the-greenbone-security-assistant"}},[e._v("#")]),e._v(" Build the Greenbone Security Assistant")]),e._v(" "),s("p",[e._v("Proceed to download and build the "),s("a",{attrs:{href:"https://github.com/greenbone/gsa",target:"_blank",rel:"noopener noreferrer"}},[e._v("Greenbone Security Assistant (GSA)"),s("OutboundLink")],1),e._v(" version 21.04.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("gvm@ubuntu:~$ cd src/\ngvm@ubuntu:~$ git clone -b gsa-21.04 --single-branch https://github.com/greenbone/gsa.git\ngvm@ubuntu:~$ cd gsa/\ngvm@ubuntu:~$ export PKG_CONFIG_PATH=/opt/gvm/lib/pkgconfig:$PKG_CONFIG_PATH\ngvm@ubuntu:~$ mkdir build\ngvm@ubuntu:~$ cd build/\ngvm@ubuntu:~$ cmake -DCMAKE_INSTALL_PREFIX=/opt/gvm ..\ngvm@ubuntu:~$ make\ngvm@ubuntu:~$ make doc\ngvm@ubuntu:~$ make install\ngvm@ubuntu:~$ touch /opt/gvm/var/log/gvm/gsad.log\n")])])]),s("h3",{attrs:{id:"set-up-the-virtual-environment-with-python"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#set-up-the-virtual-environment-with-python"}},[e._v("#")]),e._v(" Set up the Virtual environment with Python")]),e._v(" "),s("p",[e._v("First check the version of Python. If the version is not 3.8, add the repository and install the required version.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("gvm@ubuntu:~$ exit\nserver@ubuntu:~$ python3 --version\nserver@ubuntu:~$ sudo add-apt-repository ppa:deadsnakes/ppa\nserver@ubuntu:~$ sudo apt-get update\nserver@ubuntu:~$ sudo apt-get install python3.8 python3.8-dev\n")])])]),s("p",[e._v("Next install the virtual environment.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ sudo su - gvm\ngvm@ubuntu:~$ cd /opt/gvm/src\ngvm@ubuntu:~$ export PKG_CONFIG_PATH=/opt/gvm/lib/pkgconfig:$PKG_CONFIG_PATH\ngvm@ubuntu:~$ virtualenv --python python3.8 /opt/gvm/bin/ospd-scanner/\ngvm@ubuntu:~$ source /opt/gvm/bin/ospd-scanner/bin/activate\n")])])]),s("h3",{attrs:{id:"download-and-install-the-base-class-ospd-21-04-for-scanner-wrappers"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#download-and-install-the-base-class-ospd-21-04-for-scanner-wrappers"}},[e._v("#")]),e._v(" Download and install the base class ospd (21.04) for scanner wrappers")]),e._v(" "),s("p",[e._v("Proceed to download and install "),s("a",{attrs:{href:"https://github.com/greenbone/ospd",target:"_blank",rel:"noopener noreferrer"}},[e._v("ospd"),s("OutboundLink")],1),e._v(".")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("(ospd-scanner) gvm@ubuntu:~$ git clone -b ospd-21.04 --single-branch https://github.com/greenbone/ospd.git\n(ospd-scanner) gvm@ubuntu:~$ mkdir /opt/gvm/var/run/ospd/\n(ospd-scanner) gvm@ubuntu:~$ cd ospd/\n(ospd-scanner) gvm@ubuntu:~$ pip3 install .\n(ospd-scanner) gvm@ubuntu:~$ cd /opt/gvm/src\n")])])]),s("h3",{attrs:{id:"download-and-install-ospd-openvas-21-04-for-remote-control"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#download-and-install-ospd-openvas-21-04-for-remote-control"}},[e._v("#")]),e._v(" Download and install ospd-openvas (21.04) for remote control")]),e._v(" "),s("p",[e._v("Install the "),s("a",{attrs:{href:"https://github.com/greenbone/ospd-openvas",target:"_blank",rel:"noopener noreferrer"}},[e._v("ospd-openvas"),s("OutboundLink")],1),e._v(" for remote access.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("(ospd-scanner) gvm@ubuntu:~$ git clone -b ospd-openvas-21.04 --single-branch  https://github.com/greenbone/ospd-openvas.git\n(ospd-scanner) gvm@ubuntu:~$ cd ospd-openvas/\n(ospd-scanner) gvm@ubuntu:~$ pip3 install .\n")])])]),s("h3",{attrs:{id:"set-up-systemd"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#set-up-systemd"}},[e._v("#")]),e._v(" Set up systemd")]),e._v(" "),s("p",[e._v("Next setup the startup scripts. First, configure the Greenbone Manager startup script.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("gvm@ubuntu:~$ exit\nserver@ubuntu:~$ sudo -i\nroot@ubuntu:~$ nano /etc/systemd/system/gvmd.service\n")])])]),s("p",[e._v("Paste the following settings to the startup script.")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("Unit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("Description")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("Open Vulnerability Assessment System Manager Daemon\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("Documentation")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("man:gvmd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" https://www.greenbone.net\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("Wants")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("postgresql.service ospd-openvas.service\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("After")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("postgresql.service ospd-openvas.service\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("Service"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("Type")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("forking\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("User")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("gvm\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("Group")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("gvm\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("PIDFile")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("/opt/gvm/var/run/gvmd.pid\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("WorkingDirectory")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("/opt/gvm\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("ExecStart")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("/opt/gvm/sbin/gvmd --osp-vt-update"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("/opt/gvm/var/run/ospd.sock\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("ExecReload")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("/bin/kill -HUP "),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$MAINPID")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("KillMode")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("mixed\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("Restart")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("on-failure\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("RestartSec")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("2min\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("KillMode")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("process\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("KillSignal")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("SIGINT\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("GuessMainPID")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("no\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("PrivateTmp")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("true\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("Install"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("WantedBy")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("multi-user.target\n")])])]),s("p",[e._v("Once the first startup script is saved, proceed to create the script for the Greenbone Security Assistant (GSA).")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("root@ubuntu:~$ nano /etc/systemd/system/gsad.service\n")])])]),s("p",[e._v("Paste the following setup to the GSA startup script.")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("Unit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("Description")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("Greenbone Security Assistant "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("gsad"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("Documentation")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("man:gsad"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" https://www.greenbone.net\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("After")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("network.target\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("Wants")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("gvmd.service\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("Service"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("Type")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("forking\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("PIDFile")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("/opt/gvm/var/run/gsad.pid\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("WorkingDirectory")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("/opt/gvm\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("ExecStart")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("/opt/gvm/sbin/gsad --drop-privileges"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("gvm\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("Restart")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("on-failure\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("RestartSec")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("2min\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("KillMode")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("process\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("KillSignal")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("SIGINT\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("GuessMainPID")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("no\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("PrivateTmp")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("true\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("Install"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("WantedBy")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("multi-user.target\n")])])]),s("p",[e._v("Create the systemd service script for ospd-openvas.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("root@ubuntu:~$ nano /etc/systemd/system/ospd-openvas.service\n")])])]),s("p",[e._v("Paste the following settings to the ospd-openvas startup script.")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("Unit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("Description")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("Job that runs the ospd-openvas daemon\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("Documentation")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("man:gvm\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("After")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("network.target redis-server@openvas.service\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("Wants")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("redis-server@openvas.service\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("Service"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("Environment")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("PATH")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("/opt/gvm/bin/ospd-scanner/bin:/opt/gvm/bin:/opt/gvm/sbin:/opt/gvm/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("Type")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("forking\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("User")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("gvm\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("Group")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("gvm\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("WorkingDirectory")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("/opt/gvm\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("PIDFile")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("/opt/gvm/var/run/ospd-openvas.pid\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("ExecStart")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("/opt/gvm/bin/ospd-scanner/bin/python /opt/gvm/bin/ospd-scanner/bin/ospd-openvas --pid-file /opt/gvm/var/run/ospd-openvas.pid --unix-socket"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("/opt/gvm/var/run/ospd.sock --log-file /opt/gvm/var/log/gvm/ospd-scanner.log --lock-file-dir /opt/gvm/var/run/ospd/\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("Restart")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("on-failure\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("RestartSec")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("2min\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("KillMode")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("process\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("KillSignal")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("SIGINT\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("GuessMainPID")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("no\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("PrivateTmp")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("true\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("Install"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("WantedBy")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("multi-user.target\n")])])]),s("p",[e._v("Reload the system daemon and enable the startup script.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("root@ubuntu:~$ systemctl daemon-reload\nroot@ubuntu:~$ systemctl enable gvmd\nroot@ubuntu:~$ systemctl enable gsad\nroot@ubuntu:~$ systemctl enable ospd-openvas\nroot@ubuntu:~$ systemctl start gvmd\nroot@ubuntu:~$ systemctl start gsad\nroot@ubuntu:~$ systemctl start ospd-openvas\n")])])]),s("p",[e._v("Next check that all the services are running.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("div",{staticClass:"highlight-lines"},[s("div",{staticClass:"highlighted"},[e._v(" ")]),s("br"),s("br"),s("br"),s("div",{staticClass:"highlighted"},[e._v(" ")]),s("br"),s("br"),s("br"),s("div",{staticClass:"highlighted"},[e._v(" ")]),s("br"),s("br"),s("br"),s("br")]),s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("root@ubuntu:~$ systemctl status gvmd\n● gvmd.service - Open Vulnerability Assessment System Manager Daemon\n     Loaded: loaded (/etc/systemd/system/gvmd.service; enabled; vendor preset: enabled)\n     Active: active (running) since Tue 2020-09-29 21:04:47 UTC; 15s ago\nroot@ubuntu:~$ systemctl status gsad\n● gsad.service - Greenbone Security Assistant (gsad)\n     Loaded: loaded (/etc/systemd/system/gsad.service; enabled; vendor preset: enabled)\n     Active: active (running) since Tue 2020-09-29 21:04:51 UTC; 28s ago\nroot@ubuntu:~$ systemctl status ospd-openvas\n● ospd-openvas.service - Job that runs the ospd-openvas daemon\n     Loaded: loaded (/etc/systemd/system/ospd-openvas.service; enabled; vendor preset: enabled)\n     Active: active (running) since Tue 2020-09-29 21:04:45 UTC; 48s ago\n")])])]),s("h3",{attrs:{id:"modify-scanner"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#modify-scanner"}},[e._v("#")]),e._v(" Modify scanner")]),e._v(" "),s("p",[e._v("Before running vulnerability scans, also known as tasks, you need to modify the default OpenVAS scanner. Start with switching to your GVM user.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ sudo su - gvm\n")])])]),s("p",[e._v("Next get the pre-exisiting scanners by running command below. Copy the UUID from the OpenVAS Default Scanner.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("div",{staticClass:"highlight-lines"},[s("br"),s("br"),s("div",{staticClass:"highlighted"},[e._v(" ")]),s("br"),s("br")]),s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("gvm@ubuntu:~$ cd /opt/gvm/src/\ngvm@ubuntu:~$ gvmd --get-scanners\n08b69003-5fc2-4037-a479-93b440211c73  OpenVAS  /var/run/ospd/ospd.sock  0  OpenVAS Default\n6acd0832-df90-11e4-b9d5-28d24461215b  CVE    0  CVE\n")])])]),s("p",[e._v("Next run the modification command and attach the UUID to the scanner host socket.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("div",{staticClass:"highlight-lines"},[s("div",{staticClass:"highlighted"},[e._v(" ")]),s("br"),s("br")]),s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("gvm@ubuntu:~$ gvmd --modify-scanner=08b69003-5fc2-4037-a479-93b440211c73 --scanner-host=/opt/gvm/var/run/ospd.sock\nScanner modified.\n")])])]),s("p",[e._v("Login at your localhost e.g. "),s("code",[e._v("https://192.168.0.1")]),e._v(" with the username "),s("code",[e._v("admin")]),e._v(" and the chosen password.")]),e._v(" "),s("img",{staticClass:"zoom-custom-imgs",attrs:{src:"/img/openvas/gsa_login-2.png",alt:"GSA login"}}),e._v(" "),s("p",[e._v("Once logged in, go to the "),s("em",[e._v("Administration")]),e._v(" tab and select "),s("em",[e._v("Feed Status")]),e._v(". You'll see that the update is in progress (this might take awhile). When the status changed to "),s("em",[e._v("current")]),e._v(", go to the dashboard and it will be populated with CVEs by creation time and NVTs by severity class.")]),e._v(" "),s("img",{staticClass:"zoom-custom-imgs",attrs:{src:"/img/openvas/gsa_dashboard.png",alt:"GSA dashboard"}}),e._v(" "),s("p",[e._v("To run basic vulnerability scans and get hands-on approach to get started with OpenVAS check the "),s("a",{attrs:{href:"#running-vulnerability-scans"}},[e._v("Running vulnerability scans")]),e._v(" section.")]),e._v(" "),s("h2",{attrs:{id:"install-gvm-20-08-centos"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#install-gvm-20-08-centos"}},[e._v("#")]),e._v(" Install GVM 20.08 CentOS")]),e._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/Atomicorp/openvas",target:"_blank",rel:"noopener noreferrer"}},[e._v("Atomicorp GVM package"),s("OutboundLink")],1),e._v(" "),s("Badge",{attrs:{text:"non-sponsored",type:"default"}})],1),e._v(" "),s("p",[e._v("Check if SELinux is enabled.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("div",{staticClass:"highlight-lines"},[s("br"),s("div",{staticClass:"highlighted"},[e._v(" ")]),s("br"),s("br"),s("br"),s("br"),s("div",{staticClass:"highlighted"},[e._v(" ")]),s("br")]),s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@centos:~$ sestatus\nSELinux status:                 enabled\nSELinuxfs mount:                /sys/fs/selinux\nSELinux root directory:         /etc/selinux\nLoaded policy name:             targeted\nCurrent mode:                   enforcing\nMode from config file:          enforcing\n")])])]),s("p",[e._v("If enabled proceed to disable SELinux by running the command below and update the SELinux configuration file.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("div",{staticClass:"highlight-lines"},[s("div",{staticClass:"highlighted"},[e._v(" ")]),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("div",{staticClass:"highlighted"},[e._v(" ")]),s("br")]),s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@centos:~$ sudo setenforce 0\nserver@centos:~$ sudo nano /etc/selinux/config\n\n# This file controls the state of SELinux on the system.\n# SELINUX= can take one of these three values:\n#     enforcing - SELinux security policy is enforced.\n#     permissive - SELinux prints warnings instead of enforcing.\n#     disabled - No SELinux policy is loaded.\nSELINUX=disabled\n")])])]),s("p",[e._v("Save and reboot the system.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@centos:~$ sudo shutdown -r now\n")])])]),s("p",[e._v("Once the system rebooted control that SELinux been disabled.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@centos:~$ sestatus\nSELinux status:                 disabled\n")])])]),s("p",[e._v("Continue and download the Atomicorp installer.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("div",{staticClass:"highlight-lines"},[s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("div",{staticClass:"highlighted"},[e._v(" ")]),s("div",{staticClass:"highlighted"},[e._v(" ")]),s("br")]),s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@centos:~$ wget -q -O - https://updates.atomicorp.com/installers/atomic | sudo sh\n\nFor supported software packages please contact us at: \n\n  sales@atomicorp.com\n\nDo you agree to these terms? (yes/no) [Default: yes] yes\nEnable repo by default? (yes/no) [Default: yes]: yes\n")])])]),s("p",[e._v("Enable PowerTools and install extra packages.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@centos:~$ sudo yum config-manager --set-enabled PowerTools\nserver@centos:~$ sudo yum install epel-release\n")])])]),s("p",[e._v("Proceed and install GVM.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@centos:~$ sudo yum install gvm\n")])])]),s("p",[e._v("Finally run the GVM configuration script to setup GVM (this might take awhile).")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@centos:~$ sudo gvm-setup\n")])])]),s("p",[e._v("Once the GVM setup been complete proceed to set the administrator password.")]),e._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[e._v("NOTE")]),e._v(" "),s("p",[e._v("Do not use special characters in the password.")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("div",{staticClass:"highlight-lines"},[s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("div",{staticClass:"highlighted"},[e._v(" ")]),s("div",{staticClass:"highlighted"},[e._v(" ")]),s("br"),s("br"),s("br"),s("br")]),s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("Updating OpenVAS Manager certificates: Complete\n\nGVMD startup: Done\n\nSet the GSAD admin users password.\nThe admin user is used to configure accounts,\nUpdate NVT's manually, and manage roles.\n\nEnter Administrator Password:\nVerify Administrator Password:\n\nSetup complete\n  Log in to GSAD at https://localhost\n")])])]),s("p",[e._v("Login at your localhost e.g. "),s("code",[e._v("https://192.168.0.1")]),e._v(" with the username "),s("code",[e._v("admin")]),e._v(" and the chosen password.")]),e._v(" "),s("img",{staticClass:"zoom-custom-imgs",attrs:{src:"/img/openvas/gsa_dashboard.png",alt:"GSA dashboard"}}),e._v(" "),s("h2",{attrs:{id:"running-vulnerability-scans"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#running-vulnerability-scans"}},[e._v("#")]),e._v(" Running vulnerability scans")]),e._v(" "),s("p",[e._v("There is several approaches on how to configure and run tasks (scans) toward your targets (hosts) in GVM. In this tutorial we will go through how to run the more basic tasks. We will do both unauthenticated scans, where we do not grant GVM SSH access to our target, and authenticated scans to help identify internal server vulnerabilites or misconfigurations.")]),e._v(" "),s("h3",{attrs:{id:"unauthenticated-scan"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#unauthenticated-scan"}},[e._v("#")]),e._v(" Unauthenticated scan")]),e._v(" "),s("br"),e._v(" "),s("p",{attrs:{align:"center"}},[s("video",{staticStyle:{witdth:"100%",height:"auto"},attrs:{width:"600",controls:"",poster:"/img/icons/video.png"}},[s("source",{attrs:{src:"/vids/openvas/unauthenticated_scan.mp4",type:"video/mp4"}}),e._v("\n    Your browser does not support the video tag.\n  ")])]),e._v(" "),s("p",[e._v("Login to the Greenbone Security Assistant (GSA) e.g. "),s("code",[e._v("https://192.168.0.1")]),e._v(". Once logged in we will add our first target. Go the the "),s("em",[e._v("Configuration")]),e._v(" menu in the top navigation and select "),s("em",[e._v("Targets")]),e._v(".")]),e._v(" "),s("img",{staticClass:"zoom-custom-imgs",attrs:{src:"/img/openvas/gsa_targets.png",alt:"GSA targets"}}),e._v(" "),s("p",[e._v("In the top left corner of the "),s("em",[e._v("Targets")]),e._v(" view there's a starred document icon, click and select to create a "),s("em",[e._v("New Target")]),e._v(". Fill in the name of the target server e.g. "),s("em",[e._v("Ubuntu Client")]),e._v(" and its IP address "),s("code",[e._v("192.168.0.2")]),e._v(". Leave the rest of the settings in default.")]),e._v(" "),s("img",{staticClass:"zoom-custom-imgs",attrs:{src:"/img/openvas/gsa_target.png",alt:"GSA target"}}),e._v(" "),s("p",[e._v("Next we will create a task for unauthenticated targets (scans without SSH access). Go the "),s("em",[e._v("Scans")]),e._v(" in the top menu and select "),s("em",[e._v("Tasks")]),e._v(".")]),e._v(" "),s("img",{staticClass:"zoom-custom-imgs",attrs:{src:"/img/openvas/gsa_tasks.png",alt:"GSA tasks"}}),e._v(" "),s("p",[e._v("Click the starred document icon in the top left corner of the "),s("em",[e._v("Tasks")]),e._v(" view.")]),e._v(" "),s("img",{staticClass:"zoom-custom-imgs",attrs:{src:"/img/openvas/gsa_task.png",alt:"GSA task"}}),e._v(" "),s("p",[e._v("Select a descriptive name for your task e.g. Unauthenticated scan. In the "),s("em",[e._v("Scan Targets")]),e._v(" dropdown menu select your target we created before (Ubuntu Client). Leave the default settings and click save.")]),e._v(" "),s("img",{staticClass:"zoom-custom-imgs",attrs:{src:"/img/openvas/gsa_noauth_task.png",alt:"GSA noauth task"}}),e._v(" "),s("p",[e._v("You will then be redirected back to the "),s("em",[e._v("Tasks")]),e._v(" overview and our new task will be listed in the table below the graphs. To start the scan press the start button on the right side of the table.")]),e._v(" "),s("img",{staticClass:"zoom-custom-imgs",attrs:{src:"/img/openvas/gsa_noauth_scan.png",alt:"GSA noauth scan"}}),e._v(" "),s("h3",{attrs:{id:"authenticated-scan"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#authenticated-scan"}},[e._v("#")]),e._v(" Authenticated scan")]),e._v(" "),s("p",[e._v("First make sure that you've generated SSH keys for your GVM client user e.g. "),s("code",[e._v("client@ubuntu")]),e._v(". Add your public key to the targets authorized keys file. You may have to connect to your target host, through SSH, before running GVM vulnerability scan to add the target host to your clients machine known hosts. Once you've established a secure communication between your client and target, proceed to configure credentials in the Greenbone Security Assistant. Go to "),s("em",[e._v("Configuration")]),e._v(" and select "),s("em",[e._v("Credentials")]),e._v(".")]),e._v(" "),s("img",{staticClass:"zoom-custom-imgs",attrs:{src:"/img/openvas/gsa_credentials.png",alt:"GSA credentials"}}),e._v(" "),s("p",[e._v("Next click the starred document in the top left corner to create your new credentials. Give the credentials a desciptive name with an optional comment. In the dropdown menu "),s("em",[e._v("Type")]),e._v(", select "),s("em",[e._v("Username + SSH key")]),e._v(" and disallow insecure use and auto-generation. Add the username of the target host user followed by the password and upload the private key (e.g. id_rsa). Click save.")]),e._v(" "),s("img",{staticClass:"zoom-custom-imgs",attrs:{src:"/img/openvas/gsa_newcredentials.png",alt:"GSA new credentials"}}),e._v(" "),s("p",[e._v("Go to the "),s("em",[e._v("Targets")]),e._v(" section and either edit your "),s("a",{attrs:{href:"#unauthenticated-scan"}},[e._v("unauthenticated scan")]),e._v(" or create a new target. Set the host IP address and in the dropdown menu, under the "),s("em",[e._v("Credentials for authentication checks")]),e._v(", select your newly created SSH credential.")]),e._v(" "),s("img",{staticClass:"zoom-custom-imgs",attrs:{src:"/img/openvas/gsa_auth_target.png",alt:"GSA auth target"}}),e._v(" "),s("p",[e._v("Finally create a new task and select the target that we attached our credentials to and leave the default settings.")]),e._v(" "),s("img",{staticClass:"zoom-custom-imgs",attrs:{src:"/img/openvas/gsa_auth_task.png",alt:"GSA auth task"}}),e._v(" "),s("h2",{attrs:{id:"two-factor-authentication-w-privacyidea"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#two-factor-authentication-w-privacyidea"}},[e._v("#")]),e._v(" Two-factor authentication w/ privacyIDEA")]),e._v(" "),s("p",[e._v("To enforce two-factor authentication for Greenbone Security Assistant with privacyIDEA and YubiKey read the "),s("RouterLink",{attrs:{to:"/privacyidea/"}},[e._v("Two-factor authentication w/ privacyIDEA and YubiKey")]),e._v(" chapter.")],1),e._v(" "),s("h2",{attrs:{id:"install-openvas-9-community-version"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#install-openvas-9-community-version"}},[e._v("#")]),e._v(" Install OpenVAS-9 community version "),s("Badge",{attrs:{text:"deprecated",type:"warning"}})],1),e._v(" "),s("p",[e._v("First add the OpenVAS PPA repository to your server.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ sudo add-apt-repository ppa:mrazavi/openvas\n")])])]),s("p",[e._v("Next we need to update and install the main packages.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ sudo apt-get update\nserver@ubuntu:~$ sudo apt-get install openvas9\n")])])]),s("p",[e._v("We will also install the OpenVAS9 dev package so we can run single OpenVAS nasl scripts, for fast troubleshooting. Additionaly we will also be adding the vulnerability data by syncing with the Greenbone feeds.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ sudo apt-get install libopenvas9-dev\nserver@ubuntu:~$ sudo greenbone-nvt-sync\nserver@ubuntu:~$ sudo greenbone-scapdata-sync\nserver@ubuntu:~$ sudo greenbone-certdata-sync\n")])])]),s("p",[e._v("To keep OpenVAS up-to-date to run the latest tests, we need to sync the nvt, scap and cert data regularly. To achieve this we will create a script and add it to our cron.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ sudo nano /usr/local/bin/openvas-update\n")])])]),s("p",[e._v("Add the following content to the openvas-update file.")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("/usr/sbin/greenbone-nvt-sync\n/usr/sbin/greenbone-certdata-sync\n/usr/sbin/greenbone-scapdata-sync\n/usr/sbin/openvasmd --update --verbose --progress\n/etc/init.d/openvas-manager restart\n/etc/init.d/openvas-scanner restart\n")])])]),s("p",[e._v("Save the file and make it executable.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ sudo chmod a+x /usr/local/bin/openvas-update\n")])])]),s("p",[e._v("We will add the update script to cron with a nightly frequency.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("Nightly 0 0 * * * root /usr/local/bin/openvas-update\n")])])]),s("h2",{attrs:{id:"gvm-behind-nginx-proxy"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gvm-behind-nginx-proxy"}},[e._v("#")]),e._v(" GVM behind NGINX Proxy")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ sudo nano /etc/default/openvas-gsa\n")])])]),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Defaults for Greenbone Security Assistant initscript")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# sourced by /etc/init.d/openvas-gsa")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# installed at /etc/default/openvas-gsa by the maintainer scripts")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# To disable HTTPS:")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#HTTP_ONLY=1")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# To allow <host> as hostname/address part of a Host header:")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("ALLOW_HEADER_HOST")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("openvas.example.com\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# To enable http redirection:")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("HTTP_REDIRECT")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# To set listening address:")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("LISTEN_ADDRESS")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"127.0.0.1"')]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# To set listening port number:")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("PORT_NUMBER")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("4000")]),e._v("\n")])])]),s("p",[e._v("Restart openvas-gsa "),s("code",[e._v("sudo systemctl restart openvas-gsa")]),e._v(". Edit the NGINX configuration to fit the environment.")]),e._v(" "),s("div",{staticClass:"language-nginx extra-class"},[s("pre",{pre:!0,attrs:{class:"language-nginx"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("server")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("listen")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("443")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("ssl")]),e._v(" http2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("listen")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("443")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("ssl")]),e._v(" http2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("server_name")]),e._v(" openvas"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("example"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("com"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# SSL CERTIFICATES")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("ssl_certificate")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("etc"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("nginx"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("ssl")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("openvas"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("example"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("com"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("server")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("crt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("ssl_certificate_key")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("etc"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("nginx"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("ssl")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("openvas"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("example"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("com"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("server")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("ssl_protocols")]),e._v(" TLSv1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("ssl_ciphers")]),e._v(" ECDHE"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("RSA"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("AES256"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("GCM"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("SHA512"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("DHE"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("RSA"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("AES256"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("GCM"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("SHA512"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("ECDHE"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("RSA"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("AES256"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("GCM"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("SHA384"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("DHE"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("RSA"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("AES256"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("GCM"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("SHA384"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("ECDHE"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("RSA"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("AES256"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("SHA384"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("ssl_prefer_server_ciphers")]),e._v(" on"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("ssl_dhparam")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("etc"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("nginx"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("dhparams"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("pem"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("add_header")]),e._v(" X"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("Frame"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("Options "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"SAMEORIGIN"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("add_header")]),e._v(" X"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("XSS"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("Protection "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"1; mode=block"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("add_header")]),e._v(" X"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("Content"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("Type"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("Options "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"nosniff"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("index")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("index")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("html "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("index")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("htm "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("index")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("php"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("charset")]),e._v(" utf"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("location")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("proxy_set_header")]),e._v("   Host             "),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$http_host")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("proxy_set_header")]),e._v("   X"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("Real"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("IP        "),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$remote_addr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("proxy_set_header")]),e._v("   REMOTE_HOST      "),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$remote_addr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("proxy_set_header")]),e._v("   X"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("Forwarded"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("For  "),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$proxy_add_x_forwarded_for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("proxy_set_header")]),e._v("   X"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("FORWARDED"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("PROTOCOL")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$scheme")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("  \n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("proxy_pass")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("https")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("127.0")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v(".0")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v(".1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("4000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("location")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("favicon"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("ico "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("access_log")]),e._v(" off"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("log_not_found")]),e._v(" off"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("location")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("robots"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("txt  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("access_log")]),e._v(" off"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("log_not_found")]),e._v(" off"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("access_log")]),e._v(" off"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("error_log")]),e._v("  "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("var"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("log"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("nginx"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("openvas"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("example"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("com"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("error"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("log error"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("location")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("~")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("\\"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("?")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("!")]),e._v("well"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("known"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("*")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n       "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("deny")]),e._v(" all"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ sudo systemctl reload nginx.service\n")])])]),s("h2",{attrs:{id:"scheduled-jobs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#scheduled-jobs"}},[e._v("#")]),e._v(" Scheduled jobs")]),e._v(" "),s("p",[e._v("To keep the community feed up-to-date, first login as your GVM user.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ sudo su - gvm\n")])])]),s("p",[e._v("Create the file that we will populate with the required commands.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("gvm@ubuntu:~$ touch /opt/gvm/bin/openvas-update\n")])])]),s("p",[e._v("Make the file executable.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("gvm@ubuntu:~$ chmod a+x /opt/gvm/bin/openvas-update\n")])])]),s("p",[e._v("Enter the commands that we will run daily.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("gvm@ubuntu:~$ nano /opt/gvm/bin/openvas-update\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("/opt/gvm/bin/greenbone-nvt-sync\n/opt/gvm/sbin/greenbone-feed-sync --type GVMD_DATA\n/opt/gvm/sbin/greenbone-feed-sync --type SCAP\n/opt/gvm/sbin/greenbone-feed-sync --type CERT\n")])])]),s("p",[e._v("Edit the GVM users crontab and add the script we created to check for daily updates.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("gvm@ubuntu:~$ crontab -e\n")])])]),s("div",{staticClass:"language-bash extra-class"},[s("div",{staticClass:"highlight-lines"},[s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("br"),s("div",{staticClass:"highlighted"},[e._v(" ")]),s("br")]),s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Edit this file to introduce tasks to be run by cron.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Each task to run has to be defined through a single line")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# indicating with different fields when the task will be run")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# and what command to run for the task")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# To define the time you can provide concrete values for")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# minute (m), hour (h), day of month (dom), month (mon),")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# and day of week (dow) or use '*' in these fields (for 'any').")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Notice that tasks will be started based on the cron's system")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# daemon's notion of time and timezones.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Output of the crontab jobs (including errors) is sent through")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# email to the user the crontab file belongs to (unless redirected).")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# For example, you can run a backup of all your user accounts")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# at 5 a.m every week with:")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 0 5 * * 1 tar -zcf /var/backups/home.tgz /home/")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# For more information see the manual pages of crontab(5) and cron(8)")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# m h  dom mon dow   command")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v(" * * * /opt/gvm/bin/openvas-update\n")])])]),s("h2",{attrs:{id:"troubleshooting"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#troubleshooting"}},[e._v("#")]),e._v(" Troubleshooting")]),e._v(" "),s("p",[e._v("If you encounter any issue or having questions regarding Greenbone Vulnerability Manager, I recommend using their helpful "),s("a",{attrs:{href:"https://community.greenbone.net/",target:"_blank",rel:"noopener noreferrer"}},[e._v("community forum"),s("OutboundLink")],1),e._v(".")]),e._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/libellux/Libellux-Up-and-Running/issues/new/choose",target:"_blank",rel:"noopener noreferrer"}},[e._v("Questions"),s("OutboundLink")],1),e._v(", "),s("a",{attrs:{href:"https://github.com/libellux/Libellux-Up-and-Running/issues/new/choose",target:"_blank",rel:"noopener noreferrer"}},[e._v("comments"),s("OutboundLink")],1),e._v(", or "),s("a",{attrs:{href:"https://github.com/libellux/Libellux-Up-and-Running/issues/new/choose",target:"_blank",rel:"noopener noreferrer"}},[e._v("problems"),s("OutboundLink")],1),e._v(" regarding this service? Create an issue "),s("a",{attrs:{href:"https://github.com/libellux/Libellux-Up-and-Running/issues/new/choose",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),s("OutboundLink")],1),e._v(" or contact "),s("a",{attrs:{href:"mailto:webmaster@libellux.com"}},[e._v("webmaster@libellux.com")]),e._v(".")]),e._v(" "),s("h3",{attrs:{id:"sec-error-inadequate-key-usage"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sec-error-inadequate-key-usage"}},[e._v("#")]),e._v(" SEC_ERROR_INADEQUATE_KEY_USAGE")]),e._v(" "),s("p",[e._v("If receiving "),s("code",[e._v("SEC_ERROR_INADEQUATE_KEY_USAGE")]),e._v(" and the browser blocks access to the local GVM server, proceed with removing the certificate. For example, in Firefox go to "),s("code",[e._v("about:preferences#privacy")]),e._v(" and the certificate section. Select Show certificates, click the Servers tab and remove the certificates found under GVM Users.")]),e._v(" "),s("h3",{attrs:{id:"failed-to-find-interpreter-for-python-3-7"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#failed-to-find-interpreter-for-python-3-7"}},[e._v("#")]),e._v(" Failed to find interpreter for Python 3.7")]),e._v(" "),s("p",[e._v("If receiving "),s("code",[e._v("RuntimeError: failed to find interpreter for Builtin discover of python_spec='python3.7'")]),e._v(" make sure you've followed the instructions to install the required 3.7 packages.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("server@ubuntu:~$ sudo add-apt-repository ppa:deadsnakes/ppa\nserver@ubuntu:~$ sudo apt-get update\nserver@ubuntu:~$ sudo apt-get install python3.7 python3.7-dev\n")])])]),s("h2",{attrs:{id:"enterprise-solutions"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#enterprise-solutions"}},[e._v("#")]),e._v(" Enterprise solutions "),s("Badge",{attrs:{text:"non-sponsored",type:"default"}})],1),e._v(" "),s("h3",{attrs:{id:"the-greenbone-security-manager"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#the-greenbone-security-manager"}},[e._v("#")]),e._v(" The Greenbone Security Manager")]),e._v(" "),s("p",[e._v("The Greenbone Security Manager (GSM) is an appliance for vulnerability scanning and management. It is offered in various performance levels and basically supports an unlimited number of target systems. The actually achievable number depends on the scan pattern and scan targets. For finding the right model for your purpose, we provide reference values for the number of target IP addresses below, assuming a common scenario with a scan every 24 hours.")]),e._v(" "),s("p",[s("a",{attrs:{href:"https://www.greenbone.net/en/product-comparison/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Greenbone Security Manager"),s("OutboundLink")],1)]),e._v(" "),s("p",[s("a",{attrs:{href:"https://ko-fi.com/B0B31BJU3",target:"_blank",rel:"noopener noreferrer"}},[s("img",{attrs:{src:"https://www.ko-fi.com/img/githubbutton_sm.svg",alt:"ko-fi"}}),s("OutboundLink")],1)]),e._v(" "),s("social-share")],1)}),[],!1,null,null,null);t.default=n.exports}}]);